

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Thu Dec 22 08:14:31 2022

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F26K20
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1,inline
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1,inline
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1,inline
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1
    66                           	psect	text51,global,reloc=2,class=CODE,delta=1
    67                           	psect	text52,global,reloc=2,class=CODE,delta=1
    68                           	psect	text53,global,reloc=2,class=CODE,delta=1
    69                           	psect	text54,global,reloc=2,class=CODE,delta=1,inline
    70                           	psect	text55,global,reloc=2,class=CODE,delta=1,inline
    71                           	psect	text56,global,reloc=2,class=CODE,delta=1,inline
    72                           	psect	text57,global,reloc=2,class=CODE,delta=1,inline
    73                           	psect	text58,global,reloc=2,class=CODE,delta=1,inline
    74                           	psect	text59,global,reloc=2,class=CODE,delta=1,inline
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1,inline
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1,inline
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1,inline
    88                           	psect	text73,global,reloc=2,class=CODE,delta=1,inline
    89                           	psect	text74,global,reloc=2,class=CODE,delta=1
    90                           	psect	text75,global,reloc=2,class=CODE,delta=1,inline
    91                           	psect	text76,global,reloc=2,class=CODE,delta=1,inline
    92                           	psect	text77,global,reloc=2,class=CODE,delta=1,inline
    93                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    94                           	psect	text79,global,reloc=2,class=CODE,delta=1
    95                           	psect	text80,global,reloc=2,class=CODE,delta=1
    96                           	psect	text81,global,reloc=2,class=CODE,delta=1
    97                           	psect	text82,global,reloc=2,class=CODE,delta=1
    98                           	psect	text83,global,reloc=2,class=CODE,delta=1
    99                           	psect	text84,global,reloc=2,class=CODE,delta=1
   100                           	psect	text85,global,reloc=2,class=CODE,delta=1
   101                           	psect	text86,global,reloc=2,class=CODE,delta=1
   102                           	psect	text87,global,reloc=2,class=CODE,delta=1
   103                           	psect	text88,global,reloc=2,class=CODE,delta=1
   104                           	psect	text89,global,reloc=2,class=CODE,delta=1
   105                           	psect	text90,global,reloc=2,class=CODE,delta=1
   106                           	psect	text91,global,reloc=2,class=CODE,delta=1
   107                           	psect	text92,global,reloc=2,class=CODE,delta=1
   108                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   109                           	psect	text93,global,reloc=2,class=CODE,delta=1
   110                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   111                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   112                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
   113                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
   114   000000                     
   115                           ; Version 2.35
   116                           ; Generated 05/05/2021 GMT
   117                           ; 
   118                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
   119                           ; All rights reserved.
   120                           ; 
   121                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   122                           ; 
   123                           ; Redistribution and use in source and binary forms, with or without modification, are
   124                           ; permitted provided that the following conditions are met:
   125                           ; 
   126                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   127                           ;        conditions and the following disclaimer.
   128                           ; 
   129                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   130                           ;        of conditions and the following disclaimer in the documentation and/or other
   131                           ;        materials provided with the distribution. Publication is not required when
   132                           ;        this file is used in an embedded application.
   133                           ; 
   134                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   135                           ;        software without specific prior written permission.
   136                           ; 
   137                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   138                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   139                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   140                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   141                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   142                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   143                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   144                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   145                           ; 
   146                           ; 
   147                           ; Code-generator required, PIC18F26K20 Definitions
   148                           ; 
   149                           ; SFR Addresses
   150   000000                     
   151                           	psect	idataCOMRAM
   152   001F22                     __pidataCOMRAM:
   153                           	callstack 0
   154                           
   155                           ;initializer for main@F3020
   156   001F22  1C                 	db	28
   157   001F23  00                 	db	0
   158   001F24  00                 	db	0
   159                           
   160                           ;initializer for main@F3018
   161   001F25  30                 	db	48
   162   001F26  64                 	db	100
   163   001F27  C0                 	db	192
   164                           
   165                           	psect	smallconst
   166   001000                     __psmallconst:
   167                           	callstack 0
   168   001000  00                 	db	0
   169   001001                     _i2c_fsmStateTable:
   170                           	callstack 0
   171   001001  74                 	db	low _I2C_DO_IDLE
   172   001002  1E                 	db	high _I2C_DO_IDLE
   173   001003  3C                 	db	low _I2C_DO_SEND_ADR_READ
   174   001004  1E                 	db	high _I2C_DO_SEND_ADR_READ
   175   001005  2C                 	db	low _I2C_DO_SEND_ADR_WRITE
   176   001006  1E                 	db	high _I2C_DO_SEND_ADR_WRITE
   177   001007  C2                 	db	low _I2C_DO_TX
   178   001008  14                 	db	high _I2C_DO_TX
   179   001009  D6                 	db	low _I2C_DO_RX
   180   00100A  15                 	db	high _I2C_DO_RX
   181   00100B  68                 	db	low _I2C_DO_RCEN
   182   00100C  1E                 	db	high _I2C_DO_RCEN
   183   00100D  A6                 	db	low _I2C_DO_TX_EMPTY
   184   00100E  17                 	db	high _I2C_DO_TX_EMPTY
   185   00100F  12                 	db	low _I2C_DO_SEND_RESTART_READ
   186   001010  1F                 	db	high _I2C_DO_SEND_RESTART_READ
   187   001011  0A                 	db	low _I2C_DO_SEND_RESTART_WRITE
   188   001012  1F                 	db	high _I2C_DO_SEND_RESTART_WRITE
   189   001013  02                 	db	low _I2C_DO_SEND_RESTART
   190   001014  1F                 	db	high _I2C_DO_SEND_RESTART
   191   001015  FA                 	db	low _I2C_DO_SEND_STOP
   192   001016  1E                 	db	high _I2C_DO_SEND_STOP
   193   001017  F2                 	db	low _I2C_DO_RX_ACK
   194   001018  1E                 	db	high _I2C_DO_RX_ACK
   195   001019  EA                 	db	low _I2C_DO_RX_NACK_STOP
   196   00101A  1E                 	db	high _I2C_DO_RX_NACK_STOP
   197   00101B  E2                 	db	low _I2C_DO_RX_NACK_RESTART
   198   00101C  1E                 	db	high _I2C_DO_RX_NACK_RESTART
   199   00101D  5C                 	db	low _I2C_DO_RESET
   200   00101E  1E                 	db	high _I2C_DO_RESET
   201   00101F  68                 	db	low _I2C_DO_ADDRESS_NACK
   202   001020  19                 	db	high _I2C_DO_ADDRESS_NACK
   203   001021                     __end_of_i2c_fsmStateTable:
   204                           	callstack 0
   205   000000                     _RCREG	set	4014
   206   000000                     _TXREG	set	4013
   207   000000                     _SPBRG	set	4015
   208   000000                     _TXSTA	set	4012
   209   001021  00                 	db	0	; dummy byte at the end
   210   000000                     
   211                           	psect	nvCOMRAM
   212   000043                     __pnvCOMRAM:
   213                           	callstack 0
   214   000043                     _EUSART_FramingErrorHandler:
   215                           	callstack 0
   216   000043                     	ds	2
   217   000045                     _EUSART_RxDefaultInterruptHandler:
   218                           	callstack 0
   219   000045                     	ds	2
   220   000047                     _EUSART_TxDefaultInterruptHandler:
   221                           	callstack 0
   222   000047                     	ds	2
   223   000049                     _TMR0_InterruptHandler:
   224                           	callstack 0
   225   000049                     	ds	2
   226   00004B                     _eusartTxBufferRemaining:
   227                           	callstack 0
   228   00004B                     	ds	1
   229   00004C                     _timer0ReloadVal:
   230                           	callstack 0
   231   00004C                     	ds	1
   232                           
   233                           	psect	nvBANK0
   234   0000DD                     __pnvBANK0:
   235                           	callstack 0
   236   0000DD                     _EUSART_ErrorHandler:
   237                           	callstack 0
   238   0000DD                     	ds	2
   239   0000DF                     _EUSART_OverrunErrorHandler:
   240                           	callstack 0
   241   0000DF                     	ds	2
   242   000000                     _LATAbits	set	3977
   243   000000                     _RCSTAbits	set	4011
   244   000000                     _TXSTAbits	set	4012
   245   000000                     _T0CONbits	set	4053
   246   000000                     _SSPSTATbits	set	4039
   247   000000                     _SSPCON2bits	set	4037
   248   000000                     _SSPCON1bits	set	4038
   249   000000                     _WPUB	set	3964
   250   000000                     _ANSEL	set	3966
   251   000000                     _LATA	set	3977
   252   000000                     _PIE1bits	set	3997
   253   000000                     _PIR2bits	set	4001
   254   000000                     _SSPCON2	set	4037
   255   000000                     _SSPCON1	set	4038
   256   000000                     _SSPSTAT	set	4039
   257   000000                     _RCONbits	set	4048
   258   000000                     _OSCCON	set	4051
   259   000000                     _INTCON2bits	set	4081
   260   000000                     _SSPBUF	set	4041
   261   000000                     _SSPADD	set	4040
   262   000000                     _RCSTA	set	4011
   263   000000                     _BAUDCON	set	4024
   264   000000                     _PIR1bits	set	3998
   265   000000                     _TRISA	set	3986
   266   000000                     _LATC	set	3979
   267   000000                     _LATB	set	3978
   268   000000                     _OSCTUNE	set	3995
   269   000000                     _TRISC	set	3988
   270   000000                     _TRISB	set	3987
   271   000000                     _PORTAbits	set	3968
   272   000000                     _ANSELH	set	3967
   273   000000                     _INTCONbits	set	4082
   274   000000                     _T0CON	set	4053
   275   000000                     _TMR0L	set	4054
   276   000000                     _TMR0H	set	4055
   277   000000                     _SPBRGH	set	4016
   278                           
   279                           ; #config settings
   280                           
   281                           	psect	cinit
   282   001A46                     __pcinit:
   283                           	callstack 0
   284   001A46                     start_initialization:
   285                           	callstack 0
   286   001A46                     __initialization:
   287                           	callstack 0
   288                           
   289                           ; Initialize objects allocated to COMRAM (6 bytes)
   290                           ; load TBLPTR registers with __pidataCOMRAM
   291   001A46  0E22               	movlw	low __pidataCOMRAM
   292   001A48  6EF6               	movwf	tblptrl,c
   293   001A4A  0E1F               	movlw	high __pidataCOMRAM
   294   001A4C  6EF7               	movwf	tblptrh,c
   295   001A4E  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   296   001A50  6EF8               	movwf	tblptru,c
   297   001A52  EE00  F04D         	lfsr	0,__pdataCOMRAM
   298   001A56  EE10 F006          	lfsr	1,6
   299   001A5A                     copy_data0:
   300   001A5A  0009               	tblrd		*+
   301   001A5C  CFF5 FFEE          	movff	tablat,postinc0
   302   001A60  50E5               	movf	postdec1,w,c
   303   001A62  50E1               	movf	fsr1l,w,c
   304   001A64  E1FA               	bnz	copy_data0
   305                           
   306                           ; Clear objects allocated to BANK0 (114 bytes)
   307   001A66  EE00  F060         	lfsr	0,__pbssBANK0
   308   001A6A  0E72               	movlw	114
   309   001A6C                     clear_0:
   310   001A6C  6AEE               	clrf	postinc0,c
   311   001A6E  06E8               	decf	wreg,f,c
   312   001A70  E1FD               	bnz	clear_0
   313                           
   314                           ; Clear objects allocated to COMRAM (31 bytes)
   315   001A72  EE00  F024         	lfsr	0,__pbssCOMRAM
   316   001A76  0E1F               	movlw	31
   317   001A78                     clear_1:
   318   001A78  6AEE               	clrf	postinc0,c
   319   001A7A  06E8               	decf	wreg,f,c
   320   001A7C  E1FD               	bnz	clear_1
   321   001A7E                     end_of_initialization:
   322                           	callstack 0
   323   001A7E                     __end_of__initialization:
   324                           	callstack 0
   325   001A7E  9053               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   326   001A80  9253               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   327   001A82  0100               	movlb	0
   328   001A84  EF6B  F009         	goto	_main	;jump to C main() function
   329                           
   330                           	psect	bssCOMRAM
   331   000024                     __pbssCOMRAM:
   332                           	callstack 0
   333   000024                     _eusartRxStatusBuffer:
   334                           	callstack 0
   335   000024                     	ds	8
   336   00002C                     _eusartTxBuffer:
   337                           	callstack 0
   338   00002C                     	ds	8
   339   000034                     _eusartRxLastError:
   340                           	callstack 0
   341   000034                     	ds	1
   342   000035                     _eusartRxCount:
   343                           	callstack 0
   344   000035                     	ds	1
   345   000036                     _eusartRxTail:
   346                           	callstack 0
   347   000036                     	ds	1
   348   000037                     _eusartRxHead:
   349                           	callstack 0
   350   000037                     	ds	1
   351   000038                     _eusartTxTail:
   352                           	callstack 0
   353   000038                     	ds	1
   354   000039                     _eusartTxHead:
   355                           	callstack 0
   356   000039                     	ds	1
   357   00003A                     _USART_UDR_vect:
   358                           	callstack 0
   359   00003A                     	ds	1
   360   00003B                     _D:
   361                           	callstack 0
   362   00003B                     	ds	1
   363   00003C                     _Bit_action_ModbasRtu:
   364                           	callstack 0
   365   00003C                     	ds	1
   366   00003D                     _Temp_ModbasRtu:
   367                           	callstack 0
   368   00003D                     	ds	1
   369   00003E                     _quantity_Data_ModbasRtu:
   370                           	callstack 0
   371   00003E                     	ds	1
   372   00003F                     _Danie_ModbasRtu_Binary_Output:
   373                           	callstack 0
   374   00003F                     	ds	2
   375   000041                     _Danie_ModbasRtu_Binary_input:
   376                           	callstack 0
   377   000041                     	ds	2
   378                           
   379                           	psect	dataCOMRAM
   380   00004D                     __pdataCOMRAM:
   381                           	callstack 0
   382   00004D                     main@F3020:
   383                           	callstack 0
   384   00004D                     	ds	3
   385   000050                     main@F3018:
   386                           	callstack 0
   387   000050                     	ds	3
   388                           
   389                           	psect	bssBANK0
   390   000060                     __pbssBANK0:
   391                           	callstack 0
   392   000060                     _I2C_Status:
   393                           	callstack 0
   394   000060                     	ds	36
   395   000084                     _eusartRxBuffer:
   396                           	callstack 0
   397   000084                     	ds	8
   398   00008C                     _Danie_Rx_ModbasRtu:
   399                           	callstack 0
   400   00008C                     	ds	30
   401   0000AA                     _Danie_ModbasRtu_analog_Output:
   402                           	callstack 0
   403   0000AA                     	ds	20
   404   0000BE                     _Danie_ModbasRtu_analog_input:
   405                           	callstack 0
   406   0000BE                     	ds	20
   407                           
   408                           	psect	cstackBANK0
   409   0000D2                     __pcstackBANK0:
   410                           	callstack 0
   411   0000D2                     main@red2:
   412                           	callstack 0
   413                           
   414                           ; 3 bytes @ 0x0
   415   0000D2                     	ds	3
   416   0000D5                     main@dat:
   417                           	callstack 0
   418                           
   419                           ; 3 bytes @ 0x3
   420   0000D5                     	ds	3
   421   0000D8                     main@red:
   422                           	callstack 0
   423                           
   424                           ; 3 bytes @ 0x6
   425   0000D8                     	ds	3
   426   0000DB                     main@address:
   427                           	callstack 0
   428                           
   429                           ; 1 bytes @ 0x9
   430   0000DB                     	ds	1
   431   0000DC                     main@bitt:
   432                           	callstack 0
   433                           
   434                           ; 1 bytes @ 0xA
   435   0000DC                     	ds	1
   436                           
   437                           	psect	cstackCOMRAM
   438   000001                     __pcstackCOMRAM:
   439                           	callstack 0
   440   000001                     ??_USART_RXC_vect:
   441   000001                     
   442                           ; 1 bytes @ 0x0
   443   000001                     	ds	1
   444   000002                     USART_RXC_vect@TempModbas:
   445                           	callstack 0
   446                           
   447                           ; 1 bytes @ 0x1
   448   000002                     	ds	1
   449   000003                     ??_INTERRUPT_InterruptManager:
   450                           
   451                           ; 1 bytes @ 0x2
   452   000003                     	ds	4
   453   000007                     ?_crc_chk:
   454                           	callstack 0
   455   000007                     ?_ModbasRtu_Register_address:
   456                           	callstack 0
   457   000007                     I2C_Open@address:
   458                           	callstack 0
   459   000007                     I2C_Close@returnValue:
   460                           	callstack 0
   461   000007                     I2C_MasterSendTxData@data:
   462                           	callstack 0
   463   000007                     __Bin_input_Output@state:
   464                           	callstack 0
   465   000007                     I2C_SetBuffer@buffer:
   466                           	callstack 0
   467   000007                     I2C_SetCallback@cb:
   468                           	callstack 0
   469   000007                     TMR0_SetInterruptHandler@InterruptHandler:
   470                           	callstack 0
   471   000007                     EUSART_SetFramingErrorHandler@interruptHandler:
   472                           	callstack 0
   473   000007                     EUSART_SetOverrunErrorHandler@interruptHandler:
   474                           	callstack 0
   475   000007                     EUSART_SetErrorHandler@interruptHandler:
   476                           	callstack 0
   477   000007                     EUSART_SetTxInterruptHandler@interruptHandler:
   478                           	callstack 0
   479   000007                     EUSART_SetRxInterruptHandler@interruptHandler:
   480                           	callstack 0
   481   000007                     crc_chk@data:
   482                           	callstack 0
   483                           
   484                           ; 2 bytes @ 0x6
   485   000007                     	ds	1
   486   000008                     I2C_Open@returnValue:
   487                           	callstack 0
   488   000008                     __Bin_input_Output@Masiv:
   489                           	callstack 0
   490                           
   491                           ; 2 bytes @ 0x7
   492   000008                     	ds	1
   493   000009                     ??_ModbasRtu_Register_address:
   494   000009                     crc_chk@length:
   495                           	callstack 0
   496   000009                     I2C_SetBuffer@bufferSize:
   497                           	callstack 0
   498   000009                     I2C_SetCallback@ptr:
   499                           	callstack 0
   500                           
   501                           ; 2 bytes @ 0x8
   502   000009                     	ds	1
   503   00000A                     ??_crc_chk:
   504   00000A                     __Bin_input_Output@Sd:
   505                           	callstack 0
   506                           
   507                           ; 1 bytes @ 0x9
   508   00000A                     	ds	1
   509   00000B                     ??__Bin_input_Output:
   510   00000B                     I2C_SetCallback@idx:
   511                           	callstack 0
   512                           
   513                           ; 1 bytes @ 0xA
   514   00000B                     	ds	1
   515   00000C                     I2C_SetDataCompleteCallback@cb:
   516                           	callstack 0
   517   00000C                     I2C_SetAddressNackCallback@cb:
   518                           	callstack 0
   519   00000C                     crc_chk@j:
   520                           	callstack 0
   521                           
   522                           ; 2 bytes @ 0xB
   523   00000C                     	ds	1
   524   00000D                     ModbasRtu_Register_address@Hi:
   525                           	callstack 0
   526   00000D                     __Bin_input_Output@NUMBER:
   527                           	callstack 0
   528                           
   529                           ; 1 bytes @ 0xC
   530   00000D                     	ds	1
   531   00000E                     ModbasRtu_Register_address@Li:
   532                           	callstack 0
   533   00000E                     __Bin_input_Output@Temp:
   534                           	callstack 0
   535   00000E                     I2C_SetDataCompleteCallback@ptr:
   536                           	callstack 0
   537   00000E                     I2C_SetAddressNackCallback@ptr:
   538                           	callstack 0
   539   00000E                     crc_chk@reg_crc:
   540                           	callstack 0
   541                           
   542                           ; 2 bytes @ 0xD
   543   00000E                     	ds	1
   544   00000F                     __Bin_input_Output@Temp1:
   545                           	callstack 0
   546                           
   547                           ; 1 bytes @ 0xE
   548   00000F                     	ds	1
   549   000010                     rd1RegCompleteHandler@ptr:
   550                           	callstack 0
   551   000010                     rd2RegCompleteHandler@ptr:
   552                           	callstack 0
   553   000010                     wr1RegCompleteHandler@ptr:
   554                           	callstack 0
   555   000010                     wr2RegCompleteHandler@ptr:
   556                           	callstack 0
   557   000010                     rdBlkRegCompleteHandler@ptr:
   558                           	callstack 0
   559   000010                     I2C_CallbackReturnReset@funPtr:
   560                           	callstack 0
   561   000010                     check_sum@RC:
   562                           	callstack 0
   563                           
   564                           ; 2 bytes @ 0xF
   565   000010                     	ds	1
   566   000011                     Data_integrity@Temp22:
   567                           	callstack 0
   568                           
   569                           ; 2 bytes @ 0x10
   570   000011                     	ds	1
   571   000012                     ??_I2C_DO_TX:
   572   000012                     ??_I2C_DO_RX:
   573   000012                     ??_I2C_DO_TX_EMPTY:
   574   000012                     ??_I2C_DO_ADDRESS_NACK:
   575   000012                     check_sum@Adress:
   576                           	callstack 0
   577                           
   578                           ; 1 bytes @ 0x11
   579   000012                     	ds	1
   580   000013                     Data_integrity@Temp33:
   581                           	callstack 0
   582   000013                     Error_modbasRtu@Temp_Error:
   583                           	callstack 0
   584                           
   585                           ; 1 bytes @ 0x12
   586   000013                     	ds	1
   587   000014                     ??_I2C_MasterFsm:
   588   000014                     Changing_Discrete_Output@address:
   589                           	callstack 0
   590   000014                     Reading_Discrete_Output@Massiv:
   591                           	callstack 0
   592   000014                     Read_analog_input@Massiv:
   593                           	callstack 0
   594   000014                     analog_output_recording@address:
   595                           	callstack 0
   596                           
   597                           ; 2 bytes @ 0x13
   598   000014                     	ds	2
   599   000016                     I2C_MasterOperation@read:
   600                           	callstack 0
   601   000016                     Reading_Discrete_Output@Number_:
   602                           	callstack 0
   603   000016                     Read_analog_input@Number_:
   604                           	callstack 0
   605                           
   606                           ; 1 bytes @ 0x15
   607   000016                     	ds	1
   608   000017                     ??_Reading_Discrete_Output:
   609   000017                     I2C_MasterOperation@returnValue:
   610                           	callstack 0
   611   000017                     Read_analog_input@Vt:
   612                           	callstack 0
   613                           
   614                           ; 1 bytes @ 0x16
   615   000017                     	ds	1
   616   000018                     ??_Read_analog_input:
   617   000018                     I2C_WriteNBytes@data:
   618                           	callstack 0
   619   000018                     I2C_ReadNBytes@data:
   620                           	callstack 0
   621                           
   622                           ; 2 bytes @ 0x17
   623   000018                     	ds	1
   624   000019                     Reading_Discrete_Output@Danie:
   625                           	callstack 0
   626                           
   627                           ; 1 bytes @ 0x18
   628   000019                     	ds	1
   629   00001A                     Reading_Discrete_Output@Temp:
   630                           	callstack 0
   631   00001A                     I2C_WriteNBytes@len:
   632                           	callstack 0
   633   00001A                     I2C_ReadNBytes@len:
   634                           	callstack 0
   635   00001A                     Read_analog_input@Danie:
   636                           	callstack 0
   637                           
   638                           ; 2 bytes @ 0x19
   639   00001A                     	ds	1
   640   00001B                     Reading_Discrete_Output@Temp2:
   641                           	callstack 0
   642                           
   643                           ; 1 bytes @ 0x1A
   644   00001B                     	ds	1
   645   00001C                     I2C_WriteNBytes@address:
   646                           	callstack 0
   647   00001C                     I2C_ReadNBytes@address:
   648                           	callstack 0
   649   00001C                     Reading_Discrete_Output@address2:
   650                           	callstack 0
   651   00001C                     Read_analog_input@address:
   652                           	callstack 0
   653                           
   654                           ; 2 bytes @ 0x1B
   655   00001C                     	ds	1
   656   00001D                     Reading_Discrete_Output@Temp3:
   657                           	callstack 0
   658                           
   659                           ; 1 bytes @ 0x1C
   660   00001D                     	ds	1
   661   00001E                     Reading_Discrete_Output@Number_bits:
   662                           	callstack 0
   663   00001E                     Read_analog_input@Number_bits:
   664                           	callstack 0
   665                           
   666                           ; 2 bytes @ 0x1D
   667   00001E                     	ds	2
   668   000020                     Read_analog_input@Adress:
   669                           	callstack 0
   670   000020                     Reading_Discrete_Output@address:
   671                           	callstack 0
   672                           
   673                           ; 2 bytes @ 0x1F
   674   000020                     	ds	2
   675   000022                     ??_modbasRtu_Answer:
   676                           
   677                           ; 1 bytes @ 0x21
   678   000022                     	ds	2
   679   000024                     
   680                           ; 1 bytes @ 0x23
   681 ;;
   682 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   683 ;;
   684 ;; *************** function _main *****************
   685 ;; Defined at:
   686 ;;		line 58 in file "main.c"
   687 ;; Parameters:    Size  Location     Type
   688 ;;		None
   689 ;; Auto vars:     Size  Location     Type
   690 ;;  red             3    6[BANK0 ] unsigned char [3]
   691 ;;  dat             3    3[BANK0 ] unsigned char [3]
   692 ;;  red2            3    0[BANK0 ] unsigned char [3]
   693 ;;  bitt            1   10[BANK0 ] struct .
   694 ;;  address         1    9[BANK0 ] unsigned char 
   695 ;;  toggle          1    0        unsigned char 
   696 ;; Return value:  Size  Location     Type
   697 ;;                  1    wreg      void 
   698 ;; Registers used:
   699 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pcl, pclath, pclatu, tosl, tblptrl, tblptrh, tblptru, prodl, p
      +rodh, cstack
   700 ;; Tracked objects:
   701 ;;		On entry : 0/0
   702 ;;		On exit  : 0/0
   703 ;;		Unchanged: 0/0
   704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   705 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   706 ;;      Locals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   707 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   708 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   709 ;;Total ram usage:       11 bytes
   710 ;; Hardware stack levels required when called: 13
   711 ;; This function calls:
   712 ;;		_EUSART_SetRxInterruptHandler
   713 ;;		_EUSART_SetTxInterruptHandler
   714 ;;		_I2C_ReadNBytes
   715 ;;		_I2C_WriteNBytes
   716 ;;		_SYSTEM_Initialize
   717 ;;		_USART_UDRE_vect
   718 ;;		_modbasRtu_Slave
   719 ;; This function is called by:
   720 ;;		Startup code after reset
   721 ;; This function uses a non-reentrant model
   722 ;;
   723                           
   724                           	psect	text0
   725   0012D6                     __ptext0:
   726                           	callstack 0
   727   0012D6                     _main:
   728                           	callstack 18
   729                           
   730                           ;main.c: 61:     SYSTEM_Initialize();
   731                           
   732                           ;incstack = 0
   733   0012D6  ECBC  F00E         	call	_SYSTEM_Initialize	;wreg free
   734                           
   735                           ;main.c: 63:    EUSART_SetRxInterruptHandler(USART_RXC_vect);
   736   0012DA  0E12               	movlw	low _USART_RXC_vect
   737   0012DC  6E07               	movwf	EUSART_SetRxInterruptHandler@interruptHandler^0,c
   738   0012DE  0E19               	movlw	high _USART_RXC_vect
   739   0012E0  6E08               	movwf	(EUSART_SetRxInterruptHandler@interruptHandler+1)^0,c
   740   0012E2  EC55  F00F         	call	_EUSART_SetRxInterruptHandler	;wreg free
   741                           
   742                           ;main.c: 64:    EUSART_SetTxInterruptHandler(USART_TXC_vect);
   743   0012E6  0E7C               	movlw	low _USART_TXC_vect
   744   0012E8  6E07               	movwf	EUSART_SetTxInterruptHandler@interruptHandler^0,c
   745   0012EA  0E1F               	movlw	high _USART_TXC_vect
   746   0012EC  6E08               	movwf	(EUSART_SetTxInterruptHandler@interruptHandler+1)^0,c
   747   0012EE  EC50  F00F         	call	_EUSART_SetTxInterruptHandler	;wreg free
   748                           
   749                           ;main.c: 70:    (INTCONbits.GIE = 1);
   750   0012F2  8EF2               	bsf	242,7,c	;volatile
   751                           
   752                           ;main.c: 76:    (INTCONbits.PEIE = 1);
   753   0012F4  8CF2               	bsf	242,6,c	;volatile
   754                           
   755                           ;main.c: 84:    uint8_t address = (0XE6)>>1;
   756   0012F6  0E73               	movlw	115
   757   0012F8  0100               	movlb	0	; () banked
   758   0012FA  6FDB               	movwf	main@address& (0+255),b
   759                           
   760                           ; BSR set to: 0
   761                           ;main.c: 85:    uint8_t dat[3]={0X30,0X64,0XC0};
   762   0012FC  C050  F0D5         	movff	main@F3018,main@dat
   763   001300  C051  F0D6         	movff	main@F3018+1,main@dat+1
   764   001304  C052  F0D7         	movff	main@F3018+2,main@dat+2
   765                           
   766                           ; BSR set to: 0
   767                           ;main.c: 86:    uint8_t red[3]={0x1C};
   768   001308  C04D  F0D8         	movff	main@F3020,main@red
   769   00130C  C04E  F0D9         	movff	main@F3020+1,main@red+1
   770   001310  C04F  F0DA         	movff	main@F3020+2,main@red+2
   771   001314                     l4781:
   772                           
   773                           ;main.c: 91:     {;main.c: 94:          if(PORTAbits.RA2 && !bitt.b0 )
   774   001314  A480               	btfss	128,2,c	;volatile
   775   001316  D028               	goto	l963
   776   001318  0100               	movlb	0	; () banked
   777   00131A  B1DC               	btfsc	main@bitt& (0+255),0,b
   778   00131C  D025               	goto	l963
   779                           
   780                           ; BSR set to: 0
   781                           
   782                           ;main.c: 95:          {;main.c: 96:              do { LATAbits.LATA0 = 1; } while(0);
   783   00131E  8089               	bsf	137,0,c	;volatile
   784                           
   785                           ; BSR set to: 0
   786                           ;main.c: 100:               I2C_WriteNBytes(address,dat,3);
   787   001320  0ED5               	movlw	low main@dat
   788   001322  6E18               	movwf	I2C_WriteNBytes@data^0,c
   789   001324  0E00               	movlw	high main@dat
   790   001326  6E19               	movwf	(I2C_WriteNBytes@data+1)^0,c
   791   001328  0E00               	movlw	0
   792   00132A  6E1B               	movwf	(I2C_WriteNBytes@len+1)^0,c
   793   00132C  0E03               	movlw	3
   794   00132E  6E1A               	movwf	I2C_WriteNBytes@len^0,c
   795   001330  51DB               	movf	main@address& (0+255),w,b
   796   001332  EC00  F00D         	call	_I2C_WriteNBytes
   797                           
   798                           ;main.c: 102:               I2C_WriteNBytes((0xD0)>>1,red,1);
   799   001336  0ED8               	movlw	low main@red
   800   001338  6E18               	movwf	I2C_WriteNBytes@data^0,c
   801   00133A  0E00               	movlw	high main@red
   802   00133C  6E19               	movwf	(I2C_WriteNBytes@data+1)^0,c
   803   00133E  0E00               	movlw	0
   804   001340  6E1B               	movwf	(I2C_WriteNBytes@len+1)^0,c
   805   001342  0E01               	movlw	1
   806   001344  6E1A               	movwf	I2C_WriteNBytes@len^0,c
   807   001346  0E68               	movlw	104
   808   001348  EC00  F00D         	call	_I2C_WriteNBytes
   809                           
   810                           ;main.c: 104:               I2C_ReadNBytes((0xD1)>>1, red2 , 3);
   811   00134C  0ED2               	movlw	low main@red2
   812   00134E  6E18               	movwf	I2C_ReadNBytes@data^0,c
   813   001350  0E00               	movlw	high main@red2
   814   001352  6E19               	movwf	(I2C_ReadNBytes@data+1)^0,c
   815   001354  0E00               	movlw	0
   816   001356  6E1B               	movwf	(I2C_ReadNBytes@len+1)^0,c
   817   001358  0E03               	movlw	3
   818   00135A  6E1A               	movwf	I2C_ReadNBytes@len^0,c
   819   00135C  0E68               	movlw	104
   820   00135E  ECA2  F00D         	call	_I2C_ReadNBytes
   821                           
   822                           ;main.c: 106:               bitt.b0=1;
   823   001362  0100               	movlb	0	; () banked
   824   001364  81DC               	bsf	main@bitt& (0+255),0,b
   825                           
   826                           ;main.c: 108:          }
   827   001366  D007               	goto	l966
   828   001368                     l963:
   829   001368  B480               	btfsc	128,2,c	;volatile
   830   00136A  D005               	goto	l966
   831   00136C  0100               	movlb	0	; () banked
   832   00136E  A1DC               	btfss	main@bitt& (0+255),0,b
   833   001370  D002               	goto	l966
   834                           
   835                           ; BSR set to: 0
   836                           
   837                           ;main.c: 110:          {;main.c: 111:              do { LATAbits.LATA0 = 0; } while(0);
   838   001372  9089               	bcf	137,0,c	;volatile
   839                           
   840                           ; BSR set to: 0
   841                           ;main.c: 112:              bitt.b0=0;
   842   001374  91DC               	bcf	main@bitt& (0+255),0,b
   843   001376                     l966:
   844                           
   845                           ;main.c: 114:          if(TXSTAbits.TRMT && USART_UDR_vect)
   846   001376  A2AC               	btfss	172,1,c	;volatile
   847   001378  D004               	goto	l4795
   848   00137A  503A               	movf	_USART_UDR_vect^0,w,c
   849   00137C  A4D8               	btfss	status,2,c
   850                           
   851                           ;main.c: 115:          {;main.c: 116:              USART_UDRE_vect ();
   852   00137E  EC78  F00E         	call	_USART_UDRE_vect	;wreg free
   853   001382                     l4795:
   854                           
   855                           ;main.c: 119:            modbasRtu_Slave();
   856   001382  EC52  F00E         	call	_modbasRtu_Slave	;wreg free
   857   001386  D7C6               	goto	l4781
   858   001388                     __end_of_main:
   859                           	callstack 0
   860                           
   861 ;; *************** function _modbasRtu_Slave *****************
   862 ;; Defined at:
   863 ;;		line 432 in file "Modbas_RTU.c"
   864 ;; Parameters:    Size  Location     Type
   865 ;;		None
   866 ;; Auto vars:     Size  Location     Type
   867 ;;		None
   868 ;; Return value:  Size  Location     Type
   869 ;;                  1    wreg      void 
   870 ;; Registers used:
   871 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   872 ;; Tracked objects:
   873 ;;		On entry : 0/0
   874 ;;		On exit  : 0/0
   875 ;;		Unchanged: 0/0
   876 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   877 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   878 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   879 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   880 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   881 ;;Total ram usage:        0 bytes
   882 ;; Hardware stack levels used: 1
   883 ;; Hardware stack levels required when called: 9
   884 ;; This function calls:
   885 ;;		_Data_integrity
   886 ;;		_Error_modbasRtu
   887 ;;		_modbasRtu_Answer
   888 ;; This function is called by:
   889 ;;		_main
   890 ;; This function uses a non-reentrant model
   891 ;;
   892                           
   893                           	psect	text1
   894   001CA4                     __ptext1:
   895                           	callstack 0
   896   001CA4                     _modbasRtu_Slave:
   897                           	callstack 21
   898                           
   899                           ;Modbas_RTU.c: 434:     if (Bit_action_ModbasRtu.b2)
   900                           
   901                           ;incstack = 0
   902   001CA4  A43C               	btfss	_Bit_action_ModbasRtu^0,2,c
   903   001CA6  0012               	return	
   904                           
   905                           ;Modbas_RTU.c: 435:     {;Modbas_RTU.c: 436:      if ( Data_integrity() == 0 )
   906   001CA8  EC5D  F00C         	call	_Data_integrity	;wreg free
   907   001CAC  0900               	iorlw	0
   908   001CAE  A4D8               	btfss	status,2,c
   909   001CB0  D009               	goto	l4647
   910                           
   911                           ;Modbas_RTU.c: 437:      {;Modbas_RTU.c: 440:       Error_modbasRtu (0x04);
   912   001CB2  0E04               	movlw	4
   913   001CB4  EC04  F00F         	call	_Error_modbasRtu
   914                           
   915                           ;Modbas_RTU.c: 441:       USART_UDR_vect=1;
   916   001CB8  0E01               	movlw	1
   917   001CBA  6E3A               	movwf	_USART_UDR_vect^0,c
   918                           
   919                           ;Modbas_RTU.c: 442:             Temp_ModbasRtu = 0;
   920   001CBC  0E00               	movlw	0
   921   001CBE  6E3D               	movwf	_Temp_ModbasRtu^0,c
   922                           
   923                           ;Modbas_RTU.c: 443:             Bit_action_ModbasRtu.b2 = 0;
   924   001CC0  943C               	bcf	_Bit_action_ModbasRtu^0,2,c
   925                           
   926                           ;Modbas_RTU.c: 445:      }
   927   001CC2  0012               	return	
   928   001CC4                     l4647:
   929                           
   930                           ;Modbas_RTU.c: 447:      {;Modbas_RTU.c: 448:       modbasRtu_Answer( );
   931   001CC4  EC0E  F009         	call	_modbasRtu_Answer	;wreg free
   932   001CC8  0012               	return		;funcret
   933   001CCA                     __end_of_modbasRtu_Slave:
   934                           	callstack 0
   935                           
   936 ;; *************** function _modbasRtu_Answer *****************
   937 ;; Defined at:
   938 ;;		line 355 in file "Modbas_RTU.c"
   939 ;; Parameters:    Size  Location     Type
   940 ;;		None
   941 ;; Auto vars:     Size  Location     Type
   942 ;;		None
   943 ;; Return value:  Size  Location     Type
   944 ;;                  1    wreg      void 
   945 ;; Registers used:
   946 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   947 ;; Tracked objects:
   948 ;;		On entry : 0/0
   949 ;;		On exit  : 0/0
   950 ;;		Unchanged: 0/0
   951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   952 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   953 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   954 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   955 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   956 ;;Total ram usage:        2 bytes
   957 ;; Hardware stack levels used: 1
   958 ;; Hardware stack levels required when called: 8
   959 ;; This function calls:
   960 ;;		_Changing_Discrete_Output
   961 ;;		_Error_modbasRtu
   962 ;;		_Read_analog_input
   963 ;;		_Reading_Discrete_Output
   964 ;;		_analog_output_recording
   965 ;; This function is called by:
   966 ;;		_modbasRtu_Slave
   967 ;; This function uses a non-reentrant model
   968 ;;
   969                           
   970                           	psect	text2
   971   00121C                     __ptext2:
   972                           	callstack 0
   973   00121C                     _modbasRtu_Answer:
   974                           	callstack 21
   975                           
   976                           ;Modbas_RTU.c: 357:    Temp_ModbasRtu = 0;
   977                           
   978                           ;incstack = 0
   979   00121C  0E00               	movlw	0
   980   00121E  6E3D               	movwf	_Temp_ModbasRtu^0,c
   981                           
   982                           ;Modbas_RTU.c: 358:    switch (Danie_Rx_ModbasRtu[1])
   983   001220  D034               	goto	l4581
   984   001222                     l4565:
   985                           
   986                           ; BSR set to: 0
   987                           ;Modbas_RTU.c: 361:            Reading_Discrete_Output(Danie_ModbasRtu_Binary_Output,10)
      +                          ;
   988   001222  0E3F               	movlw	low _Danie_ModbasRtu_Binary_Output
   989   001224  6E14               	movwf	Reading_Discrete_Output@Massiv^0,c
   990   001226  0E00               	movlw	high _Danie_ModbasRtu_Binary_Output
   991   001228  6E15               	movwf	(Reading_Discrete_Output@Massiv+1)^0,c
   992   00122A  0E0A               	movlw	10
   993   00122C  6E16               	movwf	Reading_Discrete_Output@Number_^0,c
   994   00122E  EC11  F008         	call	_Reading_Discrete_Output	;wreg free
   995                           
   996                           ;Modbas_RTU.c: 362:            break;
   997   001232  D04D               	goto	l4583
   998   001234                     l4567:
   999                           
  1000                           ; BSR set to: 0
  1001                           ;Modbas_RTU.c: 364:            Reading_Discrete_Output(Danie_ModbasRtu_Binary_input,10);
  1002   001234  0E41               	movlw	low _Danie_ModbasRtu_Binary_input
  1003   001236  6E14               	movwf	Reading_Discrete_Output@Massiv^0,c
  1004   001238  0E00               	movlw	high _Danie_ModbasRtu_Binary_input
  1005   00123A  6E15               	movwf	(Reading_Discrete_Output@Massiv+1)^0,c
  1006   00123C  0E0A               	movlw	10
  1007   00123E  6E16               	movwf	Reading_Discrete_Output@Number_^0,c
  1008   001240  EC11  F008         	call	_Reading_Discrete_Output	;wreg free
  1009                           
  1010                           ;Modbas_RTU.c: 365:            break;
  1011   001244  D044               	goto	l4583
  1012   001246                     l4569:
  1013                           
  1014                           ; BSR set to: 0
  1015                           ;Modbas_RTU.c: 367:            Read_analog_input( Danie_ModbasRtu_analog_Output,10,0);
  1016   001246  0EAA               	movlw	low _Danie_ModbasRtu_analog_Output
  1017   001248  6E14               	movwf	Read_analog_input@Massiv^0,c
  1018   00124A  0E00               	movlw	high _Danie_ModbasRtu_analog_Output
  1019   00124C  6E15               	movwf	(Read_analog_input@Massiv+1)^0,c
  1020   00124E  0E0A               	movlw	10
  1021   001250  6E16               	movwf	Read_analog_input@Number_^0,c
  1022   001252  0E00               	movlw	0
  1023   001254  6E17               	movwf	Read_analog_input@Vt^0,c
  1024   001256  ECA1  F008         	call	_Read_analog_input	;wreg free
  1025                           
  1026                           ;Modbas_RTU.c: 368:     break;
  1027   00125A  D039               	goto	l4583
  1028   00125C                     l4571:
  1029                           
  1030                           ; BSR set to: 0
  1031                           ;Modbas_RTU.c: 370:            Read_analog_input(Danie_ModbasRtu_analog_input,10,1);
  1032   00125C  0EBE               	movlw	low _Danie_ModbasRtu_analog_input
  1033   00125E  6E14               	movwf	Read_analog_input@Massiv^0,c
  1034   001260  0E00               	movlw	high _Danie_ModbasRtu_analog_input
  1035   001262  6E15               	movwf	(Read_analog_input@Massiv+1)^0,c
  1036   001264  0E0A               	movlw	10
  1037   001266  6E16               	movwf	Read_analog_input@Number_^0,c
  1038   001268  0E01               	movlw	1
  1039   00126A  6E17               	movwf	Read_analog_input@Vt^0,c
  1040   00126C  ECA1  F008         	call	_Read_analog_input	;wreg free
  1041                           
  1042                           ;Modbas_RTU.c: 371:            break;
  1043   001270  D02E               	goto	l4583
  1044   001272                     l4573:
  1045                           
  1046                           ; BSR set to: 0
  1047                           ;Modbas_RTU.c: 373:            Changing_Discrete_Output();
  1048   001272  EC03  F00C         	call	_Changing_Discrete_Output	;wreg free
  1049                           
  1050                           ;Modbas_RTU.c: 374:            break;
  1051   001276  D02B               	goto	l4583
  1052   001278                     l4575:
  1053                           
  1054                           ; BSR set to: 0
  1055                           ;Modbas_RTU.c: 376:            analog_output_recording();
  1056   001278  ECDC  F00C         	call	_analog_output_recording	;wreg free
  1057                           
  1058                           ;Modbas_RTU.c: 377:            break;
  1059   00127C  D028               	goto	l4583
  1060   00127E                     l874:
  1061                           
  1062                           ; BSR set to: 0
  1063   00127E  F000               	nop		;# 
  1064   001280                     l875:
  1065   001280  F000               	nop		;# 
  1066   001282                     l4577:
  1067                           
  1068                           ;Modbas_RTU.c: 386:           Error_modbasRtu (0x01);
  1069   001282  0E01               	movlw	1
  1070   001284  EC04  F00F         	call	_Error_modbasRtu
  1071                           
  1072                           ;Modbas_RTU.c: 387:     break;
  1073   001288  D022               	goto	l4583
  1074   00128A                     l4581:
  1075   00128A  0100               	movlb	0	; () banked
  1076   00128C  518D               	movf	(_Danie_Rx_ModbasRtu+1)& (0+255),w,b
  1077   00128E  6E22               	movwf	??_modbasRtu_Answer^0,c
  1078   001290  6A23               	clrf	(??_modbasRtu_Answer+1)^0,c
  1079                           
  1080                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1081                           ; Switch size 1, requested type "simple"
  1082                           ; Number of cases is 1, Range of values is 0 to 0
  1083                           ; switch strategies available:
  1084                           ; Name         Instructions Cycles
  1085                           ; simple_byte            4     3 (average)
  1086                           ;	Chosen strategy is simple_byte
  1087   001292  5023               	movf	(??_modbasRtu_Answer+1)^0,w,c
  1088   001294  0A00               	xorlw	0	; case 0
  1089   001296  A4D8               	btfss	status,2,c
  1090   001298  D7F4               	goto	l4577
  1091                           
  1092                           ; BSR set to: 0
  1093                           ; Switch size 1, requested type "simple"
  1094                           ; Number of cases is 8, Range of values is 1 to 16
  1095                           ; switch strategies available:
  1096                           ; Name         Instructions Cycles
  1097                           ; simple_byte           25    13 (average)
  1098                           ;	Chosen strategy is simple_byte
  1099   00129A  5022               	movf	??_modbasRtu_Answer^0,w,c
  1100   00129C  0A01               	xorlw	1	; case 1
  1101   00129E  B4D8               	btfsc	status,2,c
  1102   0012A0  D7C0               	goto	l4565
  1103   0012A2  0A03               	xorlw	3	; case 2
  1104   0012A4  B4D8               	btfsc	status,2,c
  1105   0012A6  D7C6               	goto	l4567
  1106   0012A8  0A01               	xorlw	1	; case 3
  1107   0012AA  B4D8               	btfsc	status,2,c
  1108   0012AC  D7CC               	goto	l4569
  1109   0012AE  0A07               	xorlw	7	; case 4
  1110   0012B0  B4D8               	btfsc	status,2,c
  1111   0012B2  D7D4               	goto	l4571
  1112   0012B4  0A01               	xorlw	1	; case 5
  1113   0012B6  B4D8               	btfsc	status,2,c
  1114   0012B8  D7DC               	goto	l4573
  1115   0012BA  0A03               	xorlw	3	; case 6
  1116   0012BC  B4D8               	btfsc	status,2,c
  1117   0012BE  D7DC               	goto	l4575
  1118   0012C0  0A09               	xorlw	9	; case 15
  1119   0012C2  B4D8               	btfsc	status,2,c
  1120   0012C4  D7DC               	goto	l874
  1121   0012C6  0A1F               	xorlw	31	; case 16
  1122   0012C8  B4D8               	btfsc	status,2,c
  1123   0012CA  D7DA               	goto	l875
  1124   0012CC  D7DA               	goto	l4577
  1125   0012CE                     l4583:
  1126                           
  1127                           ;Modbas_RTU.c: 390:      USART_UDR_vect=1;
  1128   0012CE  0E01               	movlw	1
  1129   0012D0  6E3A               	movwf	_USART_UDR_vect^0,c
  1130                           
  1131                           ;Modbas_RTU.c: 392:   Bit_action_ModbasRtu.b2 = 0;
  1132   0012D2  943C               	bcf	_Bit_action_ModbasRtu^0,2,c
  1133   0012D4  0012               	return		;funcret
  1134   0012D6                     __end_of_modbasRtu_Answer:
  1135                           	callstack 0
  1136                           
  1137 ;; *************** function _analog_output_recording *****************
  1138 ;; Defined at:
  1139 ;;		line 314 in file "Modbas_RTU.c"
  1140 ;; Parameters:    Size  Location     Type
  1141 ;;		None
  1142 ;; Auto vars:     Size  Location     Type
  1143 ;;  address         2   19[COMRAM] int 
  1144 ;; Return value:  Size  Location     Type
  1145 ;;                  1    wreg      void 
  1146 ;; Registers used:
  1147 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1148 ;; Tracked objects:
  1149 ;;		On entry : 0/0
  1150 ;;		On exit  : 0/0
  1151 ;;		Unchanged: 0/0
  1152 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1153 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1154 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1155 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1156 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1157 ;;Total ram usage:        2 bytes
  1158 ;; Hardware stack levels used: 1
  1159 ;; Hardware stack levels required when called: 7
  1160 ;; This function calls:
  1161 ;;		_Error_modbasRtu
  1162 ;;		_ModbasRtu_Register_address
  1163 ;; This function is called by:
  1164 ;;		_modbasRtu_Answer
  1165 ;; This function uses a non-reentrant model
  1166 ;;
  1167                           
  1168                           	psect	text3
  1169   0019B8                     __ptext3:
  1170                           	callstack 0
  1171   0019B8                     _analog_output_recording:
  1172                           	callstack 21
  1173                           
  1174                           ;Modbas_RTU.c: 316:  register int address;;Modbas_RTU.c: 317:  address = ModbasRtu_Regis
      +                          ter_address(3);
  1175                           
  1176                           ;incstack = 0
  1177   0019B8  0E03               	movlw	3
  1178   0019BA  EC85  F00D         	call	_ModbasRtu_Register_address
  1179   0019BE  C007  F014         	movff	?_ModbasRtu_Register_address,analog_output_recording@address
  1180   0019C2  C008  F015         	movff	?_ModbasRtu_Register_address+1,analog_output_recording@address+1
  1181                           
  1182                           ;Modbas_RTU.c: 318:  if ( address > 10 )
  1183   0019C6  BE15               	btfsc	(analog_output_recording@address+1)^0,7,c
  1184   0019C8  D00A               	goto	l4419
  1185   0019CA  5015               	movf	(analog_output_recording@address+1)^0,w,c
  1186   0019CC  E104               	bnz	u2410
  1187   0019CE  0E0B               	movlw	11
  1188   0019D0  5C14               	subwf	analog_output_recording@address^0,w,c
  1189   0019D2  A0D8               	btfss	status,0,c
  1190   0019D4  D004               	goto	l4419
  1191   0019D6                     u2410:
  1192                           
  1193                           ;Modbas_RTU.c: 319:   {;Modbas_RTU.c: 320:   Error_modbasRtu (0x02);
  1194   0019D6  0E02               	movlw	2
  1195   0019D8  EC04  F00F         	call	_Error_modbasRtu
  1196                           
  1197                           ;Modbas_RTU.c: 321:   }
  1198   0019DC  0012               	return	
  1199   0019DE                     l4419:
  1200                           
  1201                           ;Modbas_RTU.c: 323:   {;Modbas_RTU.c: 324:     Danie_ModbasRtu_analog_Output [address] =
      +                           ModbasRtu_Register_address(5);
  1202   0019DE  0E05               	movlw	5
  1203   0019E0  EC85  F00D         	call	_ModbasRtu_Register_address
  1204   0019E4  90D8               	bcf	status,0,c
  1205   0019E6  3414               	rlcf	analog_output_recording@address^0,w,c
  1206   0019E8  6ED9               	movwf	fsr2l,c
  1207   0019EA  3415               	rlcf	(analog_output_recording@address+1)^0,w,c
  1208   0019EC  6EDA               	movwf	fsr2h,c
  1209   0019EE  0EAA               	movlw	low _Danie_ModbasRtu_analog_Output
  1210   0019F0  26D9               	addwf	fsr2l,f,c
  1211   0019F2  0E00               	movlw	high _Danie_ModbasRtu_analog_Output
  1212   0019F4  22DA               	addwfc	fsr2h,f,c
  1213   0019F6  C007  FFDE         	movff	?_ModbasRtu_Register_address,postinc2
  1214   0019FA  C008  FFDD         	movff	?_ModbasRtu_Register_address+1,postdec2
  1215   0019FE  0012               	return		;funcret
  1216   001A00                     __end_of_analog_output_recording:
  1217                           	callstack 0
  1218                           
  1219 ;; *************** function _Reading_Discrete_Output *****************
  1220 ;; Defined at:
  1221 ;;		line 215 in file "Modbas_RTU.c"
  1222 ;; Parameters:    Size  Location     Type
  1223 ;;  Massiv          2   19[COMRAM] PTR unsigned char 
  1224 ;;		 -> Danie_ModbasRtu_Binary_input(2), Danie_ModbasRtu_Binary_Output(2), 
  1225 ;;  Number_         1   21[COMRAM] unsigned char 
  1226 ;; Auto vars:     Size  Location     Type
  1227 ;;  address         2   31[COMRAM] volatile unsigned int 
  1228 ;;  Number_bits     2   29[COMRAM] volatile unsigned int 
  1229 ;;  Temp3           1   28[COMRAM] unsigned char 
  1230 ;;  address2        1   27[COMRAM] unsigned char 
  1231 ;;  Temp2           1   26[COMRAM] unsigned char 
  1232 ;;  Temp            1   25[COMRAM] unsigned char 
  1233 ;;  Danie           1   24[COMRAM] unsigned char 
  1234 ;; Return value:  Size  Location     Type
  1235 ;;                  1    wreg      void 
  1236 ;; Registers used:
  1237 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1238 ;; Tracked objects:
  1239 ;;		On entry : 0/0
  1240 ;;		On exit  : 0/0
  1241 ;;		Unchanged: 0/0
  1242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1243 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1244 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1245 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1246 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1247 ;;Total ram usage:       14 bytes
  1248 ;; Hardware stack levels used: 1
  1249 ;; Hardware stack levels required when called: 7
  1250 ;; This function calls:
  1251 ;;		_Error_modbasRtu
  1252 ;;		_ModbasRtu_Register_address
  1253 ;;		_check_sum
  1254 ;; This function is called by:
  1255 ;;		_modbasRtu_Answer
  1256 ;; This function uses a non-reentrant model
  1257 ;;
  1258                           
  1259                           	psect	text4
  1260   001022                     __ptext4:
  1261                           	callstack 0
  1262   001022                     _Reading_Discrete_Output:
  1263                           	callstack 21
  1264                           
  1265                           ;Modbas_RTU.c: 215:  void Reading_Discrete_Output(unsigned char* Massiv, register unsign
      +                          ed char Number_);Modbas_RTU.c: 216:   {;Modbas_RTU.c: 217:  volatile unsigned int addres
      +                          s,Number_bits;;Modbas_RTU.c: 218:  register unsigned char Temp = 0,Danie,Temp2 = 0,addre
      +                          ss2 = 0,Temp3 = 2;
  1266                           
  1267                           ;incstack = 0
  1268   001022  0E00               	movlw	0
  1269   001024  6E1A               	movwf	Reading_Discrete_Output@Temp^0,c
  1270   001026  0E00               	movlw	0
  1271   001028  6E1B               	movwf	Reading_Discrete_Output@Temp2^0,c
  1272   00102A  0E00               	movlw	0
  1273   00102C  6E1C               	movwf	Reading_Discrete_Output@address2^0,c
  1274   00102E  0E02               	movlw	2
  1275   001030  6E1D               	movwf	Reading_Discrete_Output@Temp3^0,c
  1276                           
  1277                           ;Modbas_RTU.c: 219:  address = ModbasRtu_Register_address(3);
  1278   001032  0E03               	movlw	3
  1279   001034  EC85  F00D         	call	_ModbasRtu_Register_address
  1280   001038  C007  F020         	movff	?_ModbasRtu_Register_address,Reading_Discrete_Output@address	;volatile
  1281   00103C  C008  F021         	movff	?_ModbasRtu_Register_address+1,Reading_Discrete_Output@address+1	;volatile
  1282                           
  1283                           ;Modbas_RTU.c: 220:  if ( address > Number_ )
  1284   001040  5016               	movf	Reading_Discrete_Output@Number_^0,w,c
  1285   001042  6E17               	movwf	??_Reading_Discrete_Output^0,c
  1286   001044  6A18               	clrf	(??_Reading_Discrete_Output+1)^0,c
  1287   001046  5020               	movf	Reading_Discrete_Output@address^0,w,c	;volatile
  1288   001048  5C17               	subwf	??_Reading_Discrete_Output^0,w,c
  1289   00104A  5021               	movf	(Reading_Discrete_Output@address+1)^0,w,c	;volatile
  1290   00104C  5818               	subwfb	(??_Reading_Discrete_Output+1)^0,w,c
  1291   00104E  B0D8               	btfsc	status,0,c
  1292   001050  D004               	goto	l4325
  1293                           
  1294                           ;Modbas_RTU.c: 221:         {;Modbas_RTU.c: 222:            Error_modbasRtu (0x02);
  1295   001052  0E02               	movlw	2
  1296   001054  EC04  F00F         	call	_Error_modbasRtu
  1297                           
  1298                           ;Modbas_RTU.c: 223:         }
  1299   001058  0012               	return	
  1300   00105A                     l4325:
  1301                           
  1302                           ;Modbas_RTU.c: 225:   {;Modbas_RTU.c: 226:   Number_bits = ModbasRtu_Register_address(5)
      +                          ;
  1303   00105A  0E05               	movlw	5
  1304   00105C  EC85  F00D         	call	_ModbasRtu_Register_address
  1305   001060  C007  F01E         	movff	?_ModbasRtu_Register_address,Reading_Discrete_Output@Number_bits	;volatile
  1306   001064  C008  F01F         	movff	?_ModbasRtu_Register_address+1,Reading_Discrete_Output@Number_bits+1	;volatile
  1307                           
  1308                           ;Modbas_RTU.c: 227:   while (address >= 8)
  1309   001068  D007               	goto	l4331
  1310   00106A                     l4327:
  1311                           
  1312                           ;Modbas_RTU.c: 228:             {;Modbas_RTU.c: 229:               address = address - 8
      +                          ;
  1313   00106A  0EF8               	movlw	248
  1314   00106C  2420               	addwf	Reading_Discrete_Output@address^0,w,c	;volatile
  1315   00106E  6E20               	movwf	Reading_Discrete_Output@address^0,c	;volatile
  1316   001070  0EFF               	movlw	255
  1317   001072  2021               	addwfc	(Reading_Discrete_Output@address+1)^0,w,c	;volatile
  1318   001074  6E21               	movwf	(Reading_Discrete_Output@address+1)^0,c	;volatile
  1319                           
  1320                           ;Modbas_RTU.c: 230:               Temp ++;
  1321   001076  2A1A               	incf	Reading_Discrete_Output@Temp^0,f,c
  1322   001078                     l4331:
  1323                           
  1324                           ;Modbas_RTU.c: 227:   while (address >= 8)
  1325   001078  5021               	movf	(Reading_Discrete_Output@address+1)^0,w,c	;volatile
  1326   00107A  E1F7               	bnz	l4327
  1327   00107C  0E08               	movlw	8
  1328   00107E  5C20               	subwf	Reading_Discrete_Output@address^0,w,c	;volatile
  1329   001080  B0D8               	btfsc	status,0,c
  1330   001082  D7F3               	goto	l4327
  1331   001084                     u2300:
  1332                           
  1333                           ;Modbas_RTU.c: 232:   Danie = Massiv [ Temp ];
  1334   001084  501A               	movf	Reading_Discrete_Output@Temp^0,w,c
  1335   001086  2414               	addwf	Reading_Discrete_Output@Massiv^0,w,c
  1336   001088  6ED9               	movwf	fsr2l,c
  1337   00108A  0E00               	movlw	0
  1338   00108C  2015               	addwfc	(Reading_Discrete_Output@Massiv+1)^0,w,c
  1339   00108E  6EDA               	movwf	fsr2h,c
  1340   001090  50DF               	movf	indf2,w,c
  1341   001092  6E19               	movwf	Reading_Discrete_Output@Danie^0,c
  1342                           
  1343                           ;Modbas_RTU.c: 236:   while ( Number_bits > 0)
  1344   001094  D03D               	goto	l4361
  1345   001096                     l4335:
  1346                           
  1347                           ;Modbas_RTU.c: 237:     {;Modbas_RTU.c: 238:                 Number_bits --;
  1348   001096  061E               	decf	Reading_Discrete_Output@Number_bits^0,f,c	;volatile
  1349   001098  A0D8               	btfss	status,0,c
  1350   00109A  061F               	decf	(Reading_Discrete_Output@Number_bits+1)^0,f,c	;volatile
  1351                           
  1352                           ;Modbas_RTU.c: 239:                 if ( Danie & (1 << address) )
  1353   00109C  C020  F017         	movff	Reading_Discrete_Output@address,??_Reading_Discrete_Output	;volatile
  1354   0010A0  0E01               	movlw	1
  1355   0010A2  6E18               	movwf	(??_Reading_Discrete_Output+1)^0,c
  1356   0010A4  2A17               	incf	??_Reading_Discrete_Output^0,f,c
  1357   0010A6  D002               	goto	u2314
  1358   0010A8                     u2315:
  1359   0010A8  90D8               	bcf	status,0,c
  1360   0010AA  3618               	rlcf	(??_Reading_Discrete_Output+1)^0,f,c
  1361   0010AC                     u2314:
  1362   0010AC  2E17               	decfsz	??_Reading_Discrete_Output^0,f,c
  1363   0010AE  D7FC               	goto	u2315
  1364   0010B0  5018               	movf	(??_Reading_Discrete_Output+1)^0,w,c
  1365   0010B2  1419               	andwf	Reading_Discrete_Output@Danie^0,w,c
  1366   0010B4  0900               	iorlw	0
  1367   0010B6  B4D8               	btfsc	status,2,c
  1368   0010B8  D00C               	goto	l4341
  1369                           
  1370                           ;Modbas_RTU.c: 240:                     {;Modbas_RTU.c: 241:                       Temp2
      +                           |=(1<<address2);
  1371   0010BA  C01C  F017         	movff	Reading_Discrete_Output@address2,??_Reading_Discrete_Output
  1372   0010BE  0E01               	movlw	1
  1373   0010C0  6E18               	movwf	(??_Reading_Discrete_Output+1)^0,c
  1374   0010C2  2A17               	incf	??_Reading_Discrete_Output^0,f,c
  1375   0010C4  D002               	goto	u2334
  1376   0010C6                     u2335:
  1377   0010C6  90D8               	bcf	status,0,c
  1378   0010C8  3618               	rlcf	(??_Reading_Discrete_Output+1)^0,f,c
  1379   0010CA                     u2334:
  1380   0010CA  2E17               	decfsz	??_Reading_Discrete_Output^0,f,c
  1381   0010CC  D7FC               	goto	u2335
  1382   0010CE  5018               	movf	(??_Reading_Discrete_Output+1)^0,w,c
  1383   0010D0  121B               	iorwf	Reading_Discrete_Output@Temp2^0,f,c
  1384   0010D2                     l4341:
  1385                           
  1386                           ;Modbas_RTU.c: 243:                 address2 ++;
  1387   0010D2  2A1C               	incf	Reading_Discrete_Output@address2^0,f,c
  1388                           
  1389                           ;Modbas_RTU.c: 244:                 address ++;
  1390   0010D4  4A20               	infsnz	Reading_Discrete_Output@address^0,f,c	;volatile
  1391   0010D6  2A21               	incf	(Reading_Discrete_Output@address+1)^0,f,c	;volatile
  1392                           
  1393                           ;Modbas_RTU.c: 245:                 if (address2 == 8 )
  1394   0010D8  0E08               	movlw	8
  1395   0010DA  181C               	xorwf	Reading_Discrete_Output@address2^0,w,c
  1396   0010DC  A4D8               	btfss	status,2,c
  1397   0010DE  D00D               	goto	l4353
  1398                           
  1399                           ;Modbas_RTU.c: 246:                     {;Modbas_RTU.c: 247:                       addre
      +                          ss2 = 0;
  1400   0010E0  0E00               	movlw	0
  1401   0010E2  6E1C               	movwf	Reading_Discrete_Output@address2^0,c
  1402                           
  1403                           ;Modbas_RTU.c: 248:                       Temp3 ++;
  1404   0010E4  2A1D               	incf	Reading_Discrete_Output@Temp3^0,f,c
  1405                           
  1406                           ;Modbas_RTU.c: 249:                       Danie_Rx_ModbasRtu[Temp3] = Temp2;
  1407   0010E6  0E8C               	movlw	low _Danie_Rx_ModbasRtu
  1408   0010E8  241D               	addwf	Reading_Discrete_Output@Temp3^0,w,c
  1409   0010EA  6ED9               	movwf	fsr2l,c
  1410   0010EC  6ADA               	clrf	fsr2h,c
  1411   0010EE  0E00               	movlw	high _Danie_Rx_ModbasRtu
  1412   0010F0  22DA               	addwfc	fsr2h,f,c
  1413   0010F2  C01B  FFDF         	movff	Reading_Discrete_Output@Temp2,indf2
  1414                           
  1415                           ;Modbas_RTU.c: 250:                       Temp2 = 0;
  1416   0010F6  0E00               	movlw	0
  1417   0010F8  6E1B               	movwf	Reading_Discrete_Output@Temp2^0,c
  1418   0010FA                     l4353:
  1419                           
  1420                           ;Modbas_RTU.c: 252:                 if ( address == 8)
  1421   0010FA  0E08               	movlw	8
  1422   0010FC  1820               	xorwf	Reading_Discrete_Output@address^0,w,c	;volatile
  1423   0010FE  1021               	iorwf	(Reading_Discrete_Output@address+1)^0,w,c	;volatile
  1424   001100  A4D8               	btfss	status,2,c
  1425   001102  D006               	goto	l4361
  1426                           
  1427                           ;Modbas_RTU.c: 253:                     {;Modbas_RTU.c: 254:                        addr
      +                          ess = 0;
  1428   001104  0E00               	movlw	0
  1429   001106  6E21               	movwf	(Reading_Discrete_Output@address+1)^0,c	;volatile
  1430   001108  0E00               	movlw	0
  1431   00110A  6E20               	movwf	Reading_Discrete_Output@address^0,c	;volatile
  1432                           
  1433                           ;Modbas_RTU.c: 255:                        Temp++;
  1434   00110C  2A1A               	incf	Reading_Discrete_Output@Temp^0,f,c
  1435   00110E  D7BA               	goto	u2300
  1436   001110                     l4361:
  1437                           
  1438                           ;Modbas_RTU.c: 236:   while ( Number_bits > 0)
  1439   001110  501E               	movf	Reading_Discrete_Output@Number_bits^0,w,c	;volatile
  1440   001112  101F               	iorwf	(Reading_Discrete_Output@Number_bits+1)^0,w,c	;volatile
  1441   001114  A4D8               	btfss	status,2,c
  1442   001116  D7BF               	goto	l4335
  1443                           
  1444                           ;Modbas_RTU.c: 259:   if ( address2 > 0 )
  1445   001118  501C               	movf	Reading_Discrete_Output@address2^0,w,c
  1446   00111A  B4D8               	btfsc	status,2,c
  1447   00111C  D009               	goto	l4369
  1448                           
  1449                           ;Modbas_RTU.c: 260:    {;Modbas_RTU.c: 261:      Temp3 ++;
  1450   00111E  2A1D               	incf	Reading_Discrete_Output@Temp3^0,f,c
  1451                           
  1452                           ;Modbas_RTU.c: 262:      Danie_Rx_ModbasRtu[Temp3] = Temp2;
  1453   001120  0E8C               	movlw	low _Danie_Rx_ModbasRtu
  1454   001122  241D               	addwf	Reading_Discrete_Output@Temp3^0,w,c
  1455   001124  6ED9               	movwf	fsr2l,c
  1456   001126  6ADA               	clrf	fsr2h,c
  1457   001128  0E00               	movlw	high _Danie_Rx_ModbasRtu
  1458   00112A  22DA               	addwfc	fsr2h,f,c
  1459   00112C  C01B  FFDF         	movff	Reading_Discrete_Output@Temp2,indf2
  1460   001130                     l4369:
  1461                           
  1462                           ;Modbas_RTU.c: 266:   Danie_Rx_ModbasRtu[2] = Temp3 - 2;
  1463   001130  501D               	movf	Reading_Discrete_Output@Temp3^0,w,c
  1464   001132  0FFE               	addlw	254
  1465   001134  0100               	movlb	0	; () banked
  1466   001136  6F8E               	movwf	(_Danie_Rx_ModbasRtu+2)& (0+255),b
  1467                           
  1468                           ; BSR set to: 0
  1469                           ;Modbas_RTU.c: 267:   Temp3 ++;
  1470   001138  2A1D               	incf	Reading_Discrete_Output@Temp3^0,f,c
  1471                           
  1472                           ; BSR set to: 0
  1473                           ;Modbas_RTU.c: 268:   check_sum ( Temp3);
  1474   00113A  501D               	movf	Reading_Discrete_Output@Temp3^0,w,c
  1475   00113C  EC44  F00D         	call	_check_sum
  1476   001140  0012               	return		;funcret
  1477   001142                     __end_of_Reading_Discrete_Output:
  1478                           	callstack 0
  1479                           
  1480 ;; *************** function _Read_analog_input *****************
  1481 ;; Defined at:
  1482 ;;		line 276 in file "Modbas_RTU.c"
  1483 ;; Parameters:    Size  Location     Type
  1484 ;;  Massiv          2   19[COMRAM] PTR unsigned char 
  1485 ;;		 -> Danie_ModbasRtu_analog_Output(20), Danie_ModbasRtu_analog_input(20), Read_analog_input@Danie(2), 
  1486 ;;  Number_         1   21[COMRAM] unsigned char 
  1487 ;;  Vt              1   22[COMRAM] unsigned char 
  1488 ;; Auto vars:     Size  Location     Type
  1489 ;;  Number_bits     2   29[COMRAM] volatile unsigned int 
  1490 ;;  address         2   27[COMRAM] volatile unsigned int 
  1491 ;;  Danie           2   25[COMRAM] volatile unsigned int 
  1492 ;;  Adress          1   31[COMRAM] volatile unsigned char 
  1493 ;; Return value:  Size  Location     Type
  1494 ;;                  1    wreg      void 
  1495 ;; Registers used:
  1496 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1497 ;; Tracked objects:
  1498 ;;		On entry : 0/0
  1499 ;;		On exit  : 0/0
  1500 ;;		Unchanged: 0/0
  1501 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1502 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1503 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1504 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1505 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1506 ;;Total ram usage:       13 bytes
  1507 ;; Hardware stack levels used: 1
  1508 ;; Hardware stack levels required when called: 7
  1509 ;; This function calls:
  1510 ;;		_Error_modbasRtu
  1511 ;;		_ModbasRtu_Register_address
  1512 ;;		_check_sum
  1513 ;; This function is called by:
  1514 ;;		_modbasRtu_Answer
  1515 ;; This function uses a non-reentrant model
  1516 ;;
  1517                           
  1518                           	psect	text5
  1519   001142                     __ptext5:
  1520                           	callstack 0
  1521   001142                     _Read_analog_input:
  1522                           	callstack 21
  1523                           
  1524                           ;Modbas_RTU.c: 276:  void Read_analog_input(unsigned char* Massiv, register unsigned cha
      +                          r Number_, unsigned char Vt);Modbas_RTU.c: 277:  {;Modbas_RTU.c: 278:  volatile unsigned
      +                           int address,Number_bits,Danie;;Modbas_RTU.c: 279:  volatile unsigned char Adress = 4;
  1525                           
  1526                           ;incstack = 0
  1527   001142  0E04               	movlw	4
  1528   001144  6E20               	movwf	Read_analog_input@Adress^0,c	;volatile
  1529                           
  1530                           ;Modbas_RTU.c: 280:  address = ModbasRtu_Register_address(3);
  1531   001146  0E03               	movlw	3
  1532   001148  EC85  F00D         	call	_ModbasRtu_Register_address
  1533   00114C  C007  F01C         	movff	?_ModbasRtu_Register_address,Read_analog_input@address	;volatile
  1534   001150  C008  F01D         	movff	?_ModbasRtu_Register_address+1,Read_analog_input@address+1	;volatile
  1535                           
  1536                           ;Modbas_RTU.c: 281:  if ( address > Number_ )
  1537   001154  5016               	movf	Read_analog_input@Number_^0,w,c
  1538   001156  6E18               	movwf	??_Read_analog_input^0,c
  1539   001158  6A19               	clrf	(??_Read_analog_input+1)^0,c
  1540   00115A  501C               	movf	Read_analog_input@address^0,w,c	;volatile
  1541   00115C  5C18               	subwf	??_Read_analog_input^0,w,c
  1542   00115E  501D               	movf	(Read_analog_input@address+1)^0,w,c	;volatile
  1543   001160  5819               	subwfb	(??_Read_analog_input+1)^0,w,c
  1544   001162  B0D8               	btfsc	status,0,c
  1545   001164  D004               	goto	l4383
  1546                           
  1547                           ;Modbas_RTU.c: 282:   {;Modbas_RTU.c: 283:   Error_modbasRtu (0x02);
  1548   001166  0E02               	movlw	2
  1549   001168  EC04  F00F         	call	_Error_modbasRtu
  1550                           
  1551                           ;Modbas_RTU.c: 284:   }
  1552   00116C  0012               	return	
  1553   00116E                     l4383:
  1554                           
  1555                           ;Modbas_RTU.c: 286:   {;Modbas_RTU.c: 287:   Number_bits = ModbasRtu_Register_address(5)
      +                          ;
  1556   00116E  0E05               	movlw	5
  1557   001170  EC85  F00D         	call	_ModbasRtu_Register_address
  1558   001174  C007  F01E         	movff	?_ModbasRtu_Register_address,Read_analog_input@Number_bits	;volatile
  1559   001178  C008  F01F         	movff	?_ModbasRtu_Register_address+1,Read_analog_input@Number_bits+1	;volatile
  1560                           
  1561                           ;Modbas_RTU.c: 288:   Danie_Rx_ModbasRtu[2] = (char)Number_bits * 2;
  1562   00117C  501E               	movf	Read_analog_input@Number_bits^0,w,c	;volatile
  1563   00117E  0D02               	mullw	2
  1564   001180  CFF3 F08E          	movff	prodl,_Danie_Rx_ModbasRtu+2
  1565                           
  1566                           ;Modbas_RTU.c: 289:   Adress = 3;
  1567   001184  0E03               	movlw	3
  1568   001186  6E20               	movwf	Read_analog_input@Adress^0,c	;volatile
  1569                           
  1570                           ;Modbas_RTU.c: 290:   while (Number_bits > 0 )
  1571   001188  D041               	goto	l4409
  1572   00118A                     l4389:
  1573                           
  1574                           ;Modbas_RTU.c: 291:    {;Modbas_RTU.c: 292:    if ( Vt == 1 )
  1575   00118A  0417               	decf	Read_analog_input@Vt^0,w,c
  1576   00118C  A4D8               	btfss	status,2,c
  1577   00118E  D009               	goto	l4393
  1578                           
  1579                           ;Modbas_RTU.c: 293:    {;Modbas_RTU.c: 294:      Danie = Danie_ModbasRtu_analog_input[ a
      +                          ddress ];
  1580   001190  90D8               	bcf	status,0,c
  1581   001192  341C               	rlcf	Read_analog_input@address^0,w,c	;volatile
  1582   001194  6ED9               	movwf	fsr2l,c
  1583   001196  341D               	rlcf	(Read_analog_input@address+1)^0,w,c	;volatile
  1584   001198  6EDA               	movwf	fsr2h,c
  1585   00119A  0EBE               	movlw	low _Danie_ModbasRtu_analog_input
  1586   00119C  26D9               	addwf	fsr2l,f,c
  1587   00119E  0E00               	movlw	high _Danie_ModbasRtu_analog_input
  1588   0011A0  D008               	goto	L1
  1589   0011A2                     l4393:
  1590                           
  1591                           ;Modbas_RTU.c: 297:       {;Modbas_RTU.c: 298:      Danie = Danie_ModbasRtu_analog_Outpu
      +                          t[ address ];
  1592   0011A2  90D8               	bcf	status,0,c
  1593   0011A4  341C               	rlcf	Read_analog_input@address^0,w,c	;volatile
  1594   0011A6  6ED9               	movwf	fsr2l,c
  1595   0011A8  341D               	rlcf	(Read_analog_input@address+1)^0,w,c	;volatile
  1596   0011AA  6EDA               	movwf	fsr2h,c
  1597   0011AC  0EAA               	movlw	low _Danie_ModbasRtu_analog_Output
  1598   0011AE  26D9               	addwf	fsr2l,f,c
  1599   0011B0  0E00               	movlw	high _Danie_ModbasRtu_analog_Output
  1600   0011B2                     L1:
  1601   0011B2  22DA               	addwfc	fsr2h,f,c
  1602   0011B4  CFDE F01A          	movff	postinc2,Read_analog_input@Danie	;volatile
  1603   0011B8  CFDD F01B          	movff	postdec2,Read_analog_input@Danie+1	;volatile
  1604                           
  1605                           ;Modbas_RTU.c: 300:    address++;
  1606   0011BC  4A1C               	infsnz	Read_analog_input@address^0,f,c	;volatile
  1607   0011BE  2A1D               	incf	(Read_analog_input@address+1)^0,f,c	;volatile
  1608                           
  1609                           ;Modbas_RTU.c: 301:    Massiv = &Danie;
  1610   0011C0  0E1A               	movlw	low Read_analog_input@Danie
  1611   0011C2  6E14               	movwf	Read_analog_input@Massiv^0,c
  1612   0011C4  0E00               	movlw	high Read_analog_input@Danie
  1613   0011C6  6E15               	movwf	(Read_analog_input@Massiv+1)^0,c
  1614                           
  1615                           ;Modbas_RTU.c: 302:    Danie_Rx_ModbasRtu[Adress ++] = Massiv[1];
  1616   0011C8  EE20 F001          	lfsr	2,1
  1617   0011CC  5014               	movf	Read_analog_input@Massiv^0,w,c
  1618   0011CE  26D9               	addwf	fsr2l,f,c
  1619   0011D0  5015               	movf	(Read_analog_input@Massiv+1)^0,w,c
  1620   0011D2  22DA               	addwfc	fsr2h,f,c
  1621   0011D4  0E8C               	movlw	low _Danie_Rx_ModbasRtu
  1622   0011D6  2420               	addwf	Read_analog_input@Adress^0,w,c	;volatile
  1623   0011D8  6EE1               	movwf	fsr1l,c
  1624   0011DA  6AE2               	clrf	fsr1h,c
  1625   0011DC  0E00               	movlw	high _Danie_Rx_ModbasRtu
  1626   0011DE  22E2               	addwfc	fsr1h,f,c
  1627   0011E0  CFDF FFE7          	movff	indf2,indf1
  1628   0011E4  2A20               	incf	Read_analog_input@Adress^0,f,c	;volatile
  1629                           
  1630                           ;Modbas_RTU.c: 303:    Danie_Rx_ModbasRtu[Adress++] = Massiv [0];
  1631   0011E6  C014  FFD9         	movff	Read_analog_input@Massiv,fsr2l
  1632   0011EA  C015  FFDA         	movff	Read_analog_input@Massiv+1,fsr2h
  1633   0011EE  0E8C               	movlw	low _Danie_Rx_ModbasRtu
  1634   0011F0  2420               	addwf	Read_analog_input@Adress^0,w,c	;volatile
  1635   0011F2  6EE1               	movwf	fsr1l,c
  1636   0011F4  6AE2               	clrf	fsr1h,c
  1637   0011F6  0E00               	movlw	high _Danie_Rx_ModbasRtu
  1638   0011F8  22E2               	addwfc	fsr1h,f,c
  1639   0011FA  CFDF FFE7          	movff	indf2,indf1
  1640   0011FE  2A20               	incf	Read_analog_input@Adress^0,f,c	;volatile
  1641                           
  1642                           ;Modbas_RTU.c: 304:    Number_bits = Number_bits - 1 ;
  1643   001200  0EFF               	movlw	255
  1644   001202  241E               	addwf	Read_analog_input@Number_bits^0,w,c	;volatile
  1645   001204  6E1E               	movwf	Read_analog_input@Number_bits^0,c	;volatile
  1646   001206  0EFF               	movlw	255
  1647   001208  201F               	addwfc	(Read_analog_input@Number_bits+1)^0,w,c	;volatile
  1648   00120A  6E1F               	movwf	(Read_analog_input@Number_bits+1)^0,c	;volatile
  1649   00120C                     l4409:
  1650                           
  1651                           ;Modbas_RTU.c: 290:   while (Number_bits > 0 )
  1652   00120C  501E               	movf	Read_analog_input@Number_bits^0,w,c	;volatile
  1653   00120E  101F               	iorwf	(Read_analog_input@Number_bits+1)^0,w,c	;volatile
  1654   001210  A4D8               	btfss	status,2,c
  1655   001212  D7BB               	goto	l4389
  1656                           
  1657                           ;Modbas_RTU.c: 306:   check_sum ( Adress);
  1658   001214  5020               	movf	Read_analog_input@Adress^0,w,c	;volatile
  1659   001216  EC44  F00D         	call	_check_sum
  1660   00121A  0012               	return		;funcret
  1661   00121C                     __end_of_Read_analog_input:
  1662                           	callstack 0
  1663                           
  1664 ;; *************** function _Changing_Discrete_Output *****************
  1665 ;; Defined at:
  1666 ;;		line 194 in file "Modbas_RTU.c"
  1667 ;; Parameters:    Size  Location     Type
  1668 ;;		None
  1669 ;; Auto vars:     Size  Location     Type
  1670 ;;  address         2   19[COMRAM] unsigned int 
  1671 ;; Return value:  Size  Location     Type
  1672 ;;                  1    wreg      void 
  1673 ;; Registers used:
  1674 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1675 ;; Tracked objects:
  1676 ;;		On entry : 0/0
  1677 ;;		On exit  : 0/0
  1678 ;;		Unchanged: 0/0
  1679 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1680 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1681 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1682 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1683 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1684 ;;Total ram usage:        2 bytes
  1685 ;; Hardware stack levels used: 1
  1686 ;; Hardware stack levels required when called: 7
  1687 ;; This function calls:
  1688 ;;		_Error_modbasRtu
  1689 ;;		_ModbasRtu_Register_address
  1690 ;;		__Bin_input_Output
  1691 ;; This function is called by:
  1692 ;;		_modbasRtu_Answer
  1693 ;; This function uses a non-reentrant model
  1694 ;;
  1695                           
  1696                           	psect	text6
  1697   001806                     __ptext6:
  1698                           	callstack 0
  1699   001806                     _Changing_Discrete_Output:
  1700                           	callstack 21
  1701                           
  1702                           ;Modbas_RTU.c: 196:    register unsigned int address;;Modbas_RTU.c: 197:    address = Mo
      +                          dbasRtu_Register_address(3);
  1703                           
  1704                           ;incstack = 0
  1705   001806  0E03               	movlw	3
  1706   001808  EC85  F00D         	call	_ModbasRtu_Register_address
  1707   00180C  C007  F014         	movff	?_ModbasRtu_Register_address,Changing_Discrete_Output@address
  1708   001810  C008  F015         	movff	?_ModbasRtu_Register_address+1,Changing_Discrete_Output@address+1
  1709                           
  1710                           ;Modbas_RTU.c: 198:    if ( address > 10 )
  1711   001814  5015               	movf	(Changing_Discrete_Output@address+1)^0,w,c
  1712   001816  E104               	bnz	u2270
  1713   001818  0E0B               	movlw	11
  1714   00181A  5C14               	subwf	Changing_Discrete_Output@address^0,w,c
  1715   00181C  A0D8               	btfss	status,0,c
  1716   00181E  D004               	goto	l4311
  1717   001820                     u2270:
  1718                           
  1719                           ;Modbas_RTU.c: 199:     {;Modbas_RTU.c: 200:     Error_modbasRtu (0x02);
  1720   001820  0E02               	movlw	2
  1721   001822  EC04  F00F         	call	_Error_modbasRtu
  1722                           
  1723                           ;Modbas_RTU.c: 201:     }
  1724   001826  0012               	return	
  1725   001828                     l4311:
  1726                           
  1727                           ;Modbas_RTU.c: 203:     {;Modbas_RTU.c: 204:    if (Danie_Rx_ModbasRtu[4] == 255)
  1728   001828  0100               	movlb	0	; () banked
  1729   00182A  2990               	incf	(_Danie_Rx_ModbasRtu+4)& (0+255),w,b
  1730   00182C  A4D8               	btfss	status,2,c
  1731   00182E  D00C               	goto	l4315
  1732                           
  1733                           ; BSR set to: 0
  1734                           ;Modbas_RTU.c: 205:      _Bin_input_Output ((char)address,1,Danie_ModbasRtu_Binary_Outpu
      +                          t,10);
  1735   001830  0E01               	movlw	1
  1736   001832  6E07               	movwf	__Bin_input_Output@state^0,c
  1737   001834  0E3F               	movlw	low _Danie_ModbasRtu_Binary_Output
  1738   001836  6E08               	movwf	__Bin_input_Output@Masiv^0,c
  1739   001838  0E00               	movlw	high _Danie_ModbasRtu_Binary_Output
  1740   00183A  6E09               	movwf	(__Bin_input_Output@Masiv+1)^0,c
  1741   00183C  0E0A               	movlw	10
  1742   00183E  6E0A               	movwf	__Bin_input_Output@Sd^0,c
  1743   001840  5014               	movf	Changing_Discrete_Output@address^0,w,c
  1744   001842  ECC4  F009         	call	__Bin_input_Output
  1745   001846  0012               	return	
  1746   001848                     l4315:
  1747                           
  1748                           ; BSR set to: 0
  1749                           ;Modbas_RTU.c: 207:            _Bin_input_Output ((char)address,0,Danie_ModbasRtu_Binary
      +                          _Output,10);
  1750   001848  0E00               	movlw	0
  1751   00184A  6E07               	movwf	__Bin_input_Output@state^0,c
  1752   00184C  0E3F               	movlw	low _Danie_ModbasRtu_Binary_Output
  1753   00184E  6E08               	movwf	__Bin_input_Output@Masiv^0,c
  1754   001850  0E00               	movlw	high _Danie_ModbasRtu_Binary_Output
  1755   001852  6E09               	movwf	(__Bin_input_Output@Masiv+1)^0,c
  1756   001854  0E0A               	movlw	10
  1757   001856  6E0A               	movwf	__Bin_input_Output@Sd^0,c
  1758   001858  5014               	movf	Changing_Discrete_Output@address^0,w,c
  1759   00185A  ECC4  F009         	call	__Bin_input_Output
  1760   00185E  0012               	return		;funcret
  1761   001860                     __end_of_Changing_Discrete_Output:
  1762                           	callstack 0
  1763                           
  1764 ;; *************** function __Bin_input_Output *****************
  1765 ;; Defined at:
  1766 ;;		line 162 in file "Modbas_RTU.c"
  1767 ;; Parameters:    Size  Location     Type
  1768 ;;  NUMBER          1    wreg     unsigned char 
  1769 ;;  state           1    6[COMRAM] unsigned char 
  1770 ;;  Masiv           2    7[COMRAM] PTR volatile unsigned ch
  1771 ;;		 -> Danie_ModbasRtu_Binary_input(2), Danie_ModbasRtu_Binary_Output(2), 
  1772 ;;  Sd              1    9[COMRAM] volatile unsigned char 
  1773 ;; Auto vars:     Size  Location     Type
  1774 ;;  NUMBER          1   12[COMRAM] unsigned char 
  1775 ;;  Temp1           1   14[COMRAM] volatile unsigned char 
  1776 ;;  Temp            1   13[COMRAM] volatile unsigned char 
  1777 ;; Return value:  Size  Location     Type
  1778 ;;                  1    wreg      unsigned char 
  1779 ;; Registers used:
  1780 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1781 ;; Tracked objects:
  1782 ;;		On entry : 0/0
  1783 ;;		On exit  : 0/0
  1784 ;;		Unchanged: 0/0
  1785 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1786 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1787 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1788 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1789 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1790 ;;Total ram usage:        9 bytes
  1791 ;; Hardware stack levels used: 1
  1792 ;; Hardware stack levels required when called: 4
  1793 ;; This function calls:
  1794 ;;		Nothing
  1795 ;; This function is called by:
  1796 ;;		_Changing_Discrete_Output
  1797 ;;		_read_digital_inputs
  1798 ;;		_change_digital_inputs
  1799 ;;		_read_digital_Output
  1800 ;;		_change_digital_Output
  1801 ;; This function uses a non-reentrant model
  1802 ;;
  1803                           
  1804                           	psect	text7
  1805   001388                     __ptext7:
  1806                           	callstack 0
  1807   001388                     __Bin_input_Output:
  1808                           	callstack 23
  1809                           
  1810                           ;incstack = 0
  1811                           ;__Bin_input_Output@NUMBER stored from wreg
  1812   001388  6E0D               	movwf	__Bin_input_Output@NUMBER^0,c
  1813                           
  1814                           ;Modbas_RTU.c: 162: char _Bin_input_Output( register unsigned char NUMBER, register unsi
      +                          gned char state,volatile unsigned char *Masiv, volatile unsigned char Sd );Modbas_RTU.c:
      +                           163:   {;Modbas_RTU.c: 164:  volatile unsigned char Temp = 0,Temp1 = 0;
  1815   00138A  0E00               	movlw	0
  1816   00138C  6E0E               	movwf	__Bin_input_Output@Temp^0,c	;volatile
  1817   00138E  0E00               	movlw	0
  1818   001390  6E0F               	movwf	__Bin_input_Output@Temp1^0,c	;volatile
  1819                           
  1820                           ;Modbas_RTU.c: 165:  while (NUMBER >= 8)
  1821   001392  D004               	goto	l4231
  1822   001394                     l4227:
  1823                           
  1824                           ;Modbas_RTU.c: 166:   {;Modbas_RTU.c: 167:     NUMBER = NUMBER - 8;
  1825   001394  500D               	movf	__Bin_input_Output@NUMBER^0,w,c
  1826   001396  0FF8               	addlw	248
  1827   001398  6E0D               	movwf	__Bin_input_Output@NUMBER^0,c
  1828                           
  1829                           ;Modbas_RTU.c: 168:     Temp ++;
  1830   00139A  2A0E               	incf	__Bin_input_Output@Temp^0,f,c	;volatile
  1831   00139C                     l4231:
  1832                           
  1833                           ;Modbas_RTU.c: 165:  while (NUMBER >= 8)
  1834   00139C  0E08               	movlw	8
  1835   00139E  600D               	cpfslt	__Bin_input_Output@NUMBER^0,c
  1836   0013A0  D7F9               	goto	l4227
  1837                           
  1838                           ;Modbas_RTU.c: 170:  Temp1 = Masiv [ Temp ];
  1839   0013A2  500E               	movf	__Bin_input_Output@Temp^0,w,c	;volatile
  1840   0013A4  2408               	addwf	__Bin_input_Output@Masiv^0,w,c
  1841   0013A6  6ED9               	movwf	fsr2l,c
  1842   0013A8  0E00               	movlw	0
  1843   0013AA  2009               	addwfc	(__Bin_input_Output@Masiv+1)^0,w,c
  1844   0013AC  6EDA               	movwf	fsr2h,c
  1845   0013AE  50DF               	movf	indf2,w,c
  1846   0013B0  6E0F               	movwf	__Bin_input_Output@Temp1^0,c	;volatile
  1847                           
  1848                           ;Modbas_RTU.c: 171:  if (Sd == 10 )
  1849   0013B2  0E0A               	movlw	10
  1850   0013B4  180A               	xorwf	__Bin_input_Output@Sd^0,w,c	;volatile
  1851   0013B6  A4D8               	btfss	status,2,c
  1852   0013B8  D026               	goto	l4245
  1853                           
  1854                           ;Modbas_RTU.c: 172:   {;Modbas_RTU.c: 173:     if ( state == 1)
  1855   0013BA  0407               	decf	__Bin_input_Output@state^0,w,c
  1856   0013BC  A4D8               	btfss	status,2,c
  1857   0013BE  D00D               	goto	l4241
  1858                           
  1859                           ;Modbas_RTU.c: 174:      Temp1 |=(1<<NUMBER);
  1860   0013C0  C00D  F00B         	movff	__Bin_input_Output@NUMBER,??__Bin_input_Output
  1861   0013C4  0E01               	movlw	1
  1862   0013C6  6E0C               	movwf	(??__Bin_input_Output+1)^0,c
  1863   0013C8  2A0B               	incf	??__Bin_input_Output^0,f,c
  1864   0013CA  D002               	goto	u2204
  1865   0013CC                     u2205:
  1866   0013CC  90D8               	bcf	status,0,c
  1867   0013CE  360C               	rlcf	(??__Bin_input_Output+1)^0,f,c
  1868   0013D0                     u2204:
  1869   0013D0  2E0B               	decfsz	??__Bin_input_Output^0,f,c
  1870   0013D2  D7FC               	goto	u2205
  1871   0013D4  500C               	movf	(??__Bin_input_Output+1)^0,w,c
  1872   0013D6  120F               	iorwf	__Bin_input_Output@Temp1^0,f,c	;volatile
  1873   0013D8  D00D               	goto	l4243
  1874   0013DA                     l4241:
  1875                           
  1876                           ;Modbas_RTU.c: 176:      Temp1 &=~(1<<NUMBER);
  1877   0013DA  C00D  F00B         	movff	__Bin_input_Output@NUMBER,??__Bin_input_Output
  1878   0013DE  0E01               	movlw	1
  1879   0013E0  6E0C               	movwf	(??__Bin_input_Output+1)^0,c
  1880   0013E2  2A0B               	incf	??__Bin_input_Output^0,f,c
  1881   0013E4  D002               	goto	u2214
  1882   0013E6                     u2215:
  1883   0013E6  90D8               	bcf	status,0,c
  1884   0013E8  360C               	rlcf	(??__Bin_input_Output+1)^0,f,c
  1885   0013EA                     u2214:
  1886   0013EA  2E0B               	decfsz	??__Bin_input_Output^0,f,c
  1887   0013EC  D7FC               	goto	u2215
  1888   0013EE  500C               	movf	(??__Bin_input_Output+1)^0,w,c
  1889   0013F0  0AFF               	xorlw	255
  1890   0013F2  160F               	andwf	__Bin_input_Output@Temp1^0,f,c	;volatile
  1891   0013F4                     l4243:
  1892                           
  1893                           ;Modbas_RTU.c: 177:     Masiv [ Temp ] = Temp1;
  1894   0013F4  500E               	movf	__Bin_input_Output@Temp^0,w,c	;volatile
  1895   0013F6  2408               	addwf	__Bin_input_Output@Masiv^0,w,c
  1896   0013F8  6ED9               	movwf	fsr2l,c
  1897   0013FA  0E00               	movlw	0
  1898   0013FC  2009               	addwfc	(__Bin_input_Output@Masiv+1)^0,w,c
  1899   0013FE  6EDA               	movwf	fsr2h,c
  1900   001400  C00F  FFDF         	movff	__Bin_input_Output@Temp1,indf2	;volatile
  1901                           
  1902                           ;Modbas_RTU.c: 178:   }
  1903   001404  D013               	goto	l817
  1904   001406                     l4245:
  1905                           
  1906                           ;Modbas_RTU.c: 180:   {;Modbas_RTU.c: 181:   if ( Temp1 & (1<<NUMBER) )
  1907   001406  C00D  F00B         	movff	__Bin_input_Output@NUMBER,??__Bin_input_Output
  1908   00140A  0E01               	movlw	1
  1909   00140C  6E0C               	movwf	(??__Bin_input_Output+1)^0,c
  1910   00140E  2A0B               	incf	??__Bin_input_Output^0,f,c
  1911   001410  D002               	goto	u2224
  1912   001412                     u2225:
  1913   001412  90D8               	bcf	status,0,c
  1914   001414  360C               	rlcf	(??__Bin_input_Output+1)^0,f,c
  1915   001416                     u2224:
  1916   001416  2E0B               	decfsz	??__Bin_input_Output^0,f,c
  1917   001418  D7FC               	goto	u2225
  1918   00141A  500C               	movf	(??__Bin_input_Output+1)^0,w,c
  1919   00141C  140F               	andwf	__Bin_input_Output@Temp1^0,w,c	;volatile
  1920   00141E  0900               	iorlw	0
  1921   001420  B4D8               	btfsc	status,2,c
  1922   001422  D002               	goto	l4249
  1923                           
  1924                           ;Modbas_RTU.c: 182:    NUMBER = 1;
  1925   001424  0E01               	movlw	1
  1926   001426  D001               	goto	L2
  1927   001428                     l4249:
  1928                           
  1929                           ;Modbas_RTU.c: 184:    NUMBER = 0;
  1930   001428  0E00               	movlw	0
  1931   00142A                     L2:
  1932   00142A  6E0D               	movwf	__Bin_input_Output@NUMBER^0,c
  1933   00142C                     l817:
  1934                           
  1935                           ;Modbas_RTU.c: 186:   return NUMBER;
  1936   00142C  500D               	movf	__Bin_input_Output@NUMBER^0,w,c
  1937   00142E  0012               	return		;funcret
  1938   001430                     __end_of__Bin_input_Output:
  1939                           	callstack 0
  1940                           
  1941 ;; *************** function _ModbasRtu_Register_address *****************
  1942 ;; Defined at:
  1943 ;;		line 131 in file "Modbas_RTU.c"
  1944 ;; Parameters:    Size  Location     Type
  1945 ;;  Li              1    wreg     unsigned char 
  1946 ;; Auto vars:     Size  Location     Type
  1947 ;;  Li              1   13[COMRAM] unsigned char 
  1948 ;;  Hi              1   12[COMRAM] unsigned char 
  1949 ;; Return value:  Size  Location     Type
  1950 ;;                  2    6[COMRAM] unsigned int 
  1951 ;; Registers used:
  1952 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1953 ;; Tracked objects:
  1954 ;;		On entry : 0/0
  1955 ;;		On exit  : 0/0
  1956 ;;		Unchanged: 0/0
  1957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1958 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1959 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1960 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1961 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1962 ;;Total ram usage:        8 bytes
  1963 ;; Hardware stack levels used: 1
  1964 ;; Hardware stack levels required when called: 4
  1965 ;; This function calls:
  1966 ;;		Nothing
  1967 ;; This function is called by:
  1968 ;;		_Changing_Discrete_Output
  1969 ;;		_Reading_Discrete_Output
  1970 ;;		_Read_analog_input
  1971 ;;		_analog_output_recording
  1972 ;; This function uses a non-reentrant model
  1973 ;;
  1974                           
  1975                           	psect	text8
  1976   001B0A                     __ptext8:
  1977                           	callstack 0
  1978   001B0A                     _ModbasRtu_Register_address:
  1979                           	callstack 23
  1980                           
  1981                           ;incstack = 0
  1982                           ;ModbasRtu_Register_address@Li stored from wreg
  1983   001B0A  6E0E               	movwf	ModbasRtu_Register_address@Li^0,c
  1984                           
  1985                           ;Modbas_RTU.c: 131:  unsigned int ModbasRtu_Register_address(unsigned char Li);Modbas_RT
      +                          U.c: 132:  {;Modbas_RTU.c: 133:   register char Hi= Li - 1;
  1986   001B0C  040E               	decf	ModbasRtu_Register_address@Li^0,w,c
  1987   001B0E  6E0D               	movwf	ModbasRtu_Register_address@Hi^0,c
  1988                           
  1989                           ;Modbas_RTU.c: 134:   return Danie_Rx_ModbasRtu[Hi] * 256+ Danie_Rx_ModbasRtu[Li];
  1990   001B10  0E8C               	movlw	low _Danie_Rx_ModbasRtu
  1991   001B12  240E               	addwf	ModbasRtu_Register_address@Li^0,w,c
  1992   001B14  6ED9               	movwf	fsr2l,c
  1993   001B16  6ADA               	clrf	fsr2h,c
  1994   001B18  0E00               	movlw	high _Danie_Rx_ModbasRtu
  1995   001B1A  22DA               	addwfc	fsr2h,f,c
  1996   001B1C  50DF               	movf	indf2,w,c
  1997   001B1E  6E09               	movwf	??_ModbasRtu_Register_address^0,c
  1998   001B20  0E8C               	movlw	low _Danie_Rx_ModbasRtu
  1999   001B22  240D               	addwf	ModbasRtu_Register_address@Hi^0,w,c
  2000   001B24  6ED9               	movwf	fsr2l,c
  2001   001B26  6ADA               	clrf	fsr2h,c
  2002   001B28  0E00               	movlw	high _Danie_Rx_ModbasRtu
  2003   001B2A  22DA               	addwfc	fsr2h,f,c
  2004   001B2C  50DF               	movf	indf2,w,c
  2005   001B2E  6E0A               	movwf	(??_ModbasRtu_Register_address+1)^0,c
  2006   001B30  500A               	movf	(??_ModbasRtu_Register_address+1)^0,w,c
  2007   001B32  6E0C               	movwf	(??_ModbasRtu_Register_address+3)^0,c
  2008   001B34  6A0B               	clrf	(??_ModbasRtu_Register_address+2)^0,c
  2009   001B36  5009               	movf	??_ModbasRtu_Register_address^0,w,c
  2010   001B38  240B               	addwf	(??_ModbasRtu_Register_address+2)^0,w,c
  2011   001B3A  6E07               	movwf	?_ModbasRtu_Register_address^0,c
  2012   001B3C  0E00               	movlw	0
  2013   001B3E  200C               	addwfc	(??_ModbasRtu_Register_address+3)^0,w,c
  2014   001B40  6E08               	movwf	(?_ModbasRtu_Register_address+1)^0,c
  2015   001B42  0012               	return		;funcret
  2016   001B44                     __end_of_ModbasRtu_Register_address:
  2017                           	callstack 0
  2018                           
  2019 ;; *************** function _Error_modbasRtu *****************
  2020 ;; Defined at:
  2021 ;;		line 332 in file "Modbas_RTU.c"
  2022 ;; Parameters:    Size  Location     Type
  2023 ;;  Temp_Error      1    wreg     volatile unsigned char 
  2024 ;; Auto vars:     Size  Location     Type
  2025 ;;  Temp_Error      1   18[COMRAM] volatile unsigned char 
  2026 ;; Return value:  Size  Location     Type
  2027 ;;                  1    wreg      void 
  2028 ;; Registers used:
  2029 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2030 ;; Tracked objects:
  2031 ;;		On entry : 0/0
  2032 ;;		On exit  : 0/0
  2033 ;;		Unchanged: 0/0
  2034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2035 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2036 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2037 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2038 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2039 ;;Total ram usage:        1 bytes
  2040 ;; Hardware stack levels used: 1
  2041 ;; Hardware stack levels required when called: 6
  2042 ;; This function calls:
  2043 ;;		_check_sum
  2044 ;; This function is called by:
  2045 ;;		_Changing_Discrete_Output
  2046 ;;		_Reading_Discrete_Output
  2047 ;;		_Read_analog_input
  2048 ;;		_analog_output_recording
  2049 ;;		_modbasRtu_Answer
  2050 ;;		_modbasRtu_Slave
  2051 ;; This function uses a non-reentrant model
  2052 ;;
  2053                           
  2054                           	psect	text9
  2055   001E08                     __ptext9:
  2056                           	callstack 0
  2057   001E08                     _Error_modbasRtu:
  2058                           	callstack 21
  2059                           
  2060                           ;incstack = 0
  2061                           ;Error_modbasRtu@Temp_Error stored from wreg
  2062   001E08  6E13               	movwf	Error_modbasRtu@Temp_Error^0,c	;volatile
  2063                           
  2064                           ;Modbas_RTU.c: 332:  void Error_modbasRtu (volatile unsigned char Temp_Error);Modbas_RTU
      +                          .c: 333:   {;Modbas_RTU.c: 334:  Danie_Rx_ModbasRtu[1] |= (1<<7);
  2065   001E0A  0100               	movlb	0	; () banked
  2066   001E0C  8F8D               	bsf	(_Danie_Rx_ModbasRtu+1)& (0+255),7,b
  2067                           
  2068                           ; BSR set to: 0
  2069                           ;Modbas_RTU.c: 335:  Danie_Rx_ModbasRtu[2] = Temp_Error;
  2070   001E0E  C013  F08E         	movff	Error_modbasRtu@Temp_Error,_Danie_Rx_ModbasRtu+2	;volatile
  2071                           
  2072                           ; BSR set to: 0
  2073                           ;Modbas_RTU.c: 336:  check_sum (3);
  2074   001E12  0E03               	movlw	3
  2075   001E14  EC44  F00D         	call	_check_sum
  2076   001E18  0012               	return		;funcret
  2077   001E1A                     __end_of_Error_modbasRtu:
  2078                           	callstack 0
  2079                           
  2080 ;; *************** function _check_sum *****************
  2081 ;; Defined at:
  2082 ;;		line 341 in file "Modbas_RTU.c"
  2083 ;; Parameters:    Size  Location     Type
  2084 ;;  Adress          1    wreg     unsigned char 
  2085 ;; Auto vars:     Size  Location     Type
  2086 ;;  Adress          1   17[COMRAM] unsigned char 
  2087 ;;  RC              2   15[COMRAM] unsigned int 
  2088 ;; Return value:  Size  Location     Type
  2089 ;;                  1    wreg      void 
  2090 ;; Registers used:
  2091 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2092 ;; Tracked objects:
  2093 ;;		On entry : 0/0
  2094 ;;		On exit  : 0/0
  2095 ;;		Unchanged: 0/0
  2096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2097 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2098 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2099 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2100 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2101 ;;Total ram usage:        3 bytes
  2102 ;; Hardware stack levels used: 1
  2103 ;; Hardware stack levels required when called: 5
  2104 ;; This function calls:
  2105 ;;		_crc_chk
  2106 ;; This function is called by:
  2107 ;;		_Reading_Discrete_Output
  2108 ;;		_Read_analog_input
  2109 ;;		_Error_modbasRtu
  2110 ;; This function uses a non-reentrant model
  2111 ;;
  2112                           
  2113                           	psect	text10
  2114   001A88                     __ptext10:
  2115                           	callstack 0
  2116   001A88                     _check_sum:
  2117                           	callstack 21
  2118                           
  2119                           ;incstack = 0
  2120                           ;check_sum@Adress stored from wreg
  2121   001A88  6E12               	movwf	check_sum@Adress^0,c
  2122                           
  2123                           ;Modbas_RTU.c: 341:  void check_sum ( register unsigned char Adress);Modbas_RTU.c: 342: 
      +                            {;Modbas_RTU.c: 343:  register unsigned int RC;;Modbas_RTU.c: 344:  RC = crc_chk(Danie
      +                          _Rx_ModbasRtu,Adress);
  2124   001A8A  0E8C               	movlw	low _Danie_Rx_ModbasRtu
  2125   001A8C  6E07               	movwf	crc_chk@data^0,c
  2126   001A8E  0E00               	movlw	high _Danie_Rx_ModbasRtu
  2127   001A90  6E08               	movwf	(crc_chk@data+1)^0,c
  2128   001A92  C012  F009         	movff	check_sum@Adress,crc_chk@length
  2129   001A96  EC63  F00B         	call	_crc_chk	;wreg free
  2130   001A9A  C007  F010         	movff	?_crc_chk,check_sum@RC
  2131   001A9E  C008  F011         	movff	?_crc_chk+1,check_sum@RC+1
  2132                           
  2133                           ;Modbas_RTU.c: 345:  Danie_Rx_ModbasRtu[Adress] = RC ;
  2134   001AA2  0E8C               	movlw	low _Danie_Rx_ModbasRtu
  2135   001AA4  2412               	addwf	check_sum@Adress^0,w,c
  2136   001AA6  6ED9               	movwf	fsr2l,c
  2137   001AA8  6ADA               	clrf	fsr2h,c
  2138   001AAA  0E00               	movlw	high _Danie_Rx_ModbasRtu
  2139   001AAC  22DA               	addwfc	fsr2h,f,c
  2140   001AAE  C010  FFDF         	movff	check_sum@RC,indf2
  2141                           
  2142                           ;Modbas_RTU.c: 346:  Adress++;
  2143   001AB2  2A12               	incf	check_sum@Adress^0,f,c
  2144                           
  2145                           ;Modbas_RTU.c: 347:  Danie_Rx_ModbasRtu[Adress] = RC >> 8;
  2146   001AB4  0E8C               	movlw	low _Danie_Rx_ModbasRtu
  2147   001AB6  2412               	addwf	check_sum@Adress^0,w,c
  2148   001AB8  6ED9               	movwf	fsr2l,c
  2149   001ABA  6ADA               	clrf	fsr2h,c
  2150   001ABC  0E00               	movlw	high _Danie_Rx_ModbasRtu
  2151   001ABE  22DA               	addwfc	fsr2h,f,c
  2152   001AC0  5011               	movf	(check_sum@RC+1)^0,w,c
  2153   001AC2  6EDF               	movwf	indf2,c
  2154                           
  2155                           ;Modbas_RTU.c: 348:  quantity_Data_ModbasRtu = Adress;
  2156   001AC4  C012  F03E         	movff	check_sum@Adress,_quantity_Data_ModbasRtu
  2157   001AC8  0012               	return		;funcret
  2158   001ACA                     __end_of_check_sum:
  2159                           	callstack 0
  2160                           
  2161 ;; *************** function _Data_integrity *****************
  2162 ;; Defined at:
  2163 ;;		line 139 in file "Modbas_RTU.c"
  2164 ;; Parameters:    Size  Location     Type
  2165 ;;		None
  2166 ;; Auto vars:     Size  Location     Type
  2167 ;;  Temp22          2   16[COMRAM] unsigned int 
  2168 ;;  Temp33          1   18[COMRAM] unsigned char 
  2169 ;; Return value:  Size  Location     Type
  2170 ;;                  1    wreg      unsigned char 
  2171 ;; Registers used:
  2172 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2173 ;; Tracked objects:
  2174 ;;		On entry : 0/0
  2175 ;;		On exit  : 0/0
  2176 ;;		Unchanged: 0/0
  2177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2178 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2179 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2180 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2181 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2182 ;;Total ram usage:        4 bytes
  2183 ;; Hardware stack levels used: 1
  2184 ;; Hardware stack levels required when called: 5
  2185 ;; This function calls:
  2186 ;;		_crc_chk
  2187 ;; This function is called by:
  2188 ;;		_modbasRtu_Slave
  2189 ;; This function uses a non-reentrant model
  2190 ;;
  2191                           
  2192                           	psect	text11
  2193   0018BA                     __ptext11:
  2194                           	callstack 0
  2195   0018BA                     _Data_integrity:
  2196                           	callstack 24
  2197                           
  2198                           ;Modbas_RTU.c: 141:    register unsigned int Temp22;;Modbas_RTU.c: 142:    register unsi
      +                          gned char Temp33;;Modbas_RTU.c: 143:    quantity_Data_ModbasRtu = quantity_Data_ModbasRt
      +                          u - 2;
  2199                           
  2200                           ;incstack = 0
  2201   0018BA  503E               	movf	_quantity_Data_ModbasRtu^0,w,c
  2202   0018BC  0FFE               	addlw	254
  2203   0018BE  6E3E               	movwf	_quantity_Data_ModbasRtu^0,c
  2204                           
  2205                           ;Modbas_RTU.c: 144:    Temp22 = crc_chk(Danie_Rx_ModbasRtu,quantity_Data_ModbasRtu);
  2206   0018C0  0E8C               	movlw	low _Danie_Rx_ModbasRtu
  2207   0018C2  6E07               	movwf	crc_chk@data^0,c
  2208   0018C4  0E00               	movlw	high _Danie_Rx_ModbasRtu
  2209   0018C6  6E08               	movwf	(crc_chk@data+1)^0,c
  2210   0018C8  C03E  F009         	movff	_quantity_Data_ModbasRtu,crc_chk@length
  2211   0018CC  EC63  F00B         	call	_crc_chk	;wreg free
  2212   0018D0  C007  F011         	movff	?_crc_chk,Data_integrity@Temp22
  2213   0018D4  C008  F012         	movff	?_crc_chk+1,Data_integrity@Temp22+1
  2214                           
  2215                           ;Modbas_RTU.c: 145:    Temp33 = Temp22;
  2216   0018D8  C011  F013         	movff	Data_integrity@Temp22,Data_integrity@Temp33
  2217                           
  2218                           ;Modbas_RTU.c: 146:    if ( Danie_Rx_ModbasRtu[quantity_Data_ModbasRtu] == Temp33 )
  2219   0018DC  0E8C               	movlw	low _Danie_Rx_ModbasRtu
  2220   0018DE  243E               	addwf	_quantity_Data_ModbasRtu^0,w,c
  2221   0018E0  6ED9               	movwf	fsr2l,c
  2222   0018E2  6ADA               	clrf	fsr2h,c
  2223   0018E4  0E00               	movlw	high _Danie_Rx_ModbasRtu
  2224   0018E6  22DA               	addwfc	fsr2h,f,c
  2225   0018E8  5013               	movf	Data_integrity@Temp33^0,w,c
  2226   0018EA  18DE               	xorwf	postinc2,w,c
  2227   0018EC  A4D8               	btfss	status,2,c
  2228   0018EE  D00F               	goto	l4559
  2229                           
  2230                           ;Modbas_RTU.c: 147:  {;Modbas_RTU.c: 148:    quantity_Data_ModbasRtu ++;
  2231   0018F0  2A3E               	incf	_quantity_Data_ModbasRtu^0,f,c
  2232                           
  2233                           ;Modbas_RTU.c: 149:    Temp33 = (Temp22>> 8) ;
  2234   0018F2  5012               	movf	(Data_integrity@Temp22+1)^0,w,c
  2235   0018F4  6E13               	movwf	Data_integrity@Temp33^0,c
  2236                           
  2237                           ;Modbas_RTU.c: 150:    if ( Danie_Rx_ModbasRtu[quantity_Data_ModbasRtu] == Temp33 )
  2238   0018F6  0E8C               	movlw	low _Danie_Rx_ModbasRtu
  2239   0018F8  243E               	addwf	_quantity_Data_ModbasRtu^0,w,c
  2240   0018FA  6ED9               	movwf	fsr2l,c
  2241   0018FC  6ADA               	clrf	fsr2h,c
  2242   0018FE  0E00               	movlw	high _Danie_Rx_ModbasRtu
  2243   001900  22DA               	addwfc	fsr2h,f,c
  2244   001902  5013               	movf	Data_integrity@Temp33^0,w,c
  2245   001904  18DE               	xorwf	postinc2,w,c
  2246   001906  A4D8               	btfss	status,2,c
  2247   001908  D002               	goto	l4559
  2248                           
  2249                           ;Modbas_RTU.c: 151:     {;Modbas_RTU.c: 152:    return 1;
  2250   00190A  0E01               	movlw	1
  2251   00190C  0012               	return	
  2252   00190E                     l4559:
  2253                           
  2254                           ;Modbas_RTU.c: 155:    return 0;
  2255   00190E  0E00               	movlw	0
  2256   001910  0012               	return		;funcret
  2257   001912                     __end_of_Data_integrity:
  2258                           	callstack 0
  2259                           
  2260 ;; *************** function _crc_chk *****************
  2261 ;; Defined at:
  2262 ;;		line 107 in file "Modbas_RTU.c"
  2263 ;; Parameters:    Size  Location     Type
  2264 ;;  data            2    6[COMRAM] PTR unsigned char 
  2265 ;;		 -> Danie_Rx_ModbasRtu(30), 
  2266 ;;  length          1    8[COMRAM] unsigned char 
  2267 ;; Auto vars:     Size  Location     Type
  2268 ;;  reg_crc         2   13[COMRAM] unsigned int 
  2269 ;;  j               2   11[COMRAM] int 
  2270 ;; Return value:  Size  Location     Type
  2271 ;;                  2    6[COMRAM] int 
  2272 ;; Registers used:
  2273 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2274 ;; Tracked objects:
  2275 ;;		On entry : 0/0
  2276 ;;		On exit  : 0/0
  2277 ;;		Unchanged: 0/0
  2278 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2279 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2280 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2281 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2282 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2283 ;;Total ram usage:        9 bytes
  2284 ;; Hardware stack levels used: 1
  2285 ;; Hardware stack levels required when called: 4
  2286 ;; This function calls:
  2287 ;;		Nothing
  2288 ;; This function is called by:
  2289 ;;		_Data_integrity
  2290 ;;		_check_sum
  2291 ;; This function uses a non-reentrant model
  2292 ;;
  2293                           
  2294                           	psect	text12
  2295   0016C6                     __ptext12:
  2296                           	callstack 0
  2297   0016C6                     _crc_chk:
  2298                           	callstack 21
  2299                           
  2300                           ;Modbas_RTU.c: 107:   int crc_chk (unsigned char* data, unsigned char length );Modbas_RT
      +                          U.c: 108:   {;Modbas_RTU.c: 109:   int j;;Modbas_RTU.c: 110:   unsigned int reg_crc = 0x
      +                          FFFF;
  2301                           
  2302                           ;incstack = 0
  2303   0016C6  680E               	setf	crc_chk@reg_crc^0,c
  2304   0016C8  680F               	setf	(crc_chk@reg_crc+1)^0,c
  2305                           
  2306                           ;Modbas_RTU.c: 111:  while (length--)
  2307   0016CA  D02D               	goto	u2100
  2308   0016CC                     l4167:
  2309                           
  2310                           ;Modbas_RTU.c: 112:  {;Modbas_RTU.c: 113:    reg_crc ^= *data++;
  2311   0016CC  C007  FFD9         	movff	crc_chk@data,fsr2l
  2312   0016D0  C008  FFDA         	movff	crc_chk@data+1,fsr2h
  2313   0016D4  50DF               	movf	indf2,w,c
  2314   0016D6  6E0A               	movwf	??_crc_chk^0,c
  2315   0016D8  500A               	movf	??_crc_chk^0,w,c
  2316   0016DA  1A0E               	xorwf	crc_chk@reg_crc^0,f,c
  2317   0016DC  4A07               	infsnz	crc_chk@data^0,f,c
  2318   0016DE  2A08               	incf	(crc_chk@data+1)^0,f,c
  2319                           
  2320                           ;Modbas_RTU.c: 114:    for(j=0;j<8;j++)
  2321   0016E0  0E00               	movlw	0
  2322   0016E2  6E0D               	movwf	(crc_chk@j+1)^0,c
  2323   0016E4  0E00               	movlw	0
  2324   0016E6  6E0C               	movwf	crc_chk@j^0,c
  2325   0016E8                     l795:
  2326                           
  2327                           ;Modbas_RTU.c: 115:     {;Modbas_RTU.c: 116:    if(reg_crc & 0x01)
  2328   0016E8  A00E               	btfss	crc_chk@reg_crc^0,0,c
  2329   0016EA  D00C               	goto	l4179
  2330                           
  2331                           ;Modbas_RTU.c: 117:        {;Modbas_RTU.c: 118:       reg_crc = (reg_crc >> 1) ^ 0xA001;
  2332   0016EC  90D8               	bcf	status,0,c
  2333   0016EE  300F               	rrcf	(crc_chk@reg_crc+1)^0,w,c
  2334   0016F0  6E0B               	movwf	(??_crc_chk+1)^0,c
  2335   0016F2  300E               	rrcf	crc_chk@reg_crc^0,w,c
  2336   0016F4  6E0A               	movwf	??_crc_chk^0,c
  2337   0016F6  0E01               	movlw	1
  2338   0016F8  180A               	xorwf	??_crc_chk^0,w,c
  2339   0016FA  6E0E               	movwf	crc_chk@reg_crc^0,c
  2340   0016FC  0EA0               	movlw	160
  2341   0016FE  180B               	xorwf	(??_crc_chk+1)^0,w,c
  2342   001700  6E0F               	movwf	(crc_chk@reg_crc+1)^0,c
  2343                           
  2344                           ;Modbas_RTU.c: 119:        }
  2345   001702  D007               	goto	l4181
  2346   001704                     l4179:
  2347                           
  2348                           ;Modbas_RTU.c: 121:        {;Modbas_RTU.c: 122:       reg_crc = reg_crc >> 1;
  2349   001704  90D8               	bcf	status,0,c
  2350   001706  300F               	rrcf	(crc_chk@reg_crc+1)^0,w,c
  2351   001708  6E0A               	movwf	??_crc_chk^0,c
  2352   00170A  300E               	rrcf	crc_chk@reg_crc^0,w,c
  2353   00170C  6E0E               	movwf	crc_chk@reg_crc^0,c
  2354   00170E  C00A  F00F         	movff	??_crc_chk,crc_chk@reg_crc+1
  2355   001712                     l4181:
  2356                           
  2357                           ;Modbas_RTU.c: 124:     }
  2358   001712  4A0C               	infsnz	crc_chk@j^0,f,c
  2359   001714  2A0D               	incf	(crc_chk@j+1)^0,f,c
  2360   001716  BE0D               	btfsc	(crc_chk@j+1)^0,7,c
  2361   001718  D7E7               	goto	l795
  2362   00171A  500D               	movf	(crc_chk@j+1)^0,w,c
  2363   00171C  E104               	bnz	u2100
  2364   00171E  0E08               	movlw	8
  2365   001720  5C0C               	subwf	crc_chk@j^0,w,c
  2366   001722  A0D8               	btfss	status,0,c
  2367   001724  D7E1               	goto	l795
  2368   001726                     u2100:
  2369                           
  2370                           ;Modbas_RTU.c: 111:  while (length--)
  2371   001726  0609               	decf	crc_chk@length^0,f,c
  2372   001728  2809               	incf	crc_chk@length^0,w,c
  2373   00172A  A4D8               	btfss	status,2,c
  2374   00172C  D7CF               	goto	l4167
  2375                           
  2376                           ;Modbas_RTU.c: 126:  return reg_crc;
  2377   00172E  C00E  F007         	movff	crc_chk@reg_crc,?_crc_chk
  2378   001732  C00F  F008         	movff	crc_chk@reg_crc+1,?_crc_chk+1
  2379   001736  0012               	return		;funcret
  2380   001738                     __end_of_crc_chk:
  2381                           	callstack 0
  2382                           
  2383 ;; *************** function _USART_UDRE_vect *****************
  2384 ;; Defined at:
  2385 ;;		line 82 in file "Modbas_RTU.c"
  2386 ;; Parameters:    Size  Location     Type
  2387 ;;		None
  2388 ;; Auto vars:     Size  Location     Type
  2389 ;;		None
  2390 ;; Return value:  Size  Location     Type
  2391 ;;                  1    wreg      void 
  2392 ;; Registers used:
  2393 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2394 ;; Tracked objects:
  2395 ;;		On entry : 0/0
  2396 ;;		On exit  : 0/0
  2397 ;;		Unchanged: 0/0
  2398 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2399 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2400 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2401 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2402 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2403 ;;Total ram usage:        0 bytes
  2404 ;; Hardware stack levels used: 1
  2405 ;; Hardware stack levels required when called: 4
  2406 ;; This function calls:
  2407 ;;		Nothing
  2408 ;; This function is called by:
  2409 ;;		_main
  2410 ;; This function uses a non-reentrant model
  2411 ;;
  2412                           
  2413                           	psect	text13
  2414   001CF0                     __ptext13:
  2415                           	callstack 0
  2416   001CF0                     _USART_UDRE_vect:
  2417                           	callstack 26
  2418                           
  2419                           ;Modbas_RTU.c: 85:    if (quantity_Data_ModbasRtu >= Temp_ModbasRtu )
  2420                           
  2421                           ;incstack = 0
  2422   001CF0  503D               	movf	_Temp_ModbasRtu^0,w,c
  2423   001CF2  5C3E               	subwf	_quantity_Data_ModbasRtu^0,w,c
  2424   001CF4  A0D8               	btfss	status,0,c
  2425   001CF6  D00A               	goto	l4631
  2426                           
  2427                           ;Modbas_RTU.c: 86:     {;Modbas_RTU.c: 87:    TXREG = Danie_Rx_ModbasRtu[Temp_ModbasRtu+
      +                          +];
  2428   001CF8  0E8C               	movlw	low _Danie_Rx_ModbasRtu
  2429   001CFA  243D               	addwf	_Temp_ModbasRtu^0,w,c
  2430   001CFC  6ED9               	movwf	fsr2l,c
  2431   001CFE  6ADA               	clrf	fsr2h,c
  2432   001D00  0E00               	movlw	high _Danie_Rx_ModbasRtu
  2433   001D02  22DA               	addwfc	fsr2h,f,c
  2434   001D04  50DF               	movf	indf2,w,c
  2435   001D06  6EAD               	movwf	173,c	;volatile
  2436   001D08  2A3D               	incf	_Temp_ModbasRtu^0,f,c
  2437                           
  2438                           ;Modbas_RTU.c: 89:     }
  2439   001D0A  0012               	return	
  2440   001D0C                     l4631:
  2441                           
  2442                           ;Modbas_RTU.c: 91:     {;Modbas_RTU.c: 96:       USART_UDR_vect=0;
  2443   001D0C  0E00               	movlw	0
  2444   001D0E  6E3A               	movwf	_USART_UDR_vect^0,c
  2445                           
  2446                           ;Modbas_RTU.c: 98:       PIE1bits.TX1IE=1;
  2447   001D10  889D               	bsf	157,4,c	;volatile
  2448   001D12  0012               	return		;funcret
  2449   001D14                     __end_of_USART_UDRE_vect:
  2450                           	callstack 0
  2451                           
  2452 ;; *************** function _SYSTEM_Initialize *****************
  2453 ;; Defined at:
  2454 ;;		line 50 in file "mcc_generated_files/mcc.c"
  2455 ;; Parameters:    Size  Location     Type
  2456 ;;		None
  2457 ;; Auto vars:     Size  Location     Type
  2458 ;;		None
  2459 ;; Return value:  Size  Location     Type
  2460 ;;                  1    wreg      void 
  2461 ;; Registers used:
  2462 ;;		wreg, status,2, status,0, cstack
  2463 ;; Tracked objects:
  2464 ;;		On entry : 0/0
  2465 ;;		On exit  : 0/0
  2466 ;;		Unchanged: 0/0
  2467 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2468 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2469 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2470 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2471 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2472 ;;Total ram usage:        0 bytes
  2473 ;; Hardware stack levels used: 1
  2474 ;; Hardware stack levels required when called: 6
  2475 ;; This function calls:
  2476 ;;		_EUSART_Initialize
  2477 ;;		_I2C_Initialize
  2478 ;;		_INTERRUPT_Initialize
  2479 ;;		_OSCILLATOR_Initialize
  2480 ;;		_PIN_MANAGER_Initialize
  2481 ;;		_TMR0_Initialize
  2482 ;; This function is called by:
  2483 ;;		_main
  2484 ;; This function uses a non-reentrant model
  2485 ;;
  2486                           
  2487                           	psect	text14
  2488   001D78                     __ptext14:
  2489                           	callstack 0
  2490   001D78                     _SYSTEM_Initialize:
  2491                           	callstack 24
  2492                           
  2493                           ;mcc_generated_files/mcc.c: 53:     INTERRUPT_Initialize();
  2494                           
  2495                           ;incstack = 0
  2496   001D78  ECA6  F00F         	call	_INTERRUPT_Initialize	;wreg free
  2497                           
  2498                           ;mcc_generated_files/mcc.c: 54:     I2C_Initialize();
  2499   001D7C  ECFA  F00E         	call	_I2C_Initialize	;wreg free
  2500                           
  2501                           ;mcc_generated_files/mcc.c: 55:     PIN_MANAGER_Initialize();
  2502   001D80  EC65  F00E         	call	_PIN_MANAGER_Initialize	;wreg free
  2503                           
  2504                           ;mcc_generated_files/mcc.c: 56:     OSCILLATOR_Initialize();
  2505   001D84  EC4B  F00F         	call	_OSCILLATOR_Initialize	;wreg free
  2506                           
  2507                           ;mcc_generated_files/mcc.c: 57:     TMR0_Initialize();
  2508   001D88  EC8A  F00E         	call	_TMR0_Initialize	;wreg free
  2509                           
  2510                           ;mcc_generated_files/mcc.c: 58:     EUSART_Initialize();
  2511   001D8C  EC29  F00B         	call	_EUSART_Initialize	;wreg free
  2512   001D90  0012               	return		;funcret
  2513   001D92                     __end_of_SYSTEM_Initialize:
  2514                           	callstack 0
  2515                           
  2516 ;; *************** function _TMR0_Initialize *****************
  2517 ;; Defined at:
  2518 ;;		line 68 in file "mcc_generated_files/tmr0.c"
  2519 ;; Parameters:    Size  Location     Type
  2520 ;;		None
  2521 ;; Auto vars:     Size  Location     Type
  2522 ;;		None
  2523 ;; Return value:  Size  Location     Type
  2524 ;;                  1    wreg      void 
  2525 ;; Registers used:
  2526 ;;		wreg, status,2, status,0, cstack
  2527 ;; Tracked objects:
  2528 ;;		On entry : 0/0
  2529 ;;		On exit  : 0/0
  2530 ;;		Unchanged: 0/0
  2531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2532 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2533 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2534 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2535 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2536 ;;Total ram usage:        0 bytes
  2537 ;; Hardware stack levels used: 1
  2538 ;; Hardware stack levels required when called: 5
  2539 ;; This function calls:
  2540 ;;		_TMR0_SetInterruptHandler
  2541 ;; This function is called by:
  2542 ;;		_SYSTEM_Initialize
  2543 ;; This function uses a non-reentrant model
  2544 ;;
  2545                           
  2546                           	psect	text15
  2547   001D14                     __ptext15:
  2548                           	callstack 0
  2549   001D14                     _TMR0_Initialize:
  2550                           	callstack 24
  2551                           
  2552                           ;mcc_generated_files/tmr0.c: 73:     TMR0H = 0x00;
  2553                           
  2554                           ;incstack = 0
  2555   001D14  0E00               	movlw	0
  2556   001D16  6ED7               	movwf	215,c	;volatile
  2557                           
  2558                           ;mcc_generated_files/tmr0.c: 76:     TMR0L = 0xE1;
  2559   001D18  0EE1               	movlw	225
  2560   001D1A  6ED6               	movwf	214,c	;volatile
  2561                           
  2562                           ;mcc_generated_files/tmr0.c: 80:     timer0ReloadVal = 225;
  2563   001D1C  0EE1               	movlw	225
  2564   001D1E  6E4C               	movwf	_timer0ReloadVal^0,c	;volatile
  2565                           
  2566                           ;mcc_generated_files/tmr0.c: 83:     INTCONbits.TMR0IF = 0;
  2567   001D20  94F2               	bcf	242,2,c	;volatile
  2568                           
  2569                           ;mcc_generated_files/tmr0.c: 86:     INTCONbits.TMR0IE = 1;
  2570   001D22  8AF2               	bsf	242,5,c	;volatile
  2571                           
  2572                           ;mcc_generated_files/tmr0.c: 89:     TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandl
      +                          er);
  2573   001D24  0E88               	movlw	low _TMR0_DefaultInterruptHandler
  2574   001D26  6E07               	movwf	TMR0_SetInterruptHandler@InterruptHandler^0,c
  2575   001D28  0E1F               	movlw	high _TMR0_DefaultInterruptHandler
  2576   001D2A  6E08               	movwf	(TMR0_SetInterruptHandler@InterruptHandler+1)^0,c
  2577   001D2C  EC46  F00F         	call	_TMR0_SetInterruptHandler	;wreg free
  2578                           
  2579                           ;mcc_generated_files/tmr0.c: 92:     T0CON = 0x57;
  2580   001D30  0E57               	movlw	87
  2581   001D32  6ED5               	movwf	213,c	;volatile
  2582   001D34  0012               	return		;funcret
  2583   001D36                     __end_of_TMR0_Initialize:
  2584                           	callstack 0
  2585                           
  2586 ;; *************** function _TMR0_SetInterruptHandler *****************
  2587 ;; Defined at:
  2588 ;;		line 149 in file "mcc_generated_files/tmr0.c"
  2589 ;; Parameters:    Size  Location     Type
  2590 ;;  InterruptHan    2    6[COMRAM] PTR FTN()void 
  2591 ;;		 -> TMR0_DefaultInterruptHandler(1), 
  2592 ;; Auto vars:     Size  Location     Type
  2593 ;;		None
  2594 ;; Return value:  Size  Location     Type
  2595 ;;                  1    wreg      void 
  2596 ;; Registers used:
  2597 ;;		wreg, status,2, status,0
  2598 ;; Tracked objects:
  2599 ;;		On entry : 0/0
  2600 ;;		On exit  : 0/0
  2601 ;;		Unchanged: 0/0
  2602 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2603 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2604 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2605 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2606 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2607 ;;Total ram usage:        2 bytes
  2608 ;; Hardware stack levels used: 1
  2609 ;; Hardware stack levels required when called: 4
  2610 ;; This function calls:
  2611 ;;		Nothing
  2612 ;; This function is called by:
  2613 ;;		_TMR0_Initialize
  2614 ;; This function uses a non-reentrant model
  2615 ;;
  2616                           
  2617                           	psect	text16
  2618   001E8C                     __ptext16:
  2619                           	callstack 0
  2620   001E8C                     _TMR0_SetInterruptHandler:
  2621                           	callstack 24
  2622                           
  2623                           ;mcc_generated_files/tmr0.c: 150:     TMR0_InterruptHandler = InterruptHandler;
  2624                           
  2625                           ;incstack = 0
  2626   001E8C  C007  F049         	movff	TMR0_SetInterruptHandler@InterruptHandler,_TMR0_InterruptHandler
  2627   001E90  C008  F04A         	movff	TMR0_SetInterruptHandler@InterruptHandler+1,_TMR0_InterruptHandler+1
  2628   001E94  0012               	return		;funcret
  2629   001E96                     __end_of_TMR0_SetInterruptHandler:
  2630                           	callstack 0
  2631                           
  2632 ;; *************** function _PIN_MANAGER_Initialize *****************
  2633 ;; Defined at:
  2634 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
  2635 ;; Parameters:    Size  Location     Type
  2636 ;;		None
  2637 ;; Auto vars:     Size  Location     Type
  2638 ;;		None
  2639 ;; Return value:  Size  Location     Type
  2640 ;;                  1    wreg      void 
  2641 ;; Registers used:
  2642 ;;		wreg, status,2
  2643 ;; Tracked objects:
  2644 ;;		On entry : 0/0
  2645 ;;		On exit  : 0/0
  2646 ;;		Unchanged: 0/0
  2647 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2648 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2649 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2650 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2651 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2652 ;;Total ram usage:        0 bytes
  2653 ;; Hardware stack levels used: 1
  2654 ;; Hardware stack levels required when called: 4
  2655 ;; This function calls:
  2656 ;;		Nothing
  2657 ;; This function is called by:
  2658 ;;		_SYSTEM_Initialize
  2659 ;; This function uses a non-reentrant model
  2660 ;;
  2661                           
  2662                           	psect	text17
  2663   001CCA                     __ptext17:
  2664                           	callstack 0
  2665   001CCA                     _PIN_MANAGER_Initialize:
  2666                           	callstack 25
  2667                           
  2668                           ;mcc_generated_files/pin_manager.c: 60:     LATA = 0x00;
  2669                           
  2670                           ;incstack = 0
  2671   001CCA  0E00               	movlw	0
  2672   001CCC  6E89               	movwf	137,c	;volatile
  2673                           
  2674                           ;mcc_generated_files/pin_manager.c: 61:     LATB = 0x00;
  2675   001CCE  0E00               	movlw	0
  2676   001CD0  6E8A               	movwf	138,c	;volatile
  2677                           
  2678                           ;mcc_generated_files/pin_manager.c: 62:     LATC = 0x00;
  2679   001CD2  0E00               	movlw	0
  2680   001CD4  6E8B               	movwf	139,c	;volatile
  2681                           
  2682                           ;mcc_generated_files/pin_manager.c: 67:     TRISA = 0xFC;
  2683   001CD6  0EFC               	movlw	252
  2684   001CD8  6E92               	movwf	146,c	;volatile
  2685                           
  2686                           ;mcc_generated_files/pin_manager.c: 68:     TRISB = 0xFF;
  2687   001CDA  6893               	setf	147,c	;volatile
  2688                           
  2689                           ;mcc_generated_files/pin_manager.c: 69:     TRISC = 0xBF;
  2690   001CDC  0EBF               	movlw	191
  2691   001CDE  6E94               	movwf	148,c	;volatile
  2692                           
  2693                           ;mcc_generated_files/pin_manager.c: 74:     ANSEL = 0x13;
  2694   001CE0  0E13               	movlw	19
  2695   001CE2  6E7E               	movwf	126,c	;volatile
  2696                           
  2697                           ;mcc_generated_files/pin_manager.c: 75:     ANSELH = 0x1F;
  2698   001CE4  0E1F               	movlw	31
  2699   001CE6  6E7F               	movwf	127,c	;volatile
  2700                           
  2701                           ;mcc_generated_files/pin_manager.c: 80:     WPUB = 0x00;
  2702   001CE8  0E00               	movlw	0
  2703   001CEA  6E7C               	movwf	124,c	;volatile
  2704                           
  2705                           ;mcc_generated_files/pin_manager.c: 81:     INTCON2bits.nRBPU = 1;
  2706   001CEC  8EF1               	bsf	241,7,c	;volatile
  2707   001CEE  0012               	return		;funcret
  2708   001CF0                     __end_of_PIN_MANAGER_Initialize:
  2709                           	callstack 0
  2710                           
  2711 ;; *************** function _OSCILLATOR_Initialize *****************
  2712 ;; Defined at:
  2713 ;;		line 61 in file "mcc_generated_files/mcc.c"
  2714 ;; Parameters:    Size  Location     Type
  2715 ;;		None
  2716 ;; Auto vars:     Size  Location     Type
  2717 ;;		None
  2718 ;; Return value:  Size  Location     Type
  2719 ;;                  1    wreg      void 
  2720 ;; Registers used:
  2721 ;;		wreg, status,2
  2722 ;; Tracked objects:
  2723 ;;		On entry : 0/0
  2724 ;;		On exit  : 0/0
  2725 ;;		Unchanged: 0/0
  2726 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2727 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2728 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2729 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2730 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2731 ;;Total ram usage:        0 bytes
  2732 ;; Hardware stack levels used: 1
  2733 ;; Hardware stack levels required when called: 4
  2734 ;; This function calls:
  2735 ;;		Nothing
  2736 ;; This function is called by:
  2737 ;;		_SYSTEM_Initialize
  2738 ;; This function uses a non-reentrant model
  2739 ;;
  2740                           
  2741                           	psect	text18
  2742   001E96                     __ptext18:
  2743                           	callstack 0
  2744   001E96                     _OSCILLATOR_Initialize:
  2745                           	callstack 25
  2746                           
  2747                           ;mcc_generated_files/mcc.c: 64:     OSCCON = 0x60;
  2748                           
  2749                           ;incstack = 0
  2750   001E96  0E60               	movlw	96
  2751   001E98  6ED3               	movwf	211,c	;volatile
  2752                           
  2753                           ;mcc_generated_files/mcc.c: 66:     OSCTUNE = 0x00;
  2754   001E9A  0E00               	movlw	0
  2755   001E9C  6E9B               	movwf	155,c	;volatile
  2756   001E9E  0012               	return		;funcret
  2757   001EA0                     __end_of_OSCILLATOR_Initialize:
  2758                           	callstack 0
  2759                           
  2760 ;; *************** function _INTERRUPT_Initialize *****************
  2761 ;; Defined at:
  2762 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  2763 ;; Parameters:    Size  Location     Type
  2764 ;;		None
  2765 ;; Auto vars:     Size  Location     Type
  2766 ;;		None
  2767 ;; Return value:  Size  Location     Type
  2768 ;;                  1    wreg      void 
  2769 ;; Registers used:
  2770 ;;		None
  2771 ;; Tracked objects:
  2772 ;;		On entry : 0/0
  2773 ;;		On exit  : 0/0
  2774 ;;		Unchanged: 0/0
  2775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2776 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2777 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2778 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2779 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2780 ;;Total ram usage:        0 bytes
  2781 ;; Hardware stack levels used: 1
  2782 ;; Hardware stack levels required when called: 4
  2783 ;; This function calls:
  2784 ;;		Nothing
  2785 ;; This function is called by:
  2786 ;;		_SYSTEM_Initialize
  2787 ;; This function uses a non-reentrant model
  2788 ;;
  2789                           
  2790                           	psect	text19
  2791   001F4C                     __ptext19:
  2792                           	callstack 0
  2793   001F4C                     _INTERRUPT_Initialize:
  2794                           	callstack 25
  2795                           
  2796                           ;mcc_generated_files/interrupt_manager.c: 55:     RCONbits.IPEN = 0;
  2797                           
  2798                           ;incstack = 0
  2799   001F4C  9ED0               	bcf	208,7,c	;volatile
  2800   001F4E  0012               	return		;funcret
  2801   001F50                     __end_of_INTERRUPT_Initialize:
  2802                           	callstack 0
  2803                           
  2804 ;; *************** function _I2C_Initialize *****************
  2805 ;; Defined at:
  2806 ;;		line 167 in file "mcc_generated_files/i2c_master.c"
  2807 ;; Parameters:    Size  Location     Type
  2808 ;;		None
  2809 ;; Auto vars:     Size  Location     Type
  2810 ;;		None
  2811 ;; Return value:  Size  Location     Type
  2812 ;;                  1    wreg      void 
  2813 ;; Registers used:
  2814 ;;		wreg, status,2
  2815 ;; Tracked objects:
  2816 ;;		On entry : 0/0
  2817 ;;		On exit  : 0/0
  2818 ;;		Unchanged: 0/0
  2819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2820 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2821 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2822 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2823 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2824 ;;Total ram usage:        0 bytes
  2825 ;; Hardware stack levels used: 1
  2826 ;; Hardware stack levels required when called: 4
  2827 ;; This function calls:
  2828 ;;		Nothing
  2829 ;; This function is called by:
  2830 ;;		_SYSTEM_Initialize
  2831 ;; This function uses a non-reentrant model
  2832 ;;
  2833                           
  2834                           	psect	text20
  2835   001DF4                     __ptext20:
  2836                           	callstack 0
  2837   001DF4                     _I2C_Initialize:
  2838                           	callstack 25
  2839                           
  2840                           ;mcc_generated_files/i2c_master.c: 169:     SSPSTAT = 0x00;
  2841                           
  2842                           ;incstack = 0
  2843   001DF4  0E00               	movlw	0
  2844   001DF6  6EC7               	movwf	199,c	;volatile
  2845                           
  2846                           ;mcc_generated_files/i2c_master.c: 170:     SSPCON1 = 0x08;
  2847   001DF8  0E08               	movlw	8
  2848   001DFA  6EC6               	movwf	198,c	;volatile
  2849                           
  2850                           ;mcc_generated_files/i2c_master.c: 171:     SSPCON2 = 0x00;
  2851   001DFC  0E00               	movlw	0
  2852   001DFE  6EC5               	movwf	197,c	;volatile
  2853                           
  2854                           ;mcc_generated_files/i2c_master.c: 172:     SSPADD = 0x13;
  2855   001E00  0E13               	movlw	19
  2856   001E02  6EC8               	movwf	200,c	;volatile
  2857                           
  2858                           ;mcc_generated_files/i2c_master.c: 173:     SSPCON1bits.SSPEN = 0;
  2859   001E04  9AC6               	bcf	198,5,c	;volatile
  2860   001E06  0012               	return		;funcret
  2861   001E08                     __end_of_I2C_Initialize:
  2862                           	callstack 0
  2863                           
  2864 ;; *************** function _EUSART_Initialize *****************
  2865 ;; Defined at:
  2866 ;;		line 88 in file "mcc_generated_files/eusart.c"
  2867 ;; Parameters:    Size  Location     Type
  2868 ;;		None
  2869 ;; Auto vars:     Size  Location     Type
  2870 ;;		None
  2871 ;; Return value:  Size  Location     Type
  2872 ;;                  1    wreg      void 
  2873 ;; Registers used:
  2874 ;;		wreg, status,2, status,0, cstack
  2875 ;; Tracked objects:
  2876 ;;		On entry : 0/0
  2877 ;;		On exit  : 0/0
  2878 ;;		Unchanged: 0/0
  2879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2880 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2881 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2882 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2883 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2884 ;;Total ram usage:        0 bytes
  2885 ;; Hardware stack levels used: 1
  2886 ;; Hardware stack levels required when called: 5
  2887 ;; This function calls:
  2888 ;;		_EUSART_SetErrorHandler
  2889 ;;		_EUSART_SetFramingErrorHandler
  2890 ;;		_EUSART_SetOverrunErrorHandler
  2891 ;;		_EUSART_SetRxInterruptHandler
  2892 ;;		_EUSART_SetTxInterruptHandler
  2893 ;; This function is called by:
  2894 ;;		_SYSTEM_Initialize
  2895 ;; This function uses a non-reentrant model
  2896 ;;
  2897                           
  2898                           	psect	text21
  2899   001652                     __ptext21:
  2900                           	callstack 0
  2901   001652                     _EUSART_Initialize:
  2902                           	callstack 24
  2903                           
  2904                           ;mcc_generated_files/eusart.c: 91:     PIE1bits.RC1IE = 0;
  2905                           
  2906                           ;incstack = 0
  2907   001652  9A9D               	bcf	157,5,c	;volatile
  2908                           
  2909                           ;mcc_generated_files/eusart.c: 92:     EUSART_SetRxInterruptHandler(EUSART_Receive_ISR);
  2910   001654  0E30               	movlw	low _EUSART_Receive_ISR
  2911   001656  6E07               	movwf	EUSART_SetRxInterruptHandler@interruptHandler^0,c
  2912   001658  0E14               	movlw	high _EUSART_Receive_ISR
  2913   00165A  6E08               	movwf	(EUSART_SetRxInterruptHandler@interruptHandler+1)^0,c
  2914   00165C  EC55  F00F         	call	_EUSART_SetRxInterruptHandler	;wreg free
  2915                           
  2916                           ;mcc_generated_files/eusart.c: 93:     PIE1bits.TX1IE = 0;
  2917   001660  989D               	bcf	157,4,c	;volatile
  2918                           
  2919                           ;mcc_generated_files/eusart.c: 94:     EUSART_SetTxInterruptHandler(EUSART_Transmit_ISR)
      +                          ;
  2920   001662  0E52               	movlw	low _EUSART_Transmit_ISR
  2921   001664  6E07               	movwf	EUSART_SetTxInterruptHandler@interruptHandler^0,c
  2922   001666  0E1C               	movlw	high _EUSART_Transmit_ISR
  2923   001668  6E08               	movwf	(EUSART_SetTxInterruptHandler@interruptHandler+1)^0,c
  2924   00166A  EC50  F00F         	call	_EUSART_SetTxInterruptHandler	;wreg free
  2925                           
  2926                           ;mcc_generated_files/eusart.c: 98:     BAUDCON = 0x08;
  2927   00166E  0E08               	movlw	8
  2928   001670  6EB8               	movwf	184,c	;volatile
  2929                           
  2930                           ;mcc_generated_files/eusart.c: 101:     RCSTA = 0x90;
  2931   001672  0E90               	movlw	144
  2932   001674  6EAB               	movwf	171,c	;volatile
  2933                           
  2934                           ;mcc_generated_files/eusart.c: 104:     TXSTA = 0x24;
  2935   001676  0E24               	movlw	36
  2936   001678  6EAC               	movwf	172,c	;volatile
  2937                           
  2938                           ;mcc_generated_files/eusart.c: 107:     SPBRG = 0xCF;
  2939   00167A  0ECF               	movlw	207
  2940   00167C  6EAF               	movwf	175,c	;volatile
  2941                           
  2942                           ;mcc_generated_files/eusart.c: 110:     SPBRGH = 0x00;
  2943   00167E  0E00               	movlw	0
  2944   001680  6EB0               	movwf	176,c	;volatile
  2945                           
  2946                           ;mcc_generated_files/eusart.c: 113:     EUSART_SetFramingErrorHandler(EUSART_DefaultFram
      +                          ingErrorHandler);
  2947   001682  0E8A               	movlw	low _EUSART_DefaultFramingErrorHandler
  2948   001684  6E07               	movwf	EUSART_SetFramingErrorHandler@interruptHandler^0,c
  2949   001686  0E1F               	movlw	high _EUSART_DefaultFramingErrorHandler
  2950   001688  6E08               	movwf	(EUSART_SetFramingErrorHandler@interruptHandler+1)^0,c
  2951   00168A  EC5F  F00F         	call	_EUSART_SetFramingErrorHandler	;wreg free
  2952                           
  2953                           ;mcc_generated_files/eusart.c: 114:     EUSART_SetOverrunErrorHandler(EUSART_DefaultOver
      +                          runErrorHandler);
  2954   00168E  0E40               	movlw	low _EUSART_DefaultOverrunErrorHandler
  2955   001690  6E07               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler^0,c
  2956   001692  0E1F               	movlw	high _EUSART_DefaultOverrunErrorHandler
  2957   001694  6E08               	movwf	(EUSART_SetOverrunErrorHandler@interruptHandler+1)^0,c
  2958   001696  EC5A  F00F         	call	_EUSART_SetOverrunErrorHandler	;wreg free
  2959                           
  2960                           ;mcc_generated_files/eusart.c: 115:     EUSART_SetErrorHandler(EUSART_DefaultErrorHandle
      +                          r);
  2961   00169A  0E46               	movlw	low _EUSART_DefaultErrorHandler
  2962   00169C  6E07               	movwf	EUSART_SetErrorHandler@interruptHandler^0,c
  2963   00169E  0E1F               	movlw	high _EUSART_DefaultErrorHandler
  2964   0016A0  6E08               	movwf	(EUSART_SetErrorHandler@interruptHandler+1)^0,c
  2965   0016A2  EC64  F00F         	call	_EUSART_SetErrorHandler	;wreg free
  2966                           
  2967                           ;mcc_generated_files/eusart.c: 117:     eusartRxLastError.status = 0;
  2968   0016A6  0E00               	movlw	0
  2969   0016A8  6E34               	movwf	_eusartRxLastError^0,c	;volatile
  2970                           
  2971                           ;mcc_generated_files/eusart.c: 120:     eusartTxHead = 0;
  2972   0016AA  0E00               	movlw	0
  2973   0016AC  6E39               	movwf	_eusartTxHead^0,c	;volatile
  2974                           
  2975                           ;mcc_generated_files/eusart.c: 121:     eusartTxTail = 0;
  2976   0016AE  0E00               	movlw	0
  2977   0016B0  6E38               	movwf	_eusartTxTail^0,c	;volatile
  2978                           
  2979                           ;mcc_generated_files/eusart.c: 122:     eusartTxBufferRemaining = sizeof(eusartTxBuffer)
      +                          ;
  2980   0016B2  0E08               	movlw	8
  2981   0016B4  6E4B               	movwf	_eusartTxBufferRemaining^0,c	;volatile
  2982                           
  2983                           ;mcc_generated_files/eusart.c: 124:     eusartRxHead = 0;
  2984   0016B6  0E00               	movlw	0
  2985   0016B8  6E37               	movwf	_eusartRxHead^0,c	;volatile
  2986                           
  2987                           ;mcc_generated_files/eusart.c: 125:     eusartRxTail = 0;
  2988   0016BA  0E00               	movlw	0
  2989   0016BC  6E36               	movwf	_eusartRxTail^0,c	;volatile
  2990                           
  2991                           ;mcc_generated_files/eusart.c: 126:     eusartRxCount = 0;
  2992   0016BE  0E00               	movlw	0
  2993   0016C0  6E35               	movwf	_eusartRxCount^0,c	;volatile
  2994                           
  2995                           ;mcc_generated_files/eusart.c: 129:     PIE1bits.RC1IE = 1;
  2996   0016C2  8A9D               	bsf	157,5,c	;volatile
  2997   0016C4  0012               	return		;funcret
  2998   0016C6                     __end_of_EUSART_Initialize:
  2999                           	callstack 0
  3000                           
  3001 ;; *************** function _EUSART_SetTxInterruptHandler *****************
  3002 ;; Defined at:
  3003 ;;		line 276 in file "mcc_generated_files/eusart.c"
  3004 ;; Parameters:    Size  Location     Type
  3005 ;;  interruptHan    2    6[COMRAM] PTR FTN()void 
  3006 ;;		 -> USART_TXC_vect(1), EUSART_Transmit_ISR(1), 
  3007 ;; Auto vars:     Size  Location     Type
  3008 ;;		None
  3009 ;; Return value:  Size  Location     Type
  3010 ;;                  1    wreg      void 
  3011 ;; Registers used:
  3012 ;;		wreg, status,2, status,0
  3013 ;; Tracked objects:
  3014 ;;		On entry : 0/0
  3015 ;;		On exit  : 0/0
  3016 ;;		Unchanged: 0/0
  3017 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3018 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3019 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3020 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3021 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3022 ;;Total ram usage:        2 bytes
  3023 ;; Hardware stack levels used: 1
  3024 ;; Hardware stack levels required when called: 4
  3025 ;; This function calls:
  3026 ;;		Nothing
  3027 ;; This function is called by:
  3028 ;;		_EUSART_Initialize
  3029 ;;		_main
  3030 ;; This function uses a non-reentrant model
  3031 ;;
  3032                           
  3033                           	psect	text22
  3034   001EA0                     __ptext22:
  3035                           	callstack 0
  3036   001EA0                     _EUSART_SetTxInterruptHandler:
  3037                           	callstack 24
  3038                           
  3039                           ;mcc_generated_files/eusart.c: 277:     EUSART_TxDefaultInterruptHandler = interruptHand
      +                          ler;
  3040                           
  3041                           ;incstack = 0
  3042   001EA0  C007  F047         	movff	EUSART_SetTxInterruptHandler@interruptHandler,_EUSART_TxDefaultInterruptHandler
  3043   001EA4  C008  F048         	movff	EUSART_SetTxInterruptHandler@interruptHandler+1,_EUSART_TxDefaultInterruptHandler
      +                          +1
  3044   001EA8  0012               	return		;funcret
  3045   001EAA                     __end_of_EUSART_SetTxInterruptHandler:
  3046                           	callstack 0
  3047                           
  3048 ;; *************** function _EUSART_SetRxInterruptHandler *****************
  3049 ;; Defined at:
  3050 ;;		line 280 in file "mcc_generated_files/eusart.c"
  3051 ;; Parameters:    Size  Location     Type
  3052 ;;  interruptHan    2    6[COMRAM] PTR FTN()void 
  3053 ;;		 -> USART_RXC_vect(1), EUSART_Receive_ISR(1), 
  3054 ;; Auto vars:     Size  Location     Type
  3055 ;;		None
  3056 ;; Return value:  Size  Location     Type
  3057 ;;                  1    wreg      void 
  3058 ;; Registers used:
  3059 ;;		wreg, status,2, status,0
  3060 ;; Tracked objects:
  3061 ;;		On entry : 0/0
  3062 ;;		On exit  : 0/0
  3063 ;;		Unchanged: 0/0
  3064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3065 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3066 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3067 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3068 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3069 ;;Total ram usage:        2 bytes
  3070 ;; Hardware stack levels used: 1
  3071 ;; Hardware stack levels required when called: 4
  3072 ;; This function calls:
  3073 ;;		Nothing
  3074 ;; This function is called by:
  3075 ;;		_EUSART_Initialize
  3076 ;;		_main
  3077 ;; This function uses a non-reentrant model
  3078 ;;
  3079                           
  3080                           	psect	text23
  3081   001EAA                     __ptext23:
  3082                           	callstack 0
  3083   001EAA                     _EUSART_SetRxInterruptHandler:
  3084                           	callstack 24
  3085                           
  3086                           ;mcc_generated_files/eusart.c: 281:     EUSART_RxDefaultInterruptHandler = interruptHand
      +                          ler;
  3087                           
  3088                           ;incstack = 0
  3089   001EAA  C007  F045         	movff	EUSART_SetRxInterruptHandler@interruptHandler,_EUSART_RxDefaultInterruptHandler
  3090   001EAE  C008  F046         	movff	EUSART_SetRxInterruptHandler@interruptHandler+1,_EUSART_RxDefaultInterruptHandler
      +                          +1
  3091   001EB2  0012               	return		;funcret
  3092   001EB4                     __end_of_EUSART_SetRxInterruptHandler:
  3093                           	callstack 0
  3094                           
  3095 ;; *************** function _EUSART_SetOverrunErrorHandler *****************
  3096 ;; Defined at:
  3097 ;;		line 268 in file "mcc_generated_files/eusart.c"
  3098 ;; Parameters:    Size  Location     Type
  3099 ;;  interruptHan    2    6[COMRAM] PTR FTN()void 
  3100 ;;		 -> EUSART_DefaultOverrunErrorHandler(1), 
  3101 ;; Auto vars:     Size  Location     Type
  3102 ;;		None
  3103 ;; Return value:  Size  Location     Type
  3104 ;;                  1    wreg      void 
  3105 ;; Registers used:
  3106 ;;		wreg, status,2, status,0
  3107 ;; Tracked objects:
  3108 ;;		On entry : 0/0
  3109 ;;		On exit  : 0/0
  3110 ;;		Unchanged: 0/0
  3111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3112 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3113 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3114 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3115 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3116 ;;Total ram usage:        2 bytes
  3117 ;; Hardware stack levels used: 1
  3118 ;; Hardware stack levels required when called: 4
  3119 ;; This function calls:
  3120 ;;		Nothing
  3121 ;; This function is called by:
  3122 ;;		_EUSART_Initialize
  3123 ;; This function uses a non-reentrant model
  3124 ;;
  3125                           
  3126                           	psect	text24
  3127   001EB4                     __ptext24:
  3128                           	callstack 0
  3129   001EB4                     _EUSART_SetOverrunErrorHandler:
  3130                           	callstack 24
  3131                           
  3132                           ;mcc_generated_files/eusart.c: 269:     EUSART_OverrunErrorHandler = interruptHandler;
  3133                           
  3134                           ;incstack = 0
  3135   001EB4  C007  F0DF         	movff	EUSART_SetOverrunErrorHandler@interruptHandler,_EUSART_OverrunErrorHandler
  3136   001EB8  C008  F0E0         	movff	EUSART_SetOverrunErrorHandler@interruptHandler+1,_EUSART_OverrunErrorHandler+1
  3137   001EBC  0012               	return		;funcret
  3138   001EBE                     __end_of_EUSART_SetOverrunErrorHandler:
  3139                           	callstack 0
  3140                           
  3141 ;; *************** function _EUSART_SetFramingErrorHandler *****************
  3142 ;; Defined at:
  3143 ;;		line 264 in file "mcc_generated_files/eusart.c"
  3144 ;; Parameters:    Size  Location     Type
  3145 ;;  interruptHan    2    6[COMRAM] PTR FTN()void 
  3146 ;;		 -> EUSART_DefaultFramingErrorHandler(1), 
  3147 ;; Auto vars:     Size  Location     Type
  3148 ;;		None
  3149 ;; Return value:  Size  Location     Type
  3150 ;;                  1    wreg      void 
  3151 ;; Registers used:
  3152 ;;		wreg, status,2, status,0
  3153 ;; Tracked objects:
  3154 ;;		On entry : 0/0
  3155 ;;		On exit  : 0/0
  3156 ;;		Unchanged: 0/0
  3157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3158 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3159 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3160 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3161 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3162 ;;Total ram usage:        2 bytes
  3163 ;; Hardware stack levels used: 1
  3164 ;; Hardware stack levels required when called: 4
  3165 ;; This function calls:
  3166 ;;		Nothing
  3167 ;; This function is called by:
  3168 ;;		_EUSART_Initialize
  3169 ;; This function uses a non-reentrant model
  3170 ;;
  3171                           
  3172                           	psect	text25
  3173   001EBE                     __ptext25:
  3174                           	callstack 0
  3175   001EBE                     _EUSART_SetFramingErrorHandler:
  3176                           	callstack 24
  3177                           
  3178                           ;mcc_generated_files/eusart.c: 265:     EUSART_FramingErrorHandler = interruptHandler;
  3179                           
  3180                           ;incstack = 0
  3181   001EBE  C007  F043         	movff	EUSART_SetFramingErrorHandler@interruptHandler,_EUSART_FramingErrorHandler
  3182   001EC2  C008  F044         	movff	EUSART_SetFramingErrorHandler@interruptHandler+1,_EUSART_FramingErrorHandler+1
  3183   001EC6  0012               	return		;funcret
  3184   001EC8                     __end_of_EUSART_SetFramingErrorHandler:
  3185                           	callstack 0
  3186                           
  3187 ;; *************** function _EUSART_SetErrorHandler *****************
  3188 ;; Defined at:
  3189 ;;		line 272 in file "mcc_generated_files/eusart.c"
  3190 ;; Parameters:    Size  Location     Type
  3191 ;;  interruptHan    2    6[COMRAM] PTR FTN()void 
  3192 ;;		 -> EUSART_DefaultErrorHandler(1), 
  3193 ;; Auto vars:     Size  Location     Type
  3194 ;;		None
  3195 ;; Return value:  Size  Location     Type
  3196 ;;                  1    wreg      void 
  3197 ;; Registers used:
  3198 ;;		wreg, status,2, status,0
  3199 ;; Tracked objects:
  3200 ;;		On entry : 0/0
  3201 ;;		On exit  : 0/0
  3202 ;;		Unchanged: 0/0
  3203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3204 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3205 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3206 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3207 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3208 ;;Total ram usage:        2 bytes
  3209 ;; Hardware stack levels used: 1
  3210 ;; Hardware stack levels required when called: 4
  3211 ;; This function calls:
  3212 ;;		Nothing
  3213 ;; This function is called by:
  3214 ;;		_EUSART_Initialize
  3215 ;; This function uses a non-reentrant model
  3216 ;;
  3217                           
  3218                           	psect	text26
  3219   001EC8                     __ptext26:
  3220                           	callstack 0
  3221   001EC8                     _EUSART_SetErrorHandler:
  3222                           	callstack 24
  3223                           
  3224                           ;mcc_generated_files/eusart.c: 273:     EUSART_ErrorHandler = interruptHandler;
  3225                           
  3226                           ;incstack = 0
  3227   001EC8  C007  F0DD         	movff	EUSART_SetErrorHandler@interruptHandler,_EUSART_ErrorHandler
  3228   001ECC  C008  F0DE         	movff	EUSART_SetErrorHandler@interruptHandler+1,_EUSART_ErrorHandler+1
  3229   001ED0  0012               	return		;funcret
  3230   001ED2                     __end_of_EUSART_SetErrorHandler:
  3231                           	callstack 0
  3232                           
  3233 ;; *************** function _I2C_WriteNBytes *****************
  3234 ;; Defined at:
  3235 ;;		line 111 in file "mcc_generated_files/examples/i2c_master_example.c"
  3236 ;; Parameters:    Size  Location     Type
  3237 ;;  address         1    wreg     unsigned char 
  3238 ;;  data            2   23[COMRAM] PTR unsigned char 
  3239 ;;		 -> main@red(3), main@dat(3), 
  3240 ;;  len             2   25[COMRAM] unsigned int 
  3241 ;; Auto vars:     Size  Location     Type
  3242 ;;  address         1   27[COMRAM] unsigned char 
  3243 ;; Return value:  Size  Location     Type
  3244 ;;                  1    wreg      void 
  3245 ;; Registers used:
  3246 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pcl, pclath, pclatu, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3247 ;; Tracked objects:
  3248 ;;		On entry : 0/0
  3249 ;;		On exit  : 0/0
  3250 ;;		Unchanged: 0/0
  3251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3252 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3253 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3254 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3255 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3256 ;;Total ram usage:        5 bytes
  3257 ;; Hardware stack levels used: 1
  3258 ;; Hardware stack levels required when called: 12
  3259 ;; This function calls:
  3260 ;;		_I2C_Close
  3261 ;;		_I2C_MasterWrite
  3262 ;;		_I2C_Open
  3263 ;;		_I2C_SetAddressNackCallback
  3264 ;;		_I2C_SetBuffer
  3265 ;; This function is called by:
  3266 ;;		_main
  3267 ;; This function uses a non-reentrant model
  3268 ;;
  3269                           
  3270                           	psect	text27
  3271   001A00                     __ptext27:
  3272                           	callstack 0
  3273   001A00                     _I2C_WriteNBytes:
  3274                           	callstack 18
  3275                           
  3276                           ;incstack = 0
  3277                           ;I2C_WriteNBytes@address stored from wreg
  3278   001A00  6E1C               	movwf	I2C_WriteNBytes@address^0,c
  3279   001A02                     
  3280                           ;mcc_generated_files/examples/i2c_master_example.c: 111: void I2C_WriteNBytes(i2c_addres
      +                          s_t address, uint8_t* data, size_t len);mcc_generated_files/examples/i2c_master_example.
      +                          c: 112: {;mcc_generated_files/examples/i2c_master_example.c: 113:     while(!I2C_Open(ad
      +                          dress));
  3281   001A02  501C               	movf	I2C_WriteNBytes@address^0,w,c
  3282   001A04  ECA9  F00A         	call	_I2C_Open
  3283   001A08  0900               	iorlw	0
  3284   001A0A  B4D8               	btfsc	status,2,c
  3285   001A0C  D7FA               	goto	l4591
  3286                           
  3287                           ;mcc_generated_files/examples/i2c_master_example.c: 114:     I2C_SetBuffer(data,len);
  3288   001A0E  C018  F007         	movff	I2C_WriteNBytes@data,I2C_SetBuffer@buffer
  3289   001A12  C019  F008         	movff	I2C_WriteNBytes@data+1,I2C_SetBuffer@buffer+1
  3290   001A16  C01A  F009         	movff	I2C_WriteNBytes@len,I2C_SetBuffer@bufferSize
  3291   001A1A  C01B  F00A         	movff	I2C_WriteNBytes@len+1,I2C_SetBuffer@bufferSize+1
  3292   001A1E  ECC9  F00E         	call	_I2C_SetBuffer	;wreg free
  3293                           
  3294                           ;mcc_generated_files/examples/i2c_master_example.c: 115:     I2C_SetAddressNackCallback(
      +                          ((void*)0),((void*)0));
  3295   001A22  0E00               	movlw	0
  3296   001A24  6E0C               	movwf	I2C_SetAddressNackCallback@cb^0,c
  3297   001A26  0E00               	movlw	0
  3298   001A28  6E0D               	movwf	(I2C_SetAddressNackCallback@cb+1)^0,c
  3299   001A2A  0E00               	movlw	0
  3300   001A2C  6E0E               	movwf	I2C_SetAddressNackCallback@ptr^0,c
  3301   001A2E  0E00               	movlw	0
  3302   001A30  6E0F               	movwf	(I2C_SetAddressNackCallback@ptr+1)^0,c
  3303   001A32  ECD6  F00E         	call	_I2C_SetAddressNackCallback	;wreg free
  3304                           
  3305                           ;mcc_generated_files/examples/i2c_master_example.c: 116:     I2C_MasterWrite();
  3306   001A36  EC69  F00F         	call	_I2C_MasterWrite	;wreg free
  3307   001A3A                     l4601:
  3308   001A3A  EC9B  F00E         	call	_I2C_Close	;wreg free
  3309   001A3E  06E8               	decf	wreg,f,c
  3310   001A40  A4D8               	btfss	status,2,c
  3311   001A42  0012               	return	
  3312   001A44  D7FA               	goto	l4601
  3313   001A46                     __end_of_I2C_WriteNBytes:
  3314                           	callstack 0
  3315                           
  3316 ;; *************** function _I2C_SetAddressNackCallback *****************
  3317 ;; Defined at:
  3318 ;;		line 283 in file "mcc_generated_files/i2c_master.c"
  3319 ;; Parameters:    Size  Location     Type
  3320 ;;  cb              2   11[COMRAM] PTR FTN(PTR void ,)enum 
  3321 ;;		 -> Absolute function(1), 
  3322 ;;  ptr             2   13[COMRAM] PTR void 
  3323 ;;		 -> NULL(0), 
  3324 ;; Auto vars:     Size  Location     Type
  3325 ;;		None
  3326 ;; Return value:  Size  Location     Type
  3327 ;;                  1    wreg      void 
  3328 ;; Registers used:
  3329 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3330 ;; Tracked objects:
  3331 ;;		On entry : 0/0
  3332 ;;		On exit  : 0/0
  3333 ;;		Unchanged: 0/0
  3334 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3335 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3336 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3337 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3338 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3339 ;;Total ram usage:        4 bytes
  3340 ;; Hardware stack levels used: 1
  3341 ;; Hardware stack levels required when called: 5
  3342 ;; This function calls:
  3343 ;;		_I2C_SetCallback
  3344 ;; This function is called by:
  3345 ;;		_I2C_WriteNBytes
  3346 ;;		_I2C_Read1ByteRegister
  3347 ;;		_I2C_Read2ByteRegister
  3348 ;;		_I2C_Write1ByteRegister
  3349 ;;		_I2C_Write2ByteRegister
  3350 ;;		_I2C_ReadDataBlock
  3351 ;; This function uses a non-reentrant model
  3352 ;;
  3353                           
  3354                           	psect	text28
  3355   001DAC                     __ptext28:
  3356                           	callstack 0
  3357   001DAC                     _I2C_SetAddressNackCallback:
  3358                           	callstack 24
  3359                           
  3360                           ;mcc_generated_files/i2c_master.c: 283: void I2C_SetAddressNackCallback(i2c_callback_t c
      +                          b, void *ptr);mcc_generated_files/i2c_master.c: 284: {;mcc_generated_files/i2c_master.c:
      +                           285:     I2C_SetCallback(I2C_ADDR_NACK, cb, ptr);
  3361                           
  3362                           ;incstack = 0
  3363   001DAC  C00C  F007         	movff	I2C_SetAddressNackCallback@cb,I2C_SetCallback@cb
  3364   001DB0  C00D  F008         	movff	I2C_SetAddressNackCallback@cb+1,I2C_SetCallback@cb+1
  3365   001DB4  C00E  F009         	movff	I2C_SetAddressNackCallback@ptr,I2C_SetCallback@ptr
  3366   001DB8  C00F  F00A         	movff	I2C_SetAddressNackCallback@ptr+1,I2C_SetCallback@ptr+1
  3367   001DBC  0E02               	movlw	2
  3368   001DBE  EC9C  F00B         	call	_I2C_SetCallback
  3369   001DC2  0012               	return		;funcret
  3370   001DC4                     __end_of_I2C_SetAddressNackCallback:
  3371                           	callstack 0
  3372                           
  3373 ;; *************** function _I2C_MasterWrite *****************
  3374 ;; Defined at:
  3375 ;;		line 251 in file "mcc_generated_files/i2c_master.c"
  3376 ;; Parameters:    Size  Location     Type
  3377 ;;		None
  3378 ;; Auto vars:     Size  Location     Type
  3379 ;;		None
  3380 ;; Return value:  Size  Location     Type
  3381 ;;                  1    wreg      enum E355
  3382 ;; Registers used:
  3383 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pcl, pclath, pclatu, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3384 ;; Tracked objects:
  3385 ;;		On entry : 0/0
  3386 ;;		On exit  : 0/0
  3387 ;;		Unchanged: 0/0
  3388 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3389 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3390 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3391 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3392 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3393 ;;Total ram usage:        0 bytes
  3394 ;; Hardware stack levels used: 1
  3395 ;; Hardware stack levels required when called: 11
  3396 ;; This function calls:
  3397 ;;		_I2C_MasterOperation
  3398 ;; This function is called by:
  3399 ;;		_I2C_WriteNBytes
  3400 ;;		_I2C_Read1ByteRegister
  3401 ;;		_I2C_Read2ByteRegister
  3402 ;;		_I2C_Write1ByteRegister
  3403 ;;		_I2C_Write2ByteRegister
  3404 ;;		_I2C_ReadDataBlock
  3405 ;; This function uses a non-reentrant model
  3406 ;;
  3407                           
  3408                           	psect	text29
  3409   001ED2                     __ptext29:
  3410                           	callstack 0
  3411   001ED2                     _I2C_MasterWrite:
  3412                           	callstack 18
  3413                           
  3414                           ;mcc_generated_files/i2c_master.c: 253:     return I2C_MasterOperation(0);;	Return value
      +                           of _I2C_MasterWrite is never used
  3415                           
  3416                           ;incstack = 0
  3417   001ED2  0E00               	movlw	0
  3418   001ED4  ECBB  F00D         	call	_I2C_MasterOperation
  3419   001ED8  0012               	return		;funcret
  3420   001EDA                     __end_of_I2C_MasterWrite:
  3421                           	callstack 0
  3422                           
  3423 ;; *************** function _I2C_ReadNBytes *****************
  3424 ;; Defined at:
  3425 ;;		line 120 in file "mcc_generated_files/examples/i2c_master_example.c"
  3426 ;; Parameters:    Size  Location     Type
  3427 ;;  address         1    wreg     unsigned char 
  3428 ;;  data            2   23[COMRAM] PTR unsigned char 
  3429 ;;		 -> main@red2(3), 
  3430 ;;  len             2   25[COMRAM] unsigned int 
  3431 ;; Auto vars:     Size  Location     Type
  3432 ;;  address         1   27[COMRAM] unsigned char 
  3433 ;; Return value:  Size  Location     Type
  3434 ;;                  1    wreg      void 
  3435 ;; Registers used:
  3436 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pcl, pclath, pclatu, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3437 ;; Tracked objects:
  3438 ;;		On entry : 0/0
  3439 ;;		On exit  : 0/0
  3440 ;;		Unchanged: 0/0
  3441 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3442 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3443 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3444 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3445 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3446 ;;Total ram usage:        5 bytes
  3447 ;; Hardware stack levels used: 1
  3448 ;; Hardware stack levels required when called: 12
  3449 ;; This function calls:
  3450 ;;		_I2C_Close
  3451 ;;		_I2C_MasterRead
  3452 ;;		_I2C_Open
  3453 ;;		_I2C_SetBuffer
  3454 ;; This function is called by:
  3455 ;;		_main
  3456 ;; This function uses a non-reentrant model
  3457 ;;
  3458                           
  3459                           	psect	text30
  3460   001B44                     __ptext30:
  3461                           	callstack 0
  3462   001B44                     _I2C_ReadNBytes:
  3463                           	callstack 18
  3464                           
  3465                           ;incstack = 0
  3466                           ;I2C_ReadNBytes@address stored from wreg
  3467   001B44  6E1C               	movwf	I2C_ReadNBytes@address^0,c
  3468   001B46                     
  3469                           ;mcc_generated_files/examples/i2c_master_example.c: 120: void I2C_ReadNBytes(i2c_address
      +                          _t address, uint8_t *data, size_t len);mcc_generated_files/examples/i2c_master_example.c
      +                          : 121: {;mcc_generated_files/examples/i2c_master_example.c: 122:     while(!I2C_Open(add
      +                          ress));
  3470   001B46  501C               	movf	I2C_ReadNBytes@address^0,w,c
  3471   001B48  ECA9  F00A         	call	_I2C_Open
  3472   001B4C  0900               	iorlw	0
  3473   001B4E  B4D8               	btfsc	status,2,c
  3474   001B50  D7FA               	goto	l4603
  3475                           
  3476                           ;mcc_generated_files/examples/i2c_master_example.c: 123:     I2C_SetBuffer(data,len);
  3477   001B52  C018  F007         	movff	I2C_ReadNBytes@data,I2C_SetBuffer@buffer
  3478   001B56  C019  F008         	movff	I2C_ReadNBytes@data+1,I2C_SetBuffer@buffer+1
  3479   001B5A  C01A  F009         	movff	I2C_ReadNBytes@len,I2C_SetBuffer@bufferSize
  3480   001B5E  C01B  F00A         	movff	I2C_ReadNBytes@len+1,I2C_SetBuffer@bufferSize+1
  3481   001B62  ECC9  F00E         	call	_I2C_SetBuffer	;wreg free
  3482                           
  3483                           ;mcc_generated_files/examples/i2c_master_example.c: 124:     I2C_MasterRead();
  3484   001B66  EC6D  F00F         	call	_I2C_MasterRead	;wreg free
  3485   001B6A                     l4611:
  3486   001B6A  EC9B  F00E         	call	_I2C_Close	;wreg free
  3487   001B6E  06E8               	decf	wreg,f,c
  3488   001B70  A4D8               	btfss	status,2,c
  3489   001B72  0012               	return	
  3490   001B74  D7FA               	goto	l4611
  3491   001B76                     __end_of_I2C_ReadNBytes:
  3492                           	callstack 0
  3493                           
  3494 ;; *************** function _I2C_Open *****************
  3495 ;; Defined at:
  3496 ;;		line 176 in file "mcc_generated_files/i2c_master.c"
  3497 ;; Parameters:    Size  Location     Type
  3498 ;;  address         1    wreg     unsigned char 
  3499 ;; Auto vars:     Size  Location     Type
  3500 ;;  address         1    6[COMRAM] unsigned char 
  3501 ;;  returnValue     1    7[COMRAM] enum E355
  3502 ;; Return value:  Size  Location     Type
  3503 ;;                  1    wreg      enum E355
  3504 ;; Registers used:
  3505 ;;		wreg, status,2, status,0, cstack
  3506 ;; Tracked objects:
  3507 ;;		On entry : 0/0
  3508 ;;		On exit  : 0/0
  3509 ;;		Unchanged: 0/0
  3510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3511 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3512 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3513 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3514 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3515 ;;Total ram usage:        2 bytes
  3516 ;; Hardware stack levels used: 1
  3517 ;; Hardware stack levels required when called: 5
  3518 ;; This function calls:
  3519 ;;		_I2C_MasterClearIrq
  3520 ;;		_I2C_MasterOpen
  3521 ;; This function is called by:
  3522 ;;		_I2C_WriteNBytes
  3523 ;;		_I2C_ReadNBytes
  3524 ;;		_I2C_Read1ByteRegister
  3525 ;;		_I2C_Read2ByteRegister
  3526 ;;		_I2C_Write1ByteRegister
  3527 ;;		_I2C_Write2ByteRegister
  3528 ;;		_I2C_ReadDataBlock
  3529 ;; This function uses a non-reentrant model
  3530 ;;
  3531                           
  3532                           	psect	text31
  3533   001552                     __ptext31:
  3534                           	callstack 0
  3535   001552                     _I2C_Open:
  3536                           	callstack 24
  3537                           
  3538                           ;incstack = 0
  3539                           ;I2C_Open@address stored from wreg
  3540   001552  6E07               	movwf	I2C_Open@address^0,c
  3541                           
  3542                           ;mcc_generated_files/i2c_master.c: 176: i2c_error_t I2C_Open(i2c_address_t address);mcc_
      +                          generated_files/i2c_master.c: 177: {;mcc_generated_files/i2c_master.c: 178:     i2c_erro
      +                          r_t returnValue = I2C_BUSY;
  3543   001554  0E01               	movlw	1
  3544   001556  6E08               	movwf	I2C_Open@returnValue^0,c
  3545                           
  3546                           ;mcc_generated_files/i2c_master.c: 180:     if(!I2C_Status.inUse)
  3547   001558  0100               	movlb	0	; () banked
  3548   00155A  B583               	btfsc	(_I2C_Status+35)& (0+255),2,b
  3549   00155C  D03A               	goto	l4465
  3550                           
  3551                           ; BSR set to: 0
  3552                           ;mcc_generated_files/i2c_master.c: 181:     {;mcc_generated_files/i2c_master.c: 182:    
      +                               I2C_Status.address = address;
  3553   00155E  C007  F07C         	movff	I2C_Open@address,_I2C_Status+28
  3554                           
  3555                           ; BSR set to: 0
  3556                           ;mcc_generated_files/i2c_master.c: 183:         I2C_Status.busy = 0;
  3557   001562  9383               	bcf	(_I2C_Status+35)& (0+255),1,b
  3558                           
  3559                           ; BSR set to: 0
  3560                           ;mcc_generated_files/i2c_master.c: 184:         I2C_Status.inUse = 1;
  3561   001564  8583               	bsf	(_I2C_Status+35)& (0+255),2,b
  3562                           
  3563                           ; BSR set to: 0
  3564                           ;mcc_generated_files/i2c_master.c: 185:         I2C_Status.addressNackCheck = 0;
  3565   001566  9183               	bcf	(_I2C_Status+35)& (0+255),0,b
  3566                           
  3567                           ; BSR set to: 0
  3568                           ;mcc_generated_files/i2c_master.c: 186:         I2C_Status.state = I2C_RESET;
  3569   001568  0E0E               	movlw	14
  3570   00156A  6F81               	movwf	(_I2C_Status+33)& (0+255),b
  3571                           
  3572                           ; BSR set to: 0
  3573                           ;mcc_generated_files/i2c_master.c: 187:         I2C_Status.time_out_value = 500;
  3574   00156C  0E01               	movlw	1
  3575   00156E  6F7B               	movwf	(_I2C_Status+27)& (0+255),b
  3576   001570  0EF4               	movlw	244
  3577   001572  6F7A               	movwf	(_I2C_Status+26)& (0+255),b
  3578                           
  3579                           ; BSR set to: 0
  3580                           ;mcc_generated_files/i2c_master.c: 188:         I2C_Status.bufferFree = 1;
  3581   001574  8783               	bsf	(_I2C_Status+35)& (0+255),3,b
  3582                           
  3583                           ; BSR set to: 0
  3584                           ;mcc_generated_files/i2c_master.c: 191:         I2C_Status.callbackTable[I2C_DATA_COMPLE
      +                          TE]=I2C_CallbackReturnStop;
  3585   001576  0E60               	movlw	low _I2C_CallbackReturnStop
  3586   001578  6F60               	movwf	_I2C_Status& (0+255),b
  3587   00157A  0E1F               	movlw	high _I2C_CallbackReturnStop
  3588   00157C  6F61               	movwf	(_I2C_Status+1)& (0+255),b
  3589                           
  3590                           ; BSR set to: 0
  3591                           ;mcc_generated_files/i2c_master.c: 192:         I2C_Status.callbackPayload[I2C_DATA_COMP
      +                          LETE] = ((void*)0);
  3592   00157E  0E00               	movlw	0
  3593   001580  6F6C               	movwf	(_I2C_Status+12)& (0+255),b
  3594   001582  0E00               	movlw	0
  3595   001584  6F6D               	movwf	(_I2C_Status+13)& (0+255),b
  3596                           
  3597                           ; BSR set to: 0
  3598                           ;mcc_generated_files/i2c_master.c: 193:         I2C_Status.callbackTable[I2C_WRITE_COLLI
      +                          SION]=I2C_CallbackReturnStop;
  3599   001586  0E60               	movlw	low _I2C_CallbackReturnStop
  3600   001588  6F62               	movwf	(_I2C_Status+2)& (0+255),b
  3601   00158A  0E1F               	movlw	high _I2C_CallbackReturnStop
  3602   00158C  6F63               	movwf	(_I2C_Status+3)& (0+255),b
  3603                           
  3604                           ; BSR set to: 0
  3605                           ;mcc_generated_files/i2c_master.c: 194:         I2C_Status.callbackPayload[I2C_WRITE_COL
      +                          LISION] = ((void*)0);
  3606   00158E  0E00               	movlw	0
  3607   001590  6F6E               	movwf	(_I2C_Status+14)& (0+255),b
  3608   001592  0E00               	movlw	0
  3609   001594  6F6F               	movwf	(_I2C_Status+15)& (0+255),b
  3610                           
  3611                           ; BSR set to: 0
  3612                           ;mcc_generated_files/i2c_master.c: 195:         I2C_Status.callbackTable[I2C_ADDR_NACK]=
      +                          I2C_CallbackReturnStop;
  3613   001596  0E60               	movlw	low _I2C_CallbackReturnStop
  3614   001598  6F64               	movwf	(_I2C_Status+4)& (0+255),b
  3615   00159A  0E1F               	movlw	high _I2C_CallbackReturnStop
  3616   00159C  6F65               	movwf	(_I2C_Status+5)& (0+255),b
  3617                           
  3618                           ; BSR set to: 0
  3619                           ;mcc_generated_files/i2c_master.c: 196:         I2C_Status.callbackPayload[I2C_ADDR_NACK
      +                          ] = ((void*)0);
  3620   00159E  0E00               	movlw	0
  3621   0015A0  6F70               	movwf	(_I2C_Status+16)& (0+255),b
  3622   0015A2  0E00               	movlw	0
  3623   0015A4  6F71               	movwf	(_I2C_Status+17)& (0+255),b
  3624                           
  3625                           ; BSR set to: 0
  3626                           ;mcc_generated_files/i2c_master.c: 197:         I2C_Status.callbackTable[I2C_DATA_NACK]=
      +                          I2C_CallbackReturnStop;
  3627   0015A6  0E60               	movlw	low _I2C_CallbackReturnStop
  3628   0015A8  6F66               	movwf	(_I2C_Status+6)& (0+255),b
  3629   0015AA  0E1F               	movlw	high _I2C_CallbackReturnStop
  3630   0015AC  6F67               	movwf	(_I2C_Status+7)& (0+255),b
  3631                           
  3632                           ; BSR set to: 0
  3633                           ;mcc_generated_files/i2c_master.c: 198:         I2C_Status.callbackPayload[I2C_DATA_NACK
      +                          ] = ((void*)0);
  3634   0015AE  0E00               	movlw	0
  3635   0015B0  6F72               	movwf	(_I2C_Status+18)& (0+255),b
  3636   0015B2  0E00               	movlw	0
  3637   0015B4  6F73               	movwf	(_I2C_Status+19)& (0+255),b
  3638                           
  3639                           ; BSR set to: 0
  3640                           ;mcc_generated_files/i2c_master.c: 199:         I2C_Status.callbackTable[I2C_TIMEOUT]=I2
      +                          C_CallbackReturnReset;
  3641   0015B6  0E5C               	movlw	low _I2C_CallbackReturnReset
  3642   0015B8  6F68               	movwf	(_I2C_Status+8)& (0+255),b
  3643   0015BA  0E1F               	movlw	high _I2C_CallbackReturnReset
  3644   0015BC  6F69               	movwf	(_I2C_Status+9)& (0+255),b
  3645                           
  3646                           ; BSR set to: 0
  3647                           ;mcc_generated_files/i2c_master.c: 200:         I2C_Status.callbackPayload[I2C_TIMEOUT] 
      +                          = ((void*)0);
  3648   0015BE  0E00               	movlw	0
  3649   0015C0  6F74               	movwf	(_I2C_Status+20)& (0+255),b
  3650   0015C2  0E00               	movlw	0
  3651   0015C4  6F75               	movwf	(_I2C_Status+21)& (0+255),b
  3652                           
  3653                           ; BSR set to: 0
  3654                           ;mcc_generated_files/i2c_master.c: 202:         I2C_MasterClearIrq();
  3655   0015C6  ECBC  F00F         	call	_I2C_MasterClearIrq	;wreg free
  3656                           
  3657                           ;mcc_generated_files/i2c_master.c: 203:         I2C_MasterOpen();
  3658   0015CA  ECE2  F00E         	call	_I2C_MasterOpen	;wreg free
  3659                           
  3660                           ;mcc_generated_files/i2c_master.c: 204:         returnValue = I2C_NOERR;
  3661   0015CE  0E00               	movlw	0
  3662   0015D0  6E08               	movwf	I2C_Open@returnValue^0,c
  3663   0015D2                     l4465:
  3664                           
  3665                           ;mcc_generated_files/i2c_master.c: 206:     return returnValue;
  3666   0015D2  5008               	movf	I2C_Open@returnValue^0,w,c
  3667   0015D4  0012               	return		;funcret
  3668   0015D6                     __end_of_I2C_Open:
  3669                           	callstack 0
  3670                           
  3671 ;; *************** function _I2C_MasterOpen *****************
  3672 ;; Defined at:
  3673 ;;		line 543 in file "mcc_generated_files/i2c_master.c"
  3674 ;; Parameters:    Size  Location     Type
  3675 ;;		None
  3676 ;; Auto vars:     Size  Location     Type
  3677 ;;		None
  3678 ;; Return value:  Size  Location     Type
  3679 ;;                  1    wreg      _Bool 
  3680 ;; Registers used:
  3681 ;;		wreg, status,2
  3682 ;; Tracked objects:
  3683 ;;		On entry : 0/0
  3684 ;;		On exit  : 0/0
  3685 ;;		Unchanged: 0/0
  3686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3687 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3688 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3689 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3690 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3691 ;;Total ram usage:        0 bytes
  3692 ;; Hardware stack levels used: 1
  3693 ;; Hardware stack levels required when called: 4
  3694 ;; This function calls:
  3695 ;;		Nothing
  3696 ;; This function is called by:
  3697 ;;		_I2C_Open
  3698 ;; This function uses a non-reentrant model
  3699 ;;
  3700                           
  3701                           	psect	text32
  3702   001DC4                     __ptext32:
  3703                           	callstack 0
  3704   001DC4                     _I2C_MasterOpen:
  3705                           	callstack 24
  3706                           
  3707                           ;mcc_generated_files/i2c_master.c: 545:     if(!SSPCON1bits.SSPEN)
  3708                           
  3709                           ;incstack = 0
  3710   001DC4  BAC6               	btfsc	198,5,c	;volatile
  3711   001DC6  0012               	return	
  3712                           
  3713                           ;mcc_generated_files/i2c_master.c: 546:     {;mcc_generated_files/i2c_master.c: 547:    
      +                               SSPSTAT = 0x00;
  3714   001DC8  0E00               	movlw	0
  3715   001DCA  6EC7               	movwf	199,c	;volatile
  3716                           
  3717                           ;mcc_generated_files/i2c_master.c: 548:         SSPCON1 = 0x08;
  3718   001DCC  0E08               	movlw	8
  3719   001DCE  6EC6               	movwf	198,c	;volatile
  3720                           
  3721                           ;mcc_generated_files/i2c_master.c: 549:         SSPCON2 = 0x00;
  3722   001DD0  0E00               	movlw	0
  3723   001DD2  6EC5               	movwf	197,c	;volatile
  3724                           
  3725                           ;mcc_generated_files/i2c_master.c: 550:         SSPADD = 0x13;
  3726   001DD4  0E13               	movlw	19
  3727   001DD6  6EC8               	movwf	200,c	;volatile
  3728                           
  3729                           ;mcc_generated_files/i2c_master.c: 551:         SSPCON1bits.SSPEN = 1;
  3730   001DD8  8AC6               	bsf	198,5,c	;volatile
  3731   001DDA  0012               	return		;funcret
  3732   001DDC                     __end_of_I2C_MasterOpen:
  3733                           	callstack 0
  3734                           
  3735 ;; *************** function _I2C_MasterRead *****************
  3736 ;; Defined at:
  3737 ;;		line 246 in file "mcc_generated_files/i2c_master.c"
  3738 ;; Parameters:    Size  Location     Type
  3739 ;;		None
  3740 ;; Auto vars:     Size  Location     Type
  3741 ;;		None
  3742 ;; Return value:  Size  Location     Type
  3743 ;;                  1    wreg      enum E355
  3744 ;; Registers used:
  3745 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pcl, pclath, pclatu, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3746 ;; Tracked objects:
  3747 ;;		On entry : 0/0
  3748 ;;		On exit  : 0/0
  3749 ;;		Unchanged: 0/0
  3750 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3751 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3752 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3753 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3754 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3755 ;;Total ram usage:        0 bytes
  3756 ;; Hardware stack levels used: 1
  3757 ;; Hardware stack levels required when called: 11
  3758 ;; This function calls:
  3759 ;;		_I2C_MasterOperation
  3760 ;; This function is called by:
  3761 ;;		_I2C_ReadNBytes
  3762 ;; This function uses a non-reentrant model
  3763 ;;
  3764                           
  3765                           	psect	text33
  3766   001EDA                     __ptext33:
  3767                           	callstack 0
  3768   001EDA                     _I2C_MasterRead:
  3769                           	callstack 18
  3770                           
  3771                           ;mcc_generated_files/i2c_master.c: 248:     return I2C_MasterOperation(1);;	Return value
      +                           of _I2C_MasterRead is never used
  3772                           
  3773                           ;incstack = 0
  3774   001EDA  0E01               	movlw	1
  3775   001EDC  ECBB  F00D         	call	_I2C_MasterOperation
  3776   001EE0  0012               	return		;funcret
  3777   001EE2                     __end_of_I2C_MasterRead:
  3778                           	callstack 0
  3779                           
  3780 ;; *************** function _I2C_MasterOperation *****************
  3781 ;; Defined at:
  3782 ;;		line 224 in file "mcc_generated_files/i2c_master.c"
  3783 ;; Parameters:    Size  Location     Type
  3784 ;;  read            1    wreg     _Bool 
  3785 ;; Auto vars:     Size  Location     Type
  3786 ;;  read            1   21[COMRAM] _Bool 
  3787 ;;  returnValue     1   22[COMRAM] enum E355
  3788 ;; Return value:  Size  Location     Type
  3789 ;;                  1    wreg      enum E355
  3790 ;; Registers used:
  3791 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pcl, pclath, pclatu, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3792 ;; Tracked objects:
  3793 ;;		On entry : 0/0
  3794 ;;		On exit  : 0/0
  3795 ;;		Unchanged: 0/0
  3796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3797 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3798 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3799 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3800 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3801 ;;Total ram usage:        2 bytes
  3802 ;; Hardware stack levels used: 1
  3803 ;; Hardware stack levels required when called: 10
  3804 ;; This function calls:
  3805 ;;		_I2C_MasterStart
  3806 ;;		_I2C_Poller
  3807 ;; This function is called by:
  3808 ;;		_I2C_MasterRead
  3809 ;;		_I2C_MasterWrite
  3810 ;; This function uses a non-reentrant model
  3811 ;;
  3812                           
  3813                           	psect	text34
  3814   001B76                     __ptext34:
  3815                           	callstack 0
  3816   001B76                     _I2C_MasterOperation:
  3817                           	callstack 18
  3818                           
  3819                           ;incstack = 0
  3820                           ;I2C_MasterOperation@read stored from wreg
  3821   001B76  6E16               	movwf	I2C_MasterOperation@read^0,c
  3822                           
  3823                           ;mcc_generated_files/i2c_master.c: 224: i2c_error_t I2C_MasterOperation(_Bool read);mcc_
      +                          generated_files/i2c_master.c: 225: {;mcc_generated_files/i2c_master.c: 226:     i2c_erro
      +                          r_t returnValue = I2C_BUSY;
  3824   001B78  0E01               	movlw	1
  3825   001B7A  6E17               	movwf	I2C_MasterOperation@returnValue^0,c
  3826                           
  3827                           ;mcc_generated_files/i2c_master.c: 227:     if(!I2C_Status.busy)
  3828   001B7C  0100               	movlb	0	; () banked
  3829   001B7E  B383               	btfsc	(_I2C_Status+35)& (0+255),1,b
  3830   001B80  D00E               	goto	l4289
  3831                           
  3832                           ; BSR set to: 0
  3833                           ;mcc_generated_files/i2c_master.c: 228:     {;mcc_generated_files/i2c_master.c: 229:    
      +                               I2C_Status.busy = 1;
  3834   001B82  8383               	bsf	(_I2C_Status+35)& (0+255),1,b
  3835                           
  3836                           ; BSR set to: 0
  3837                           ;mcc_generated_files/i2c_master.c: 230:         returnValue = I2C_NOERR;
  3838   001B84  0E00               	movlw	0
  3839   001B86  6E17               	movwf	I2C_MasterOperation@returnValue^0,c
  3840                           
  3841                           ; BSR set to: 0
  3842                           ;mcc_generated_files/i2c_master.c: 232:         if(read)
  3843   001B88  5016               	movf	I2C_MasterOperation@read^0,w,c
  3844   001B8A  B4D8               	btfsc	status,2,c
  3845   001B8C  D002               	goto	l4283
  3846                           
  3847                           ; BSR set to: 0
  3848                           ;mcc_generated_files/i2c_master.c: 233:         {;mcc_generated_files/i2c_master.c: 234:
      +                                       I2C_Status.state = I2C_SEND_ADR_READ;
  3849   001B8E  0E01               	movlw	1
  3850   001B90  D001               	goto	L3
  3851   001B92                     l4283:
  3852                           
  3853                           ; BSR set to: 0
  3854                           ;mcc_generated_files/i2c_master.c: 237:         {;mcc_generated_files/i2c_master.c: 238:
      +                                       I2C_Status.state = I2C_SEND_ADR_WRITE;
  3855   001B92  0E02               	movlw	2
  3856   001B94                     L3:
  3857   001B94  6F81               	movwf	(_I2C_Status+33)& (0+255),b
  3858                           
  3859                           ; BSR set to: 0
  3860                           ;mcc_generated_files/i2c_master.c: 240:         I2C_MasterStart();
  3861   001B96  ECB6  F00F         	call	_I2C_MasterStart	;wreg free
  3862                           
  3863                           ;mcc_generated_files/i2c_master.c: 241:         I2C_Poller();
  3864   001B9A  EC0D  F00F         	call	_I2C_Poller	;wreg free
  3865   001B9E                     l4289:
  3866                           
  3867                           ;mcc_generated_files/i2c_master.c: 243:     return returnValue;
  3868   001B9E  5017               	movf	I2C_MasterOperation@returnValue^0,w,c
  3869   001BA0  0012               	return		;funcret
  3870   001BA2                     __end_of_I2C_MasterOperation:
  3871                           	callstack 0
  3872                           
  3873 ;; *************** function _I2C_Poller *****************
  3874 ;; Defined at:
  3875 ;;		line 312 in file "mcc_generated_files/i2c_master.c"
  3876 ;; Parameters:    Size  Location     Type
  3877 ;;		None
  3878 ;; Auto vars:     Size  Location     Type
  3879 ;;		None
  3880 ;; Return value:  Size  Location     Type
  3881 ;;                  1    wreg      void 
  3882 ;; Registers used:
  3883 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pcl, pclath, pclatu, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3884 ;; Tracked objects:
  3885 ;;		On entry : 0/0
  3886 ;;		On exit  : 0/0
  3887 ;;		Unchanged: 0/0
  3888 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3889 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3890 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3891 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3892 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3893 ;;Total ram usage:        0 bytes
  3894 ;; Hardware stack levels used: 1
  3895 ;; Hardware stack levels required when called: 9
  3896 ;; This function calls:
  3897 ;;		_I2C_MasterFsm
  3898 ;;		_I2C_MasterWaitForEvent
  3899 ;; This function is called by:
  3900 ;;		_I2C_MasterOperation
  3901 ;; This function uses a non-reentrant model
  3902 ;;
  3903                           
  3904                           	psect	text35
  3905   001E1A                     __ptext35:
  3906                           	callstack 0
  3907   001E1A                     _I2C_Poller:
  3908                           	callstack 18
  3909                           
  3910                           ;mcc_generated_files/i2c_master.c: 314:     while(I2C_Status.busy)
  3911                           
  3912                           ;incstack = 0
  3913   001E1A  D004               	goto	l4217
  3914   001E1C                     l4213:
  3915                           
  3916                           ; BSR set to: 0
  3917                           ;mcc_generated_files/i2c_master.c: 315:     {;mcc_generated_files/i2c_master.c: 316:    
      +                               I2C_MasterWaitForEvent();
  3918   001E1C  EC94  F00F         	call	_I2C_MasterWaitForEvent	;wreg free
  3919                           
  3920                           ;mcc_generated_files/i2c_master.c: 317:         I2C_MasterFsm();
  3921   001E20  EC30  F00C         	call	_I2C_MasterFsm	;wreg free
  3922   001E24                     l4217:
  3923                           
  3924                           ;mcc_generated_files/i2c_master.c: 314:     while(I2C_Status.busy)
  3925   001E24  0100               	movlb	0	; () banked
  3926   001E26  A383               	btfss	(_I2C_Status+35)& (0+255),1,b
  3927   001E28  0012               	return	
  3928   001E2A  D7F8               	goto	l4213
  3929   001E2C                     __end_of_I2C_Poller:
  3930                           	callstack 0
  3931                           
  3932 ;; *************** function _I2C_MasterWaitForEvent *****************
  3933 ;; Defined at:
  3934 ;;		line 650 in file "mcc_generated_files/i2c_master.c"
  3935 ;; Parameters:    Size  Location     Type
  3936 ;;		None
  3937 ;; Auto vars:     Size  Location     Type
  3938 ;;		None
  3939 ;; Return value:  Size  Location     Type
  3940 ;;                  1    wreg      void 
  3941 ;; Registers used:
  3942 ;;		None
  3943 ;; Tracked objects:
  3944 ;;		On entry : 0/0
  3945 ;;		On exit  : 0/0
  3946 ;;		Unchanged: 0/0
  3947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3948 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3949 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3950 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3951 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3952 ;;Total ram usage:        0 bytes
  3953 ;; Hardware stack levels used: 1
  3954 ;; Hardware stack levels required when called: 4
  3955 ;; This function calls:
  3956 ;;		Nothing
  3957 ;; This function is called by:
  3958 ;;		_I2C_Poller
  3959 ;; This function uses a non-reentrant model
  3960 ;;
  3961                           
  3962                           	psect	text36
  3963   001F28                     __ptext36:
  3964                           	callstack 0
  3965   001F28                     _I2C_MasterWaitForEvent:
  3966                           	callstack 22
  3967                           
  3968                           ;mcc_generated_files/i2c_master.c: 653:     {;mcc_generated_files/i2c_master.c: 654:    
      +                               if(PIR1bits.SSPIF)
  3969                           
  3970                           ; BSR set to: 0
  3971                           ;incstack = 0
  3972                           ;mcc_generated_files/i2c_master.c: 652:     while(1)
  3973   001F28  B69E               	btfsc	158,3,c	;volatile
  3974   001F2A  0012               	return	
  3975   001F2C  D7FD               	goto	__ptext36
  3976   001F2E                     __end_of_I2C_MasterWaitForEvent:
  3977                           	callstack 0
  3978                           
  3979 ;; *************** function _I2C_MasterFsm *****************
  3980 ;; Defined at:
  3981 ;;		line 321 in file "mcc_generated_files/i2c_master.c"
  3982 ;; Parameters:    Size  Location     Type
  3983 ;;		None
  3984 ;; Auto vars:     Size  Location     Type
  3985 ;;		None
  3986 ;; Return value:  Size  Location     Type
  3987 ;;                  1    wreg      void 
  3988 ;; Registers used:
  3989 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pcl, pclath, pclatu, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3990 ;; Tracked objects:
  3991 ;;		On entry : 0/0
  3992 ;;		On exit  : 0/0
  3993 ;;		Unchanged: 0/0
  3994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3995 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3996 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3997 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3998 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3999 ;;Total ram usage:        2 bytes
  4000 ;; Hardware stack levels used: 1
  4001 ;; Hardware stack levels required when called: 8
  4002 ;; This function calls:
  4003 ;;		_I2C_DO_ADDRESS_NACK
  4004 ;;		_I2C_DO_IDLE
  4005 ;;		_I2C_DO_RCEN
  4006 ;;		_I2C_DO_RESET
  4007 ;;		_I2C_DO_RX
  4008 ;;		_I2C_DO_RX_ACK
  4009 ;;		_I2C_DO_RX_NACK_RESTART
  4010 ;;		_I2C_DO_RX_NACK_STOP
  4011 ;;		_I2C_DO_SEND_ADR_READ
  4012 ;;		_I2C_DO_SEND_ADR_WRITE
  4013 ;;		_I2C_DO_SEND_RESTART
  4014 ;;		_I2C_DO_SEND_RESTART_READ
  4015 ;;		_I2C_DO_SEND_RESTART_WRITE
  4016 ;;		_I2C_DO_SEND_STOP
  4017 ;;		_I2C_DO_TX
  4018 ;;		_I2C_DO_TX_EMPTY
  4019 ;;		_I2C_MasterClearIrq
  4020 ;;		_I2C_MasterIsNack
  4021 ;; This function is called by:
  4022 ;;		_I2C_Poller
  4023 ;; This function uses a non-reentrant model
  4024 ;;
  4025                           
  4026                           	psect	text37
  4027   001860                     __ptext37:
  4028                           	callstack 0
  4029   001860                     _I2C_MasterFsm:
  4030                           	callstack 18
  4031                           
  4032                           ;mcc_generated_files/i2c_master.c: 323:     I2C_MasterClearIrq();
  4033                           
  4034                           ;incstack = 0
  4035   001860  ECBC  F00F         	call	_I2C_MasterClearIrq	;wreg free
  4036                           
  4037                           ;mcc_generated_files/i2c_master.c: 325:     if(I2C_Status.addressNackCheck && I2C_Master
      +                          IsNack())
  4038   001864  0100               	movlb	0	; () banked
  4039   001866  A183               	btfss	(_I2C_Status+35)& (0+255),0,b
  4040   001868  D008               	goto	l4197
  4041                           
  4042                           ; BSR set to: 0
  4043   00186A  EC40  F00F         	call	_I2C_MasterIsNack	;wreg free
  4044   00186E  0900               	iorlw	0
  4045   001870  B4D8               	btfsc	status,2,c
  4046   001872  D003               	goto	l4197
  4047                           
  4048                           ;mcc_generated_files/i2c_master.c: 326:     {;mcc_generated_files/i2c_master.c: 327:    
      +                               I2C_Status.state = I2C_ADDRESS_NACK;
  4049   001874  0E0F               	movlw	15
  4050   001876  0100               	movlb	0	; () banked
  4051   001878  6F81               	movwf	(_I2C_Status+33)& (0+255),b
  4052   00187A                     l4197:
  4053                           
  4054                           ;mcc_generated_files/i2c_master.c: 329:     I2C_Status.state = i2c_fsmStateTable[I2C_Sta
      +                          tus.state]();
  4055   00187A  0100               	movlb	0	; () banked
  4056   00187C  5181               	movf	(_I2C_Status+33)& (0+255),w,b
  4057   00187E  0D02               	mullw	2
  4058   001880  0E01               	movlw	low _i2c_fsmStateTable
  4059   001882  24F3               	addwf	243,w,c
  4060   001884  6EF6               	movwf	tblptrl,c
  4061   001886  0E10               	movlw	high _i2c_fsmStateTable
  4062   001888  20F4               	addwfc	244,w,c
  4063   00188A  6EF7               	movwf	tblptrh,c
  4064   00188C                     	if	1	;There are 3 active tblptr bytes
  4065   00188C  6AF8               	clrf	tblptru,c
  4066   00188E  0E00               	movlw	low (__mediumconst shr (0+16))
  4067   001890  22F8               	addwfc	tblptru,f,c
  4068   001892                     	endif
  4069   001892  0009               	tblrd		*+
  4070   001894  CFF5 F014          	movff	tablat,??_I2C_MasterFsm
  4071   001898  0009               	tblrd		*+
  4072   00189A  CFF5 F015          	movff	tablat,??_I2C_MasterFsm+1
  4073   00189E  D801               	call	u2158
  4074   0018A0  D009               	goto	u2159
  4075   0018A2                     u2158:
  4076   0018A2  0005               	push	
  4077   0018A4  6EFA               	movwf	pclath,c
  4078   0018A6  5014               	movf	??_I2C_MasterFsm^0,w,c
  4079   0018A8  6EFD               	movwf	tosl,c
  4080   0018AA  5015               	movf	(??_I2C_MasterFsm+1)^0,w,c
  4081   0018AC  6EFE               	movwf	tosh,c
  4082   0018AE  6AFF               	clrf	tosu,c
  4083   0018B0  50FA               	movf	pclath,w,c
  4084   0018B2  0012               	return		;indir
  4085   0018B4                     u2159:
  4086   0018B4  0100               	movlb	0	; () banked
  4087   0018B6  6F81               	movwf	(_I2C_Status+33)& (0+255),b
  4088                           
  4089                           ; BSR set to: 0
  4090   0018B8  0012               	return		;funcret
  4091   0018BA                     __end_of_I2C_MasterFsm:
  4092                           	callstack 0
  4093                           
  4094 ;; *************** function _I2C_DO_ADDRESS_NACK *****************
  4095 ;; Defined at:
  4096 ;;		line 500 in file "mcc_generated_files/i2c_master.c"
  4097 ;; Parameters:    Size  Location     Type
  4098 ;;		None
  4099 ;; Auto vars:     Size  Location     Type
  4100 ;;		None
  4101 ;; Return value:  Size  Location     Type
  4102 ;;                  1    wreg      enum E2846
  4103 ;; Registers used:
  4104 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pcl, pclath, pclatu, tosl, prodl, prodh, cstack
  4105 ;; Tracked objects:
  4106 ;;		On entry : 0/0
  4107 ;;		On exit  : 0/0
  4108 ;;		Unchanged: 0/0
  4109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4110 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4111 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4112 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4113 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4114 ;;Total ram usage:        2 bytes
  4115 ;; Hardware stack levels used: 1
  4116 ;; Hardware stack levels required when called: 7
  4117 ;; This function calls:
  4118 ;;		Absolute function
  4119 ;;		_I2C_CallbackReturnReset
  4120 ;;		_I2C_CallbackReturnStop
  4121 ;;		_I2C_DO_SEND_RESTART
  4122 ;;		_I2C_DO_SEND_STOP
  4123 ;;		_rd1RegCompleteHandler
  4124 ;;		_rd2RegCompleteHandler
  4125 ;;		_rdBlkRegCompleteHandler
  4126 ;;		_wr1RegCompleteHandler
  4127 ;;		_wr2RegCompleteHandler
  4128 ;; This function is called by:
  4129 ;;		_I2C_MasterFsm
  4130 ;; This function uses a non-reentrant model
  4131 ;;
  4132                           
  4133                           	psect	text38
  4134   001968                     __ptext38:
  4135                           	callstack 0
  4136   001968                     _I2C_DO_ADDRESS_NACK:
  4137                           	callstack 18
  4138                           
  4139                           ;mcc_generated_files/i2c_master.c: 502:     I2C_Status.addressNackCheck = 0;
  4140                           
  4141                           ; BSR set to: 0
  4142                           ;incstack = 0
  4143   001968  0100               	movlb	0	; () banked
  4144   00196A  9183               	bcf	(_I2C_Status+35)& (0+255),0,b
  4145                           
  4146                           ; BSR set to: 0
  4147                           ;mcc_generated_files/i2c_master.c: 503:     I2C_Status.error = I2C_FAIL;
  4148   00196C  0E02               	movlw	2
  4149   00196E  6F82               	movwf	(_I2C_Status+34)& (0+255),b
  4150                           
  4151                           ;mcc_generated_files/i2c_master.c: 504:     switch(I2C_Status.callbackTable[I2C_ADDR_NAC
      +                          K](I2C_Status.callbackPayload[I2C_ADDR_NACK]))
  4152   001970  D006               	goto	l4159
  4153   001972                     l4149:
  4154                           
  4155                           ;mcc_generated_files/i2c_master.c: 508:             return I2C_DO_SEND_RESTART();
  4156   001972  EC81  F00F         	call	_I2C_DO_SEND_RESTART	;wreg free
  4157   001976  0012               	return	
  4158   001978                     l4153:
  4159                           
  4160                           ;mcc_generated_files/i2c_master.c: 510:             return I2C_DO_SEND_STOP();
  4161   001978  EC7D  F00F         	call	_I2C_DO_SEND_STOP	;wreg free
  4162   00197C  0012               	return	
  4163   00197E                     l4159:
  4164                           
  4165                           ; BSR set to: 0
  4166   00197E  C070  F010         	movff	_I2C_Status+16,I2C_CallbackReturnReset@funPtr
  4167   001982  C071  F011         	movff	_I2C_Status+17,I2C_CallbackReturnReset@funPtr+1
  4168   001986  D801               	call	u2088
  4169   001988  D009               	goto	u2089
  4170   00198A                     u2088:
  4171   00198A  0005               	push	
  4172   00198C  6EFA               	movwf	pclath,c
  4173   00198E  5164               	movf	(_I2C_Status+4)& (0+255),w,b
  4174   001990  6EFD               	movwf	tosl,c
  4175   001992  5165               	movf	(_I2C_Status+5)& (0+255),w,b
  4176   001994  6EFE               	movwf	tosh,c
  4177   001996  6AFF               	clrf	tosu,c
  4178   001998  50FA               	movf	pclath,w,c
  4179   00199A  0012               	return		;indir
  4180   00199C                     u2089:
  4181   00199C  6E12               	movwf	??_I2C_DO_ADDRESS_NACK^0,c
  4182   00199E  6A13               	clrf	(??_I2C_DO_ADDRESS_NACK+1)^0,c
  4183                           
  4184                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4185                           ; Switch size 1, requested type "simple"
  4186                           ; Number of cases is 1, Range of values is 0 to 0
  4187                           ; switch strategies available:
  4188                           ; Name         Instructions Cycles
  4189                           ; simple_byte            4     3 (average)
  4190                           ;	Chosen strategy is simple_byte
  4191   0019A0  5013               	movf	(??_I2C_DO_ADDRESS_NACK+1)^0,w,c
  4192   0019A2  0A00               	xorlw	0	; case 0
  4193   0019A4  A4D8               	btfss	status,2,c
  4194   0019A6  D7E8               	goto	l4153
  4195                           
  4196                           ; Switch size 1, requested type "simple"
  4197                           ; Number of cases is 2, Range of values is 2 to 3
  4198                           ; switch strategies available:
  4199                           ; Name         Instructions Cycles
  4200                           ; simple_byte            7     4 (average)
  4201                           ;	Chosen strategy is simple_byte
  4202   0019A8  5012               	movf	??_I2C_DO_ADDRESS_NACK^0,w,c
  4203   0019AA  0A02               	xorlw	2	; case 2
  4204   0019AC  B4D8               	btfsc	status,2,c
  4205   0019AE  D7E1               	goto	l4149
  4206   0019B0  0A01               	xorlw	1	; case 3
  4207   0019B2  B4D8               	btfsc	status,2,c
  4208   0019B4  D7DE               	goto	l4149
  4209   0019B6  D7E0               	goto	l4153
  4210   0019B8                     __end_of_I2C_DO_ADDRESS_NACK:
  4211                           	callstack 0
  4212                           
  4213 ;; *************** function _I2C_DO_RESET *****************
  4214 ;; Defined at:
  4215 ;;		line 494 in file "mcc_generated_files/i2c_master.c"
  4216 ;; Parameters:    Size  Location     Type
  4217 ;;		None
  4218 ;; Auto vars:     Size  Location     Type
  4219 ;;		None
  4220 ;; Return value:  Size  Location     Type
  4221 ;;                  1    wreg      enum E2846
  4222 ;; Registers used:
  4223 ;;		wreg, status,2
  4224 ;; Tracked objects:
  4225 ;;		On entry : 0/0
  4226 ;;		On exit  : 0/0
  4227 ;;		Unchanged: 0/0
  4228 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4229 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4230 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4231 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4232 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4233 ;;Total ram usage:        0 bytes
  4234 ;; Hardware stack levels used: 1
  4235 ;; Hardware stack levels required when called: 4
  4236 ;; This function calls:
  4237 ;;		Nothing
  4238 ;; This function is called by:
  4239 ;;		_I2C_MasterFsm
  4240 ;; This function uses a non-reentrant model
  4241 ;;
  4242                           
  4243                           	psect	text39
  4244   001E5C                     __ptext39:
  4245                           	callstack 0
  4246   001E5C                     _I2C_DO_RESET:
  4247                           	callstack 21
  4248                           
  4249                           ;mcc_generated_files/i2c_master.c: 496:     I2C_Status.busy = 0;
  4250                           
  4251                           ;incstack = 0
  4252   001E5C  0100               	movlb	0	; () banked
  4253   001E5E  9383               	bcf	(_I2C_Status+35)& (0+255),1,b
  4254                           
  4255                           ; BSR set to: 0
  4256                           ;mcc_generated_files/i2c_master.c: 497:     I2C_Status.error = I2C_NOERR;
  4257   001E60  0E00               	movlw	0
  4258   001E62  6F82               	movwf	(_I2C_Status+34)& (0+255),b
  4259                           
  4260                           ; BSR set to: 0
  4261                           ;mcc_generated_files/i2c_master.c: 498:     return I2C_RESET;
  4262   001E64  0E0E               	movlw	14
  4263                           
  4264                           ; BSR set to: 0
  4265   001E66  0012               	return		;funcret
  4266   001E68                     __end_of_I2C_DO_RESET:
  4267                           	callstack 0
  4268                           
  4269 ;; *************** function _I2C_DO_RX_NACK_RESTART *****************
  4270 ;; Defined at:
  4271 ;;		line 488 in file "mcc_generated_files/i2c_master.c"
  4272 ;; Parameters:    Size  Location     Type
  4273 ;;		None
  4274 ;; Auto vars:     Size  Location     Type
  4275 ;;		None
  4276 ;; Return value:  Size  Location     Type
  4277 ;;                  1    wreg      enum E2846
  4278 ;; Registers used:
  4279 ;;		wreg, cstack
  4280 ;; Tracked objects:
  4281 ;;		On entry : 0/0
  4282 ;;		On exit  : 0/0
  4283 ;;		Unchanged: 0/0
  4284 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4285 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4286 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4287 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4288 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4289 ;;Total ram usage:        0 bytes
  4290 ;; Hardware stack levels used: 1
  4291 ;; Hardware stack levels required when called: 5
  4292 ;; This function calls:
  4293 ;;		_I2C_MasterSendNack
  4294 ;; This function is called by:
  4295 ;;		_I2C_DO_RX
  4296 ;;		_I2C_MasterFsm
  4297 ;; This function uses a non-reentrant model
  4298 ;;
  4299                           
  4300                           	psect	text40
  4301   001EE2                     __ptext40:
  4302                           	callstack 0
  4303   001EE2                     _I2C_DO_RX_NACK_RESTART:
  4304                           	callstack 20
  4305                           
  4306                           ;mcc_generated_files/i2c_master.c: 490:     I2C_MasterSendNack();
  4307                           
  4308                           ; BSR set to: 0
  4309                           ;incstack = 0
  4310   001EE2  EC9A  F00F         	call	_I2C_MasterSendNack	;wreg free
  4311                           
  4312                           ;mcc_generated_files/i2c_master.c: 491:     return I2C_SEND_RESTART;
  4313   001EE6  0E09               	movlw	9
  4314   001EE8  0012               	return		;funcret
  4315   001EEA                     __end_of_I2C_DO_RX_NACK_RESTART:
  4316                           	callstack 0
  4317                           
  4318 ;; *************** function _I2C_DO_RX_NACK_STOP *****************
  4319 ;; Defined at:
  4320 ;;		line 482 in file "mcc_generated_files/i2c_master.c"
  4321 ;; Parameters:    Size  Location     Type
  4322 ;;		None
  4323 ;; Auto vars:     Size  Location     Type
  4324 ;;		None
  4325 ;; Return value:  Size  Location     Type
  4326 ;;                  1    wreg      enum E2846
  4327 ;; Registers used:
  4328 ;;		wreg, cstack
  4329 ;; Tracked objects:
  4330 ;;		On entry : 0/0
  4331 ;;		On exit  : 0/0
  4332 ;;		Unchanged: 0/0
  4333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4334 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4335 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4336 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4337 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4338 ;;Total ram usage:        0 bytes
  4339 ;; Hardware stack levels used: 1
  4340 ;; Hardware stack levels required when called: 5
  4341 ;; This function calls:
  4342 ;;		_I2C_MasterSendNack
  4343 ;; This function is called by:
  4344 ;;		_I2C_DO_RX
  4345 ;;		_I2C_MasterFsm
  4346 ;; This function uses a non-reentrant model
  4347 ;;
  4348                           
  4349                           	psect	text41
  4350   001EEA                     __ptext41:
  4351                           	callstack 0
  4352   001EEA                     _I2C_DO_RX_NACK_STOP:
  4353                           	callstack 20
  4354                           
  4355                           ;mcc_generated_files/i2c_master.c: 484:     I2C_MasterSendNack();
  4356                           
  4357                           ;incstack = 0
  4358   001EEA  EC9A  F00F         	call	_I2C_MasterSendNack	;wreg free
  4359                           
  4360                           ;mcc_generated_files/i2c_master.c: 485:     return I2C_SEND_STOP;
  4361   001EEE  0E0A               	movlw	10
  4362   001EF0  0012               	return		;funcret
  4363   001EF2                     __end_of_I2C_DO_RX_NACK_STOP:
  4364                           	callstack 0
  4365                           
  4366 ;; *************** function _I2C_DO_RX_ACK *****************
  4367 ;; Defined at:
  4368 ;;		line 475 in file "mcc_generated_files/i2c_master.c"
  4369 ;; Parameters:    Size  Location     Type
  4370 ;;		None
  4371 ;; Auto vars:     Size  Location     Type
  4372 ;;		None
  4373 ;; Return value:  Size  Location     Type
  4374 ;;                  1    wreg      enum E2846
  4375 ;; Registers used:
  4376 ;;		wreg, cstack
  4377 ;; Tracked objects:
  4378 ;;		On entry : 0/0
  4379 ;;		On exit  : 0/0
  4380 ;;		Unchanged: 0/0
  4381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4382 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4383 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4384 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4385 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4386 ;;Total ram usage:        0 bytes
  4387 ;; Hardware stack levels used: 1
  4388 ;; Hardware stack levels required when called: 5
  4389 ;; This function calls:
  4390 ;;		_I2C_MasterSendAck
  4391 ;; This function is called by:
  4392 ;;		_I2C_MasterFsm
  4393 ;; This function uses a non-reentrant model
  4394 ;;
  4395                           
  4396                           	psect	text42
  4397   001EF2                     __ptext42:
  4398                           	callstack 0
  4399   001EF2                     _I2C_DO_RX_ACK:
  4400                           	callstack 20
  4401                           
  4402                           ;mcc_generated_files/i2c_master.c: 477:     I2C_MasterSendAck();
  4403                           
  4404                           ;incstack = 0
  4405   001EF2  EC97  F00F         	call	_I2C_MasterSendAck	;wreg free
  4406                           
  4407                           ;mcc_generated_files/i2c_master.c: 478:     return I2C_RCEN;
  4408   001EF6  0E05               	movlw	5
  4409   001EF8  0012               	return		;funcret
  4410   001EFA                     __end_of_I2C_DO_RX_ACK:
  4411                           	callstack 0
  4412                           
  4413 ;; *************** function _I2C_DO_SEND_STOP *****************
  4414 ;; Defined at:
  4415 ;;		line 469 in file "mcc_generated_files/i2c_master.c"
  4416 ;; Parameters:    Size  Location     Type
  4417 ;;		None
  4418 ;; Auto vars:     Size  Location     Type
  4419 ;;		None
  4420 ;; Return value:  Size  Location     Type
  4421 ;;                  1    wreg      enum E2846
  4422 ;; Registers used:
  4423 ;;		wreg, cstack
  4424 ;; Tracked objects:
  4425 ;;		On entry : 0/0
  4426 ;;		On exit  : 0/0
  4427 ;;		Unchanged: 0/0
  4428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4429 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4430 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4431 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4432 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4433 ;;Total ram usage:        0 bytes
  4434 ;; Hardware stack levels used: 1
  4435 ;; Hardware stack levels required when called: 5
  4436 ;; This function calls:
  4437 ;;		_I2C_MasterStop
  4438 ;; This function is called by:
  4439 ;;		_I2C_DO_TX
  4440 ;;		_I2C_DO_TX_EMPTY
  4441 ;;		_I2C_DO_ADDRESS_NACK
  4442 ;;		_I2C_MasterFsm
  4443 ;; This function uses a non-reentrant model
  4444 ;;
  4445                           
  4446                           	psect	text43
  4447   001EFA                     __ptext43:
  4448                           	callstack 0
  4449   001EFA                     _I2C_DO_SEND_STOP:
  4450                           	callstack 19
  4451                           
  4452                           ;mcc_generated_files/i2c_master.c: 471:     I2C_MasterStop();
  4453                           
  4454                           ;incstack = 0
  4455   001EFA  ECB2  F00F         	call	_I2C_MasterStop	;wreg free
  4456                           
  4457                           ;mcc_generated_files/i2c_master.c: 472:     return I2C_IDLE;
  4458   001EFE  0E00               	movlw	0
  4459   001F00  0012               	return		;funcret
  4460   001F02                     __end_of_I2C_DO_SEND_STOP:
  4461                           	callstack 0
  4462                           
  4463 ;; *************** function _I2C_DO_SEND_RESTART *****************
  4464 ;; Defined at:
  4465 ;;		line 463 in file "mcc_generated_files/i2c_master.c"
  4466 ;; Parameters:    Size  Location     Type
  4467 ;;		None
  4468 ;; Auto vars:     Size  Location     Type
  4469 ;;		None
  4470 ;; Return value:  Size  Location     Type
  4471 ;;                  1    wreg      enum E2846
  4472 ;; Registers used:
  4473 ;;		wreg, cstack
  4474 ;; Tracked objects:
  4475 ;;		On entry : 0/0
  4476 ;;		On exit  : 0/0
  4477 ;;		Unchanged: 0/0
  4478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4479 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4480 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4481 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4482 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4483 ;;Total ram usage:        0 bytes
  4484 ;; Hardware stack levels used: 1
  4485 ;; Hardware stack levels required when called: 5
  4486 ;; This function calls:
  4487 ;;		_I2C_MasterEnableRestart
  4488 ;; This function is called by:
  4489 ;;		_I2C_DO_TX_EMPTY
  4490 ;;		_I2C_DO_ADDRESS_NACK
  4491 ;;		_I2C_MasterFsm
  4492 ;; This function uses a non-reentrant model
  4493 ;;
  4494                           
  4495                           	psect	text44
  4496   001F02                     __ptext44:
  4497                           	callstack 0
  4498   001F02                     _I2C_DO_SEND_RESTART:
  4499                           	callstack 19
  4500                           
  4501                           ;mcc_generated_files/i2c_master.c: 465:     I2C_MasterEnableRestart();
  4502                           
  4503                           ;incstack = 0
  4504   001F02  ECB4  F00F         	call	_I2C_MasterEnableRestart	;wreg free
  4505                           
  4506                           ;mcc_generated_files/i2c_master.c: 466:     return I2C_SEND_ADR_READ;
  4507   001F06  0E01               	movlw	1
  4508   001F08  0012               	return		;funcret
  4509   001F0A                     __end_of_I2C_DO_SEND_RESTART:
  4510                           	callstack 0
  4511                           
  4512 ;; *************** function _I2C_DO_SEND_RESTART_WRITE *****************
  4513 ;; Defined at:
  4514 ;;		line 456 in file "mcc_generated_files/i2c_master.c"
  4515 ;; Parameters:    Size  Location     Type
  4516 ;;		None
  4517 ;; Auto vars:     Size  Location     Type
  4518 ;;		None
  4519 ;; Return value:  Size  Location     Type
  4520 ;;                  1    wreg      enum E2846
  4521 ;; Registers used:
  4522 ;;		wreg, cstack
  4523 ;; Tracked objects:
  4524 ;;		On entry : 0/0
  4525 ;;		On exit  : 0/0
  4526 ;;		Unchanged: 0/0
  4527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4528 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4529 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4530 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4531 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4532 ;;Total ram usage:        0 bytes
  4533 ;; Hardware stack levels used: 1
  4534 ;; Hardware stack levels required when called: 5
  4535 ;; This function calls:
  4536 ;;		_I2C_MasterEnableRestart
  4537 ;; This function is called by:
  4538 ;;		_I2C_DO_TX
  4539 ;;		_I2C_MasterFsm
  4540 ;; This function uses a non-reentrant model
  4541 ;;
  4542                           
  4543                           	psect	text45
  4544   001F0A                     __ptext45:
  4545                           	callstack 0
  4546   001F0A                     _I2C_DO_SEND_RESTART_WRITE:
  4547                           	callstack 19
  4548                           
  4549                           ;mcc_generated_files/i2c_master.c: 458:     I2C_MasterEnableRestart();
  4550                           
  4551                           ;incstack = 0
  4552   001F0A  ECB4  F00F         	call	_I2C_MasterEnableRestart	;wreg free
  4553                           
  4554                           ;mcc_generated_files/i2c_master.c: 459:     return I2C_SEND_ADR_WRITE;
  4555   001F0E  0E02               	movlw	2
  4556   001F10  0012               	return		;funcret
  4557   001F12                     __end_of_I2C_DO_SEND_RESTART_WRITE:
  4558                           	callstack 0
  4559                           
  4560 ;; *************** function _I2C_DO_SEND_RESTART_READ *****************
  4561 ;; Defined at:
  4562 ;;		line 450 in file "mcc_generated_files/i2c_master.c"
  4563 ;; Parameters:    Size  Location     Type
  4564 ;;		None
  4565 ;; Auto vars:     Size  Location     Type
  4566 ;;		None
  4567 ;; Return value:  Size  Location     Type
  4568 ;;                  1    wreg      enum E2846
  4569 ;; Registers used:
  4570 ;;		wreg, cstack
  4571 ;; Tracked objects:
  4572 ;;		On entry : 0/0
  4573 ;;		On exit  : 0/0
  4574 ;;		Unchanged: 0/0
  4575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4576 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4577 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4578 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4579 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4580 ;;Total ram usage:        0 bytes
  4581 ;; Hardware stack levels used: 1
  4582 ;; Hardware stack levels required when called: 5
  4583 ;; This function calls:
  4584 ;;		_I2C_MasterEnableRestart
  4585 ;; This function is called by:
  4586 ;;		_I2C_DO_TX
  4587 ;;		_I2C_MasterFsm
  4588 ;; This function uses a non-reentrant model
  4589 ;;
  4590                           
  4591                           	psect	text46
  4592   001F12                     __ptext46:
  4593                           	callstack 0
  4594   001F12                     _I2C_DO_SEND_RESTART_READ:
  4595                           	callstack 19
  4596                           
  4597                           ;mcc_generated_files/i2c_master.c: 452:     I2C_MasterEnableRestart();
  4598                           
  4599                           ;incstack = 0
  4600   001F12  ECB4  F00F         	call	_I2C_MasterEnableRestart	;wreg free
  4601                           
  4602                           ;mcc_generated_files/i2c_master.c: 453:     return I2C_SEND_ADR_READ;
  4603   001F16  0E01               	movlw	1
  4604   001F18  0012               	return		;funcret
  4605   001F1A                     __end_of_I2C_DO_SEND_RESTART_READ:
  4606                           	callstack 0
  4607                           
  4608 ;; *************** function _I2C_DO_RCEN *****************
  4609 ;; Defined at:
  4610 ;;		line 402 in file "mcc_generated_files/i2c_master.c"
  4611 ;; Parameters:    Size  Location     Type
  4612 ;;		None
  4613 ;; Auto vars:     Size  Location     Type
  4614 ;;		None
  4615 ;; Return value:  Size  Location     Type
  4616 ;;                  1    wreg      enum E2846
  4617 ;; Registers used:
  4618 ;;		wreg, cstack
  4619 ;; Tracked objects:
  4620 ;;		On entry : 0/0
  4621 ;;		On exit  : 0/0
  4622 ;;		Unchanged: 0/0
  4623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4624 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4625 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4626 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4627 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4628 ;;Total ram usage:        0 bytes
  4629 ;; Hardware stack levels used: 1
  4630 ;; Hardware stack levels required when called: 5
  4631 ;; This function calls:
  4632 ;;		_I2C_MasterStartRx
  4633 ;; This function is called by:
  4634 ;;		_I2C_MasterFsm
  4635 ;; This function uses a non-reentrant model
  4636 ;;
  4637                           
  4638                           	psect	text47
  4639   001E68                     __ptext47:
  4640                           	callstack 0
  4641   001E68                     _I2C_DO_RCEN:
  4642                           	callstack 20
  4643                           
  4644                           ;mcc_generated_files/i2c_master.c: 404:     I2C_Status.addressNackCheck = 0;
  4645                           
  4646                           ;incstack = 0
  4647   001E68  0100               	movlb	0	; () banked
  4648   001E6A  9183               	bcf	(_I2C_Status+35)& (0+255),0,b
  4649                           
  4650                           ; BSR set to: 0
  4651                           ;mcc_generated_files/i2c_master.c: 405:     I2C_MasterStartRx();
  4652   001E6C  ECAC  F00F         	call	_I2C_MasterStartRx	;wreg free
  4653                           
  4654                           ;mcc_generated_files/i2c_master.c: 406:     return I2C_RX;
  4655   001E70  0E04               	movlw	4
  4656   001E72  0012               	return		;funcret
  4657   001E74                     __end_of_I2C_DO_RCEN:
  4658                           	callstack 0
  4659                           
  4660 ;; *************** function _I2C_DO_RX *****************
  4661 ;; Defined at:
  4662 ;;		line 378 in file "mcc_generated_files/i2c_master.c"
  4663 ;; Parameters:    Size  Location     Type
  4664 ;;		None
  4665 ;; Auto vars:     Size  Location     Type
  4666 ;;		None
  4667 ;; Return value:  Size  Location     Type
  4668 ;;                  1    wreg      enum E2846
  4669 ;; Registers used:
  4670 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pcl, pclath, pclatu, tosl, prodl, prodh, cstack
  4671 ;; Tracked objects:
  4672 ;;		On entry : 0/0
  4673 ;;		On exit  : 0/0
  4674 ;;		Unchanged: 0/0
  4675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4676 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4677 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4678 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4679 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4680 ;;Total ram usage:        2 bytes
  4681 ;; Hardware stack levels used: 1
  4682 ;; Hardware stack levels required when called: 7
  4683 ;; This function calls:
  4684 ;;		Absolute function
  4685 ;;		_I2C_CallbackReturnReset
  4686 ;;		_I2C_CallbackReturnStop
  4687 ;;		_I2C_DO_RX_NACK_RESTART
  4688 ;;		_I2C_DO_RX_NACK_STOP
  4689 ;;		_I2C_MasterGetRxData
  4690 ;;		_I2C_MasterSendAck
  4691 ;;		_rd1RegCompleteHandler
  4692 ;;		_rd2RegCompleteHandler
  4693 ;;		_rdBlkRegCompleteHandler
  4694 ;;		_wr1RegCompleteHandler
  4695 ;;		_wr2RegCompleteHandler
  4696 ;; This function is called by:
  4697 ;;		_I2C_MasterFsm
  4698 ;; This function uses a non-reentrant model
  4699 ;;
  4700                           
  4701                           	psect	text48
  4702   0015D6                     __ptext48:
  4703                           	callstack 0
  4704   0015D6                     _I2C_DO_RX:
  4705                           	callstack 18
  4706                           
  4707                           ;mcc_generated_files/i2c_master.c: 380:     *I2C_Status.data_ptr++ = I2C_MasterGetRxData
      +                          ();
  4708                           
  4709                           ;incstack = 0
  4710   0015D6  ECAA  F00F         	call	_I2C_MasterGetRxData	;wreg free
  4711   0015DA  C07D  FFD9         	movff	_I2C_Status+29,fsr2l
  4712   0015DE  C07E  FFDA         	movff	_I2C_Status+30,fsr2h
  4713   0015E2  6EDF               	movwf	indf2,c
  4714   0015E4  0100               	movlb	0	; () banked
  4715   0015E6  4B7D               	infsnz	(_I2C_Status+29)& (0+255),f,b
  4716   0015E8  2B7E               	incf	(_I2C_Status+30)& (0+255),f,b
  4717                           
  4718                           ; BSR set to: 0
  4719                           ;mcc_generated_files/i2c_master.c: 381:     if(--I2C_Status.data_length)
  4720   0015EA  077F               	decf	(_I2C_Status+31)& (0+255),f,b
  4721   0015EC  A0D8               	btfss	status,0,c
  4722   0015EE  0780               	decf	(_I2C_Status+32)& (0+255),f,b
  4723   0015F0  517F               	movf	(_I2C_Status+31)& (0+255),w,b
  4724   0015F2  1180               	iorwf	(_I2C_Status+32)& (0+255),w,b
  4725   0015F4  B4D8               	btfsc	status,2,c
  4726   0015F6  D004               	goto	l294
  4727                           
  4728                           ; BSR set to: 0
  4729                           ;mcc_generated_files/i2c_master.c: 382:     {;mcc_generated_files/i2c_master.c: 383:    
      +                               I2C_MasterSendAck();
  4730   0015F8  EC97  F00F         	call	_I2C_MasterSendAck	;wreg free
  4731                           
  4732                           ;mcc_generated_files/i2c_master.c: 384:         return I2C_RCEN;
  4733   0015FC  0E05               	movlw	5
  4734   0015FE  0012               	return	
  4735   001600                     l294:
  4736                           
  4737                           ; BSR set to: 0
  4738                           ;mcc_generated_files/i2c_master.c: 387:     {;mcc_generated_files/i2c_master.c: 388:    
      +                               I2C_Status.bufferFree = 1;
  4739   001600  8783               	bsf	(_I2C_Status+35)& (0+255),3,b
  4740                           
  4741                           ;mcc_generated_files/i2c_master.c: 389:         switch(I2C_Status.callbackTable[I2C_DATA
      +                          _COMPLETE](I2C_Status.callbackPayload[I2C_DATA_COMPLETE]))
  4742   001602  D006               	goto	l4093
  4743   001604                     l4083:
  4744                           
  4745                           ;mcc_generated_files/i2c_master.c: 393:                 return I2C_DO_RX_NACK_RESTART();
  4746   001604  EC71  F00F         	call	_I2C_DO_RX_NACK_RESTART	;wreg free
  4747   001608  0012               	return	
  4748   00160A                     l4087:
  4749                           
  4750                           ;mcc_generated_files/i2c_master.c: 397:                 return I2C_DO_RX_NACK_STOP();
  4751   00160A  EC75  F00F         	call	_I2C_DO_RX_NACK_STOP	;wreg free
  4752   00160E  0012               	return	
  4753   001610                     l4093:
  4754                           
  4755                           ; BSR set to: 0
  4756   001610  C06C  F010         	movff	_I2C_Status+12,I2C_CallbackReturnReset@funPtr
  4757   001614  C06D  F011         	movff	_I2C_Status+13,I2C_CallbackReturnReset@funPtr+1
  4758   001618  D801               	call	u2068
  4759   00161A  D009               	goto	u2069
  4760   00161C                     u2068:
  4761   00161C  0005               	push	
  4762   00161E  6EFA               	movwf	pclath,c
  4763   001620  5160               	movf	_I2C_Status& (0+255),w,b
  4764   001622  6EFD               	movwf	tosl,c
  4765   001624  5161               	movf	(_I2C_Status+1)& (0+255),w,b
  4766   001626  6EFE               	movwf	tosh,c
  4767   001628  6AFF               	clrf	tosu,c
  4768   00162A  50FA               	movf	pclath,w,c
  4769   00162C  0012               	return		;indir
  4770   00162E                     u2069:
  4771   00162E  6E12               	movwf	??_I2C_DO_RX^0,c
  4772   001630  6A13               	clrf	(??_I2C_DO_RX+1)^0,c
  4773                           
  4774                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4775                           ; Switch size 1, requested type "simple"
  4776                           ; Number of cases is 1, Range of values is 0 to 0
  4777                           ; switch strategies available:
  4778                           ; Name         Instructions Cycles
  4779                           ; simple_byte            4     3 (average)
  4780                           ;	Chosen strategy is simple_byte
  4781   001632  5013               	movf	(??_I2C_DO_RX+1)^0,w,c
  4782   001634  0A00               	xorlw	0	; case 0
  4783   001636  A4D8               	btfss	status,2,c
  4784   001638  D7E8               	goto	l4087
  4785                           
  4786                           ; Switch size 1, requested type "simple"
  4787                           ; Number of cases is 4, Range of values is 1 to 4
  4788                           ; switch strategies available:
  4789                           ; Name         Instructions Cycles
  4790                           ; simple_byte           13     7 (average)
  4791                           ;	Chosen strategy is simple_byte
  4792   00163A  5012               	movf	??_I2C_DO_RX^0,w,c
  4793   00163C  0A01               	xorlw	1	; case 1
  4794   00163E  B4D8               	btfsc	status,2,c
  4795   001640  D7E4               	goto	l4087
  4796   001642  0A03               	xorlw	3	; case 2
  4797   001644  B4D8               	btfsc	status,2,c
  4798   001646  D7DE               	goto	l4083
  4799   001648  0A01               	xorlw	1	; case 3
  4800   00164A  B4D8               	btfsc	status,2,c
  4801   00164C  D7DB               	goto	l4083
  4802   00164E  0A07               	xorlw	7	; case 4
  4803   001650  D7DC               	goto	l4087
  4804   001652                     __end_of_I2C_DO_RX:
  4805                           	callstack 0
  4806                           
  4807 ;; *************** function _I2C_DO_TX *****************
  4808 ;; Defined at:
  4809 ;;		line 354 in file "mcc_generated_files/i2c_master.c"
  4810 ;; Parameters:    Size  Location     Type
  4811 ;;		None
  4812 ;; Auto vars:     Size  Location     Type
  4813 ;;		None
  4814 ;; Return value:  Size  Location     Type
  4815 ;;                  1    wreg      enum E2846
  4816 ;; Registers used:
  4817 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pcl, pclath, pclatu, tosl, prodl, prodh, cstack
  4818 ;; Tracked objects:
  4819 ;;		On entry : 0/0
  4820 ;;		On exit  : 0/0
  4821 ;;		Unchanged: 0/0
  4822 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4823 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4824 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4825 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4826 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4827 ;;Total ram usage:        2 bytes
  4828 ;; Hardware stack levels used: 1
  4829 ;; Hardware stack levels required when called: 7
  4830 ;; This function calls:
  4831 ;;		Absolute function
  4832 ;;		_I2C_CallbackReturnReset
  4833 ;;		_I2C_CallbackReturnStop
  4834 ;;		_I2C_DO_SEND_RESTART_READ
  4835 ;;		_I2C_DO_SEND_RESTART_WRITE
  4836 ;;		_I2C_DO_SEND_STOP
  4837 ;;		_I2C_MasterIsNack
  4838 ;;		_I2C_MasterSendTxData
  4839 ;;		_rd1RegCompleteHandler
  4840 ;;		_rd2RegCompleteHandler
  4841 ;;		_rdBlkRegCompleteHandler
  4842 ;;		_wr1RegCompleteHandler
  4843 ;;		_wr2RegCompleteHandler
  4844 ;; This function is called by:
  4845 ;;		_I2C_MasterFsm
  4846 ;; This function uses a non-reentrant model
  4847 ;;
  4848                           
  4849                           	psect	text49
  4850   0014C2                     __ptext49:
  4851                           	callstack 0
  4852   0014C2                     _I2C_DO_TX:
  4853                           	callstack 18
  4854                           
  4855                           ;mcc_generated_files/i2c_master.c: 356:     if(I2C_MasterIsNack())
  4856                           
  4857                           ;incstack = 0
  4858   0014C2  EC40  F00F         	call	_I2C_MasterIsNack	;wreg free
  4859   0014C6  0900               	iorlw	0
  4860   0014C8  A4D8               	btfss	status,2,c
  4861   0014CA  D00A               	goto	l4053
  4862   0014CC  D02B               	goto	l278
  4863   0014CE                     l4039:
  4864                           
  4865                           ;mcc_generated_files/i2c_master.c: 361:                 return I2C_DO_SEND_RESTART_READ(
      +                          );
  4866   0014CE  EC89  F00F         	call	_I2C_DO_SEND_RESTART_READ	;wreg free
  4867   0014D2  0012               	return	
  4868   0014D4                     l4043:
  4869                           
  4870                           ;mcc_generated_files/i2c_master.c: 363:                   return I2C_DO_SEND_RESTART_WRI
      +                          TE();
  4871   0014D4  EC85  F00F         	call	_I2C_DO_SEND_RESTART_WRITE	;wreg free
  4872   0014D8  0012               	return	
  4873   0014DA                     l4047:
  4874                           
  4875                           ;mcc_generated_files/i2c_master.c: 367:                 return I2C_DO_SEND_STOP();
  4876   0014DA  EC7D  F00F         	call	_I2C_DO_SEND_STOP	;wreg free
  4877   0014DE  0012               	return	
  4878   0014E0                     l4053:
  4879   0014E0  C072  F010         	movff	_I2C_Status+18,I2C_CallbackReturnReset@funPtr
  4880   0014E4  C073  F011         	movff	_I2C_Status+19,I2C_CallbackReturnReset@funPtr+1
  4881   0014E8  D801               	call	u2038
  4882   0014EA  D00A               	goto	u2039
  4883   0014EC                     u2038:
  4884   0014EC  0005               	push	
  4885   0014EE  6EFA               	movwf	pclath,c
  4886   0014F0  0100               	movlb	0	; () banked
  4887   0014F2  5166               	movf	(_I2C_Status+6)& (0+255),w,b
  4888   0014F4  6EFD               	movwf	tosl,c
  4889   0014F6  5167               	movf	(_I2C_Status+7)& (0+255),w,b
  4890   0014F8  6EFE               	movwf	tosh,c
  4891   0014FA  6AFF               	clrf	tosu,c
  4892   0014FC  50FA               	movf	pclath,w,c
  4893   0014FE  0012               	return		;indir
  4894   001500                     u2039:
  4895   001500  6E12               	movwf	??_I2C_DO_TX^0,c
  4896   001502  6A13               	clrf	(??_I2C_DO_TX+1)^0,c
  4897                           
  4898                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4899                           ; Switch size 1, requested type "simple"
  4900                           ; Number of cases is 1, Range of values is 0 to 0
  4901                           ; switch strategies available:
  4902                           ; Name         Instructions Cycles
  4903                           ; simple_byte            4     3 (average)
  4904                           ;	Chosen strategy is simple_byte
  4905   001504  5013               	movf	(??_I2C_DO_TX+1)^0,w,c
  4906   001506  0A00               	xorlw	0	; case 0
  4907   001508  A4D8               	btfss	status,2,c
  4908   00150A  D7E7               	goto	l4047
  4909                           
  4910                           ; Switch size 1, requested type "simple"
  4911                           ; Number of cases is 4, Range of values is 1 to 4
  4912                           ; switch strategies available:
  4913                           ; Name         Instructions Cycles
  4914                           ; simple_byte           13     7 (average)
  4915                           ;	Chosen strategy is simple_byte
  4916   00150C  5012               	movf	??_I2C_DO_TX^0,w,c
  4917   00150E  0A01               	xorlw	1	; case 1
  4918   001510  B4D8               	btfsc	status,2,c
  4919   001512  D7E3               	goto	l4047
  4920   001514  0A03               	xorlw	3	; case 2
  4921   001516  B4D8               	btfsc	status,2,c
  4922   001518  D7DA               	goto	l4039
  4923   00151A  0A01               	xorlw	1	; case 3
  4924   00151C  B4D8               	btfsc	status,2,c
  4925   00151E  D7DA               	goto	l4043
  4926   001520  0A07               	xorlw	7	; case 4
  4927   001522  D7DB               	goto	l4047
  4928   001524                     l278:
  4929                           
  4930                           ;mcc_generated_files/i2c_master.c: 371:     {;mcc_generated_files/i2c_master.c: 372:    
      +                               I2C_Status.addressNackCheck = 0;
  4931   001524  0100               	movlb	0	; () banked
  4932   001526  9183               	bcf	(_I2C_Status+35)& (0+255),0,b
  4933                           
  4934                           ; BSR set to: 0
  4935                           ;mcc_generated_files/i2c_master.c: 373:         I2C_MasterSendTxData(*I2C_Status.data_pt
      +                          r++);
  4936   001528  C07D  FFD9         	movff	_I2C_Status+29,fsr2l
  4937   00152C  C07E  FFDA         	movff	_I2C_Status+30,fsr2h
  4938   001530  4B7D               	infsnz	(_I2C_Status+29)& (0+255),f,b
  4939   001532  2B7E               	incf	(_I2C_Status+30)& (0+255),f,b
  4940   001534  50DF               	movf	indf2,w,c
  4941   001536  EC8D  F00F         	call	_I2C_MasterSendTxData
  4942                           
  4943                           ;mcc_generated_files/i2c_master.c: 374:         return (--I2C_Status.data_length)?I2C_TX
      +                          :I2C_TX_EMPTY;
  4944   00153A  0100               	movlb	0	; () banked
  4945   00153C  077F               	decf	(_I2C_Status+31)& (0+255),f,b
  4946   00153E  A0D8               	btfss	status,0,c
  4947   001540  0780               	decf	(_I2C_Status+32)& (0+255),f,b
  4948   001542  517F               	movf	(_I2C_Status+31)& (0+255),w,b
  4949   001544  1180               	iorwf	(_I2C_Status+32)& (0+255),w,b
  4950   001546  A4D8               	btfss	status,2,c
  4951   001548  D002               	goto	l4061
  4952                           
  4953                           ; BSR set to: 0
  4954   00154A  0E06               	movlw	6
  4955   00154C  0012               	return	
  4956   00154E                     l4061:
  4957                           
  4958                           ; BSR set to: 0
  4959   00154E  0E03               	movlw	3
  4960   001550  0012               	return		;funcret
  4961   001552                     __end_of_I2C_DO_TX:
  4962                           	callstack 0
  4963                           
  4964 ;; *************** function _I2C_DO_SEND_ADR_WRITE *****************
  4965 ;; Defined at:
  4966 ;;		line 347 in file "mcc_generated_files/i2c_master.c"
  4967 ;; Parameters:    Size  Location     Type
  4968 ;;		None
  4969 ;; Auto vars:     Size  Location     Type
  4970 ;;		None
  4971 ;; Return value:  Size  Location     Type
  4972 ;;                  1    wreg      enum E2846
  4973 ;; Registers used:
  4974 ;;		wreg, status,2, status,0, cstack
  4975 ;; Tracked objects:
  4976 ;;		On entry : 0/0
  4977 ;;		On exit  : 0/0
  4978 ;;		Unchanged: 0/0
  4979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4980 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4981 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4982 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4983 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4984 ;;Total ram usage:        0 bytes
  4985 ;; Hardware stack levels used: 1
  4986 ;; Hardware stack levels required when called: 5
  4987 ;; This function calls:
  4988 ;;		_I2C_MasterSendTxData
  4989 ;; This function is called by:
  4990 ;;		_I2C_MasterFsm
  4991 ;; This function uses a non-reentrant model
  4992 ;;
  4993                           
  4994                           	psect	text50
  4995   001E2C                     __ptext50:
  4996                           	callstack 0
  4997   001E2C                     _I2C_DO_SEND_ADR_WRITE:
  4998                           	callstack 20
  4999                           
  5000                           ;mcc_generated_files/i2c_master.c: 349:     I2C_Status.addressNackCheck = 1;
  5001                           
  5002                           ;incstack = 0
  5003   001E2C  0100               	movlb	0	; () banked
  5004   001E2E  8183               	bsf	(_I2C_Status+35)& (0+255),0,b
  5005                           
  5006                           ; BSR set to: 0
  5007                           ;mcc_generated_files/i2c_master.c: 350:     I2C_MasterSendTxData((uint8_t) (I2C_Status.a
      +                          ddress << 1));
  5008   001E30  517C               	movf	(_I2C_Status+28)& (0+255),w,b
  5009   001E32  257C               	addwf	(_I2C_Status+28)& (0+255),w,b
  5010   001E34  EC8D  F00F         	call	_I2C_MasterSendTxData
  5011                           
  5012                           ;mcc_generated_files/i2c_master.c: 351:     return I2C_TX;
  5013   001E38  0E03               	movlw	3
  5014   001E3A  0012               	return		;funcret
  5015   001E3C                     __end_of_I2C_DO_SEND_ADR_WRITE:
  5016                           	callstack 0
  5017                           
  5018 ;; *************** function _I2C_DO_SEND_ADR_READ *****************
  5019 ;; Defined at:
  5020 ;;		line 340 in file "mcc_generated_files/i2c_master.c"
  5021 ;; Parameters:    Size  Location     Type
  5022 ;;		None
  5023 ;; Auto vars:     Size  Location     Type
  5024 ;;		None
  5025 ;; Return value:  Size  Location     Type
  5026 ;;                  1    wreg      enum E2846
  5027 ;; Registers used:
  5028 ;;		wreg, status,0, cstack
  5029 ;; Tracked objects:
  5030 ;;		On entry : 0/0
  5031 ;;		On exit  : 0/0
  5032 ;;		Unchanged: 0/0
  5033 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5034 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5035 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5036 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5037 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5038 ;;Total ram usage:        0 bytes
  5039 ;; Hardware stack levels used: 1
  5040 ;; Hardware stack levels required when called: 5
  5041 ;; This function calls:
  5042 ;;		_I2C_MasterSendTxData
  5043 ;; This function is called by:
  5044 ;;		_I2C_MasterFsm
  5045 ;; This function uses a non-reentrant model
  5046 ;;
  5047                           
  5048                           	psect	text51
  5049   001E3C                     __ptext51:
  5050                           	callstack 0
  5051   001E3C                     _I2C_DO_SEND_ADR_READ:
  5052                           	callstack 20
  5053                           
  5054                           ;mcc_generated_files/i2c_master.c: 342:     I2C_Status.addressNackCheck = 1;
  5055                           
  5056                           ;incstack = 0
  5057   001E3C  0100               	movlb	0	; () banked
  5058   001E3E  8183               	bsf	(_I2C_Status+35)& (0+255),0,b
  5059                           
  5060                           ; BSR set to: 0
  5061                           ;mcc_generated_files/i2c_master.c: 343:     I2C_MasterSendTxData((uint8_t) (I2C_Status.a
      +                          ddress << 1 | 1));
  5062   001E40  80D8               	bsf	status,0,c
  5063   001E42  357C               	rlcf	(_I2C_Status+28)& (0+255),w,b
  5064   001E44  EC8D  F00F         	call	_I2C_MasterSendTxData
  5065                           
  5066                           ;mcc_generated_files/i2c_master.c: 344:     return I2C_RCEN;
  5067   001E48  0E05               	movlw	5
  5068   001E4A  0012               	return		;funcret
  5069   001E4C                     __end_of_I2C_DO_SEND_ADR_READ:
  5070                           	callstack 0
  5071                           
  5072 ;; *************** function _I2C_DO_IDLE *****************
  5073 ;; Defined at:
  5074 ;;		line 333 in file "mcc_generated_files/i2c_master.c"
  5075 ;; Parameters:    Size  Location     Type
  5076 ;;		None
  5077 ;; Auto vars:     Size  Location     Type
  5078 ;;		None
  5079 ;; Return value:  Size  Location     Type
  5080 ;;                  1    wreg      enum E2846
  5081 ;; Registers used:
  5082 ;;		wreg, status,2
  5083 ;; Tracked objects:
  5084 ;;		On entry : 0/0
  5085 ;;		On exit  : 0/0
  5086 ;;		Unchanged: 0/0
  5087 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5088 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5089 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5090 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5091 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5092 ;;Total ram usage:        0 bytes
  5093 ;; Hardware stack levels used: 1
  5094 ;; Hardware stack levels required when called: 4
  5095 ;; This function calls:
  5096 ;;		Nothing
  5097 ;; This function is called by:
  5098 ;;		_I2C_MasterFsm
  5099 ;; This function uses a non-reentrant model
  5100 ;;
  5101                           
  5102                           	psect	text52
  5103   001E74                     __ptext52:
  5104                           	callstack 0
  5105   001E74                     _I2C_DO_IDLE:
  5106                           	callstack 21
  5107                           
  5108                           ;mcc_generated_files/i2c_master.c: 335:     I2C_Status.busy = 0;
  5109                           
  5110                           ;incstack = 0
  5111   001E74  0100               	movlb	0	; () banked
  5112   001E76  9383               	bcf	(_I2C_Status+35)& (0+255),1,b
  5113                           
  5114                           ; BSR set to: 0
  5115                           ;mcc_generated_files/i2c_master.c: 336:     I2C_Status.error = I2C_NOERR;
  5116   001E78  0E00               	movlw	0
  5117   001E7A  6F82               	movwf	(_I2C_Status+34)& (0+255),b
  5118                           
  5119                           ; BSR set to: 0
  5120                           ;mcc_generated_files/i2c_master.c: 337:     return I2C_RESET;
  5121   001E7C  0E0E               	movlw	14
  5122                           
  5123                           ; BSR set to: 0
  5124   001E7E  0012               	return		;funcret
  5125   001E80                     __end_of_I2C_DO_IDLE:
  5126                           	callstack 0
  5127                           
  5128 ;; *************** function _I2C_DO_TX_EMPTY *****************
  5129 ;; Defined at:
  5130 ;;		line 409 in file "mcc_generated_files/i2c_master.c"
  5131 ;; Parameters:    Size  Location     Type
  5132 ;;		None
  5133 ;; Auto vars:     Size  Location     Type
  5134 ;;		None
  5135 ;; Return value:  Size  Location     Type
  5136 ;;                  1    wreg      enum E2846
  5137 ;; Registers used:
  5138 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pcl, pclath, pclatu, tosl, prodl, prodh, cstack
  5139 ;; Tracked objects:
  5140 ;;		On entry : 0/0
  5141 ;;		On exit  : 0/0
  5142 ;;		Unchanged: 0/0
  5143 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5144 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5145 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5146 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5147 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5148 ;;Total ram usage:        2 bytes
  5149 ;; Hardware stack levels used: 1
  5150 ;; Hardware stack levels required when called: 7
  5151 ;; This function calls:
  5152 ;;		Absolute function
  5153 ;;		_I2C_CallbackReturnReset
  5154 ;;		_I2C_CallbackReturnStop
  5155 ;;		_I2C_DO_SEND_RESTART
  5156 ;;		_I2C_DO_SEND_STOP
  5157 ;;		_I2C_MasterSetIrq
  5158 ;;		_rd1RegCompleteHandler
  5159 ;;		_rd2RegCompleteHandler
  5160 ;;		_rdBlkRegCompleteHandler
  5161 ;;		_wr1RegCompleteHandler
  5162 ;;		_wr2RegCompleteHandler
  5163 ;; This function is called by:
  5164 ;;		_I2C_MasterFsm
  5165 ;; This function uses a non-reentrant model
  5166 ;;
  5167                           
  5168                           	psect	text53
  5169   0017A6                     __ptext53:
  5170                           	callstack 0
  5171   0017A6                     _I2C_DO_TX_EMPTY:
  5172                           	callstack 18
  5173                           
  5174                           ;mcc_generated_files/i2c_master.c: 411:     I2C_Status.bufferFree = 1;
  5175                           
  5176                           ; BSR set to: 0
  5177                           ;incstack = 0
  5178   0017A6  0100               	movlb	0	; () banked
  5179   0017A8  8783               	bsf	(_I2C_Status+35)& (0+255),3,b
  5180                           
  5181                           ;mcc_generated_files/i2c_master.c: 412:     switch(I2C_Status.callbackTable[I2C_DATA_COM
      +                          PLETE](I2C_Status.callbackPayload[I2C_DATA_COMPLETE]))
  5182   0017AA  D00A               	goto	l4125
  5183   0017AC                     l4109:
  5184                           
  5185                           ;mcc_generated_files/i2c_master.c: 416:             return I2C_DO_SEND_RESTART();
  5186   0017AC  EC81  F00F         	call	_I2C_DO_SEND_RESTART	;wreg free
  5187   0017B0  0012               	return	
  5188   0017B2                     l4113:
  5189                           
  5190                           ;mcc_generated_files/i2c_master.c: 418:             I2C_MasterSetIrq();
  5191   0017B2  ECA8  F00F         	call	_I2C_MasterSetIrq	;wreg free
  5192                           
  5193                           ;mcc_generated_files/i2c_master.c: 419:             return I2C_TX;
  5194   0017B6  0E03               	movlw	3
  5195   0017B8  0012               	return	
  5196   0017BA                     l4119:
  5197                           
  5198                           ;mcc_generated_files/i2c_master.c: 422:             return I2C_DO_SEND_STOP();
  5199   0017BA  EC7D  F00F         	call	_I2C_DO_SEND_STOP	;wreg free
  5200   0017BE  0012               	return	
  5201   0017C0                     l4125:
  5202                           
  5203                           ; BSR set to: 0
  5204   0017C0  C06C  F010         	movff	_I2C_Status+12,I2C_CallbackReturnReset@funPtr
  5205   0017C4  C06D  F011         	movff	_I2C_Status+13,I2C_CallbackReturnReset@funPtr+1
  5206   0017C8  D801               	call	u2078
  5207   0017CA  D009               	goto	u2079
  5208   0017CC                     u2078:
  5209   0017CC  0005               	push	
  5210   0017CE  6EFA               	movwf	pclath,c
  5211   0017D0  5160               	movf	_I2C_Status& (0+255),w,b
  5212   0017D2  6EFD               	movwf	tosl,c
  5213   0017D4  5161               	movf	(_I2C_Status+1)& (0+255),w,b
  5214   0017D6  6EFE               	movwf	tosh,c
  5215   0017D8  6AFF               	clrf	tosu,c
  5216   0017DA  50FA               	movf	pclath,w,c
  5217   0017DC  0012               	return		;indir
  5218   0017DE                     u2079:
  5219   0017DE  6E12               	movwf	??_I2C_DO_TX_EMPTY^0,c
  5220   0017E0  6A13               	clrf	(??_I2C_DO_TX_EMPTY+1)^0,c
  5221                           
  5222                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5223                           ; Switch size 1, requested type "simple"
  5224                           ; Number of cases is 1, Range of values is 0 to 0
  5225                           ; switch strategies available:
  5226                           ; Name         Instructions Cycles
  5227                           ; simple_byte            4     3 (average)
  5228                           ;	Chosen strategy is simple_byte
  5229   0017E2  5013               	movf	(??_I2C_DO_TX_EMPTY+1)^0,w,c
  5230   0017E4  0A00               	xorlw	0	; case 0
  5231   0017E6  A4D8               	btfss	status,2,c
  5232   0017E8  D7E8               	goto	l4119
  5233                           
  5234                           ; Switch size 1, requested type "simple"
  5235                           ; Number of cases is 4, Range of values is 1 to 4
  5236                           ; switch strategies available:
  5237                           ; Name         Instructions Cycles
  5238                           ; simple_byte           13     7 (average)
  5239                           ;	Chosen strategy is simple_byte
  5240   0017EA  5012               	movf	??_I2C_DO_TX_EMPTY^0,w,c
  5241   0017EC  0A01               	xorlw	1	; case 1
  5242   0017EE  B4D8               	btfsc	status,2,c
  5243   0017F0  D7E4               	goto	l4119
  5244   0017F2  0A03               	xorlw	3	; case 2
  5245   0017F4  B4D8               	btfsc	status,2,c
  5246   0017F6  D7DA               	goto	l4109
  5247   0017F8  0A01               	xorlw	1	; case 3
  5248   0017FA  B4D8               	btfsc	status,2,c
  5249   0017FC  D7D7               	goto	l4109
  5250   0017FE  0A07               	xorlw	7	; case 4
  5251   001800  B4D8               	btfsc	status,2,c
  5252   001802  D7D7               	goto	l4113
  5253   001804  D7DA               	goto	l4119
  5254   001806                     __end_of_I2C_DO_TX_EMPTY:
  5255                           	callstack 0
  5256                           
  5257 ;; *************** function _I2C_MasterSetIrq *****************
  5258 ;; Defined at:
  5259 ;;		line 645 in file "mcc_generated_files/i2c_master.c"
  5260 ;; Parameters:    Size  Location     Type
  5261 ;;		None
  5262 ;; Auto vars:     Size  Location     Type
  5263 ;;		None
  5264 ;; Return value:  Size  Location     Type
  5265 ;;                  1    wreg      void 
  5266 ;; Registers used:
  5267 ;;		None
  5268 ;; Tracked objects:
  5269 ;;		On entry : 0/0
  5270 ;;		On exit  : 0/0
  5271 ;;		Unchanged: 0/0
  5272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5273 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5274 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5275 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5276 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5277 ;;Total ram usage:        0 bytes
  5278 ;; Hardware stack levels used: 1
  5279 ;; Hardware stack levels required when called: 4
  5280 ;; This function calls:
  5281 ;;		Nothing
  5282 ;; This function is called by:
  5283 ;;		_I2C_DO_TX_EMPTY
  5284 ;; This function uses a non-reentrant model
  5285 ;;
  5286                           
  5287                           	psect	text54
  5288   001F50                     __ptext54:
  5289                           	callstack 0
  5290   001F50                     _I2C_MasterSetIrq:
  5291                           	callstack 20
  5292                           
  5293                           ;mcc_generated_files/i2c_master.c: 647:     PIR1bits.SSPIF = 1;
  5294                           
  5295                           ;incstack = 0
  5296   001F50  869E               	bsf	158,3,c	;volatile
  5297   001F52  0012               	return		;funcret
  5298   001F54                     __end_of_I2C_MasterSetIrq:
  5299                           	callstack 0
  5300                           
  5301 ;; *************** function _I2C_MasterIsNack *****************
  5302 ;; Defined at:
  5303 ;;		line 598 in file "mcc_generated_files/i2c_master.c"
  5304 ;; Parameters:    Size  Location     Type
  5305 ;;		None
  5306 ;; Auto vars:     Size  Location     Type
  5307 ;;		None
  5308 ;; Return value:  Size  Location     Type
  5309 ;;                  1    wreg      _Bool 
  5310 ;; Registers used:
  5311 ;;		wreg
  5312 ;; Tracked objects:
  5313 ;;		On entry : 0/0
  5314 ;;		On exit  : 0/0
  5315 ;;		Unchanged: 0/0
  5316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5317 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5318 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5319 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5320 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5321 ;;Total ram usage:        0 bytes
  5322 ;; Hardware stack levels used: 1
  5323 ;; Hardware stack levels required when called: 4
  5324 ;; This function calls:
  5325 ;;		Nothing
  5326 ;; This function is called by:
  5327 ;;		_I2C_MasterFsm
  5328 ;;		_I2C_DO_TX
  5329 ;; This function uses a non-reentrant model
  5330 ;;
  5331                           
  5332                           	psect	text55
  5333   001E80                     __ptext55:
  5334                           	callstack 0
  5335   001E80                     _I2C_MasterIsNack:
  5336                           	callstack 21
  5337                           
  5338                           ;mcc_generated_files/i2c_master.c: 600:     return SSPCON2bits.ACKSTAT;
  5339                           
  5340                           ;incstack = 0
  5341   001E80  ACC5               	btfss	197,6,c	;volatile
  5342   001E82  D002               	goto	u2010
  5343   001E84  0E01               	movlw	1
  5344   001E86  0012               	return	
  5345   001E88                     u2010:
  5346   001E88  0E00               	movlw	0
  5347   001E8A  0012               	return		;funcret
  5348   001E8C                     __end_of_I2C_MasterIsNack:
  5349                           	callstack 0
  5350                           
  5351 ;; *************** function _I2C_MasterSendTxData *****************
  5352 ;; Defined at:
  5353 ;;		line 568 in file "mcc_generated_files/i2c_master.c"
  5354 ;; Parameters:    Size  Location     Type
  5355 ;;  data            1    wreg     unsigned char 
  5356 ;; Auto vars:     Size  Location     Type
  5357 ;;  data            1    6[COMRAM] unsigned char 
  5358 ;; Return value:  Size  Location     Type
  5359 ;;                  1    wreg      void 
  5360 ;; Registers used:
  5361 ;;		wreg
  5362 ;; Tracked objects:
  5363 ;;		On entry : 0/0
  5364 ;;		On exit  : 0/0
  5365 ;;		Unchanged: 0/0
  5366 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5367 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5368 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5369 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5370 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5371 ;;Total ram usage:        1 bytes
  5372 ;; Hardware stack levels used: 1
  5373 ;; Hardware stack levels required when called: 4
  5374 ;; This function calls:
  5375 ;;		Nothing
  5376 ;; This function is called by:
  5377 ;;		_I2C_DO_SEND_ADR_READ
  5378 ;;		_I2C_DO_SEND_ADR_WRITE
  5379 ;;		_I2C_DO_TX
  5380 ;; This function uses a non-reentrant model
  5381 ;;
  5382                           
  5383                           	psect	text56
  5384   001F1A                     __ptext56:
  5385                           	callstack 0
  5386   001F1A                     _I2C_MasterSendTxData:
  5387                           	callstack 20
  5388                           
  5389                           ;incstack = 0
  5390                           ;I2C_MasterSendTxData@data stored from wreg
  5391   001F1A  6E07               	movwf	I2C_MasterSendTxData@data^0,c
  5392                           
  5393                           ;mcc_generated_files/i2c_master.c: 568: static __attribute__((inline)) void I2C_MasterSe
      +                          ndTxData(uint8_t data);mcc_generated_files/i2c_master.c: 569: {;mcc_generated_files/i2c_
      +                          master.c: 570:     SSPBUF = data;
  5394   001F1C  C007  FFC9         	movff	I2C_MasterSendTxData@data,4041	;volatile
  5395   001F20  0012               	return		;funcret
  5396   001F22                     __end_of_I2C_MasterSendTxData:
  5397                           	callstack 0
  5398                           
  5399 ;; *************** function _I2C_MasterSendAck *****************
  5400 ;; Defined at:
  5401 ;;		line 603 in file "mcc_generated_files/i2c_master.c"
  5402 ;; Parameters:    Size  Location     Type
  5403 ;;		None
  5404 ;; Auto vars:     Size  Location     Type
  5405 ;;		None
  5406 ;; Return value:  Size  Location     Type
  5407 ;;                  1    wreg      void 
  5408 ;; Registers used:
  5409 ;;		None
  5410 ;; Tracked objects:
  5411 ;;		On entry : 0/0
  5412 ;;		On exit  : 0/0
  5413 ;;		Unchanged: 0/0
  5414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5415 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5416 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5417 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5418 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5419 ;;Total ram usage:        0 bytes
  5420 ;; Hardware stack levels used: 1
  5421 ;; Hardware stack levels required when called: 4
  5422 ;; This function calls:
  5423 ;;		Nothing
  5424 ;; This function is called by:
  5425 ;;		_I2C_DO_RX
  5426 ;;		_I2C_DO_RX_ACK
  5427 ;; This function uses a non-reentrant model
  5428 ;;
  5429                           
  5430                           	psect	text57
  5431   001F2E                     __ptext57:
  5432                           	callstack 0
  5433   001F2E                     _I2C_MasterSendAck:
  5434                           	callstack 20
  5435                           
  5436                           ;mcc_generated_files/i2c_master.c: 605:     SSPCON2bits.ACKDT = 0;
  5437                           
  5438                           ;incstack = 0
  5439   001F2E  9AC5               	bcf	197,5,c	;volatile
  5440                           
  5441                           ;mcc_generated_files/i2c_master.c: 606:     SSPCON2bits.ACKEN = 1;
  5442   001F30  88C5               	bsf	197,4,c	;volatile
  5443   001F32  0012               	return		;funcret
  5444   001F34                     __end_of_I2C_MasterSendAck:
  5445                           	callstack 0
  5446                           
  5447 ;; *************** function _I2C_MasterGetRxData *****************
  5448 ;; Defined at:
  5449 ;;		line 563 in file "mcc_generated_files/i2c_master.c"
  5450 ;; Parameters:    Size  Location     Type
  5451 ;;		None
  5452 ;; Auto vars:     Size  Location     Type
  5453 ;;		None
  5454 ;; Return value:  Size  Location     Type
  5455 ;;                  1    wreg      unsigned char 
  5456 ;; Registers used:
  5457 ;;		wreg, status,2
  5458 ;; Tracked objects:
  5459 ;;		On entry : 0/0
  5460 ;;		On exit  : 0/0
  5461 ;;		Unchanged: 0/0
  5462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5463 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5464 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5465 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5466 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5467 ;;Total ram usage:        0 bytes
  5468 ;; Hardware stack levels used: 1
  5469 ;; Hardware stack levels required when called: 4
  5470 ;; This function calls:
  5471 ;;		Nothing
  5472 ;; This function is called by:
  5473 ;;		_I2C_DO_RX
  5474 ;; This function uses a non-reentrant model
  5475 ;;
  5476                           
  5477                           	psect	text58
  5478   001F54                     __ptext58:
  5479                           	callstack 0
  5480   001F54                     _I2C_MasterGetRxData:
  5481                           	callstack 20
  5482                           
  5483                           ;mcc_generated_files/i2c_master.c: 565:     return SSPBUF;
  5484                           
  5485                           ;incstack = 0
  5486   001F54  50C9               	movf	201,w,c	;volatile
  5487   001F56  0012               	return		;funcret
  5488   001F58                     __end_of_I2C_MasterGetRxData:
  5489                           	callstack 0
  5490                           
  5491 ;; *************** function _I2C_MasterSendNack *****************
  5492 ;; Defined at:
  5493 ;;		line 609 in file "mcc_generated_files/i2c_master.c"
  5494 ;; Parameters:    Size  Location     Type
  5495 ;;		None
  5496 ;; Auto vars:     Size  Location     Type
  5497 ;;		None
  5498 ;; Return value:  Size  Location     Type
  5499 ;;                  1    wreg      void 
  5500 ;; Registers used:
  5501 ;;		None
  5502 ;; Tracked objects:
  5503 ;;		On entry : 0/0
  5504 ;;		On exit  : 0/0
  5505 ;;		Unchanged: 0/0
  5506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5507 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5508 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5509 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5510 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5511 ;;Total ram usage:        0 bytes
  5512 ;; Hardware stack levels used: 1
  5513 ;; Hardware stack levels required when called: 4
  5514 ;; This function calls:
  5515 ;;		Nothing
  5516 ;; This function is called by:
  5517 ;;		_I2C_DO_RX_NACK_STOP
  5518 ;;		_I2C_DO_RX_NACK_RESTART
  5519 ;; This function uses a non-reentrant model
  5520 ;;
  5521                           
  5522                           	psect	text59
  5523   001F34                     __ptext59:
  5524                           	callstack 0
  5525   001F34                     _I2C_MasterSendNack:
  5526                           	callstack 20
  5527                           
  5528                           ;mcc_generated_files/i2c_master.c: 611:     SSPCON2bits.ACKDT = 1;
  5529                           
  5530                           ;incstack = 0
  5531   001F34  8AC5               	bsf	197,5,c	;volatile
  5532                           
  5533                           ;mcc_generated_files/i2c_master.c: 612:     SSPCON2bits.ACKEN = 1;
  5534   001F36  88C5               	bsf	197,4,c	;volatile
  5535   001F38  0012               	return		;funcret
  5536   001F3A                     __end_of_I2C_MasterSendNack:
  5537                           	callstack 0
  5538                           
  5539 ;; *************** function _I2C_MasterStartRx *****************
  5540 ;; Defined at:
  5541 ;;		line 583 in file "mcc_generated_files/i2c_master.c"
  5542 ;; Parameters:    Size  Location     Type
  5543 ;;		None
  5544 ;; Auto vars:     Size  Location     Type
  5545 ;;		None
  5546 ;; Return value:  Size  Location     Type
  5547 ;;                  1    wreg      void 
  5548 ;; Registers used:
  5549 ;;		None
  5550 ;; Tracked objects:
  5551 ;;		On entry : 0/0
  5552 ;;		On exit  : 0/0
  5553 ;;		Unchanged: 0/0
  5554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5555 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5556 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5557 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5558 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5559 ;;Total ram usage:        0 bytes
  5560 ;; Hardware stack levels used: 1
  5561 ;; Hardware stack levels required when called: 4
  5562 ;; This function calls:
  5563 ;;		Nothing
  5564 ;; This function is called by:
  5565 ;;		_I2C_DO_RCEN
  5566 ;; This function uses a non-reentrant model
  5567 ;;
  5568                           
  5569                           	psect	text60
  5570   001F58                     __ptext60:
  5571                           	callstack 0
  5572   001F58                     _I2C_MasterStartRx:
  5573                           	callstack 20
  5574                           
  5575                           ;mcc_generated_files/i2c_master.c: 585:     SSPCON2bits.RCEN = 1;
  5576                           
  5577                           ;incstack = 0
  5578   001F58  86C5               	bsf	197,3,c	;volatile
  5579   001F5A  0012               	return		;funcret
  5580   001F5C                     __end_of_I2C_MasterStartRx:
  5581                           	callstack 0
  5582                           
  5583 ;; *************** function _I2C_CallbackReturnReset *****************
  5584 ;; Defined at:
  5585 ;;		line 525 in file "mcc_generated_files/i2c_master.c"
  5586 ;; Parameters:    Size  Location     Type
  5587 ;;  funPtr          2   15[COMRAM] PTR void 
  5588 ;;		 -> I2C_ReadDataBlock@bufferBlock(4), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
  5589 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
  5590 ;; Auto vars:     Size  Location     Type
  5591 ;;		None
  5592 ;; Return value:  Size  Location     Type
  5593 ;;                  1    wreg      enum E360
  5594 ;; Registers used:
  5595 ;;		wreg
  5596 ;; Tracked objects:
  5597 ;;		On entry : 0/0
  5598 ;;		On exit  : 0/0
  5599 ;;		Unchanged: 0/0
  5600 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5601 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5602 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5603 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5604 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5605 ;;Total ram usage:        2 bytes
  5606 ;; Hardware stack levels used: 1
  5607 ;; Hardware stack levels required when called: 4
  5608 ;; This function calls:
  5609 ;;		Nothing
  5610 ;; This function is called by:
  5611 ;;		_I2C_Open
  5612 ;;		_I2C_DO_TX
  5613 ;;		_I2C_DO_RX
  5614 ;;		_I2C_DO_TX_EMPTY
  5615 ;;		_I2C_DO_ADDRESS_NACK
  5616 ;;		_I2C_DO_RX_EMPTY
  5617 ;; This function uses a non-reentrant model
  5618 ;;
  5619                           
  5620                           	psect	text61
  5621   001F5C                     __ptext61:
  5622                           	callstack 0
  5623   001F5C                     _I2C_CallbackReturnReset:
  5624                           	callstack 20
  5625                           
  5626                           ;mcc_generated_files/i2c_master.c: 525: i2c_operations_t I2C_CallbackReturnReset(void *f
      +                          unPtr);mcc_generated_files/i2c_master.c: 526: {;mcc_generated_files/i2c_master.c: 527:  
      +                             return I2C_RESET_LINK;
  5627                           
  5628                           ;incstack = 0
  5629   001F5C  0E05               	movlw	5
  5630   001F5E  0012               	return		;funcret
  5631   001F60                     __end_of_I2C_CallbackReturnReset:
  5632                           	callstack 0
  5633                           
  5634 ;; *************** function _I2C_CallbackReturnStop *****************
  5635 ;; Defined at:
  5636 ;;		line 520 in file "mcc_generated_files/i2c_master.c"
  5637 ;; Parameters:    Size  Location     Type
  5638 ;;  funPtr          2   15[COMRAM] PTR void 
  5639 ;;		 -> I2C_ReadDataBlock@bufferBlock(4), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
  5640 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
  5641 ;; Auto vars:     Size  Location     Type
  5642 ;;		None
  5643 ;; Return value:  Size  Location     Type
  5644 ;;                  1    wreg      enum E360
  5645 ;; Registers used:
  5646 ;;		wreg
  5647 ;; Tracked objects:
  5648 ;;		On entry : 0/0
  5649 ;;		On exit  : 0/0
  5650 ;;		Unchanged: 0/0
  5651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5652 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5653 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5654 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5655 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5656 ;;Total ram usage:        2 bytes
  5657 ;; Hardware stack levels used: 1
  5658 ;; Hardware stack levels required when called: 4
  5659 ;; This function calls:
  5660 ;;		Nothing
  5661 ;; This function is called by:
  5662 ;;		_I2C_Open
  5663 ;;		_I2C_SetCallback
  5664 ;;		_I2C_DO_TX
  5665 ;;		_I2C_DO_RX
  5666 ;;		_I2C_DO_TX_EMPTY
  5667 ;;		_I2C_DO_ADDRESS_NACK
  5668 ;;		_I2C_DO_RX_EMPTY
  5669 ;; This function uses a non-reentrant model
  5670 ;;
  5671                           
  5672                           	psect	text62
  5673   001F60                     __ptext62:
  5674                           	callstack 0
  5675   001F60                     _I2C_CallbackReturnStop:
  5676                           	callstack 20
  5677                           
  5678                           ;mcc_generated_files/i2c_master.c: 520: i2c_operations_t I2C_CallbackReturnStop(void *fu
      +                          nPtr);mcc_generated_files/i2c_master.c: 521: {;mcc_generated_files/i2c_master.c: 522:   
      +                            return I2C_STOP;
  5679                           
  5680                           ;incstack = 0
  5681   001F60  0E01               	movlw	1
  5682   001F62  0012               	return		;funcret
  5683   001F64                     __end_of_I2C_CallbackReturnStop:
  5684                           	callstack 0
  5685                           
  5686 ;; *************** function _rdBlkRegCompleteHandler *****************
  5687 ;; Defined at:
  5688 ;;		line 170 in file "mcc_generated_files/examples/i2c_master_example.c"
  5689 ;; Parameters:    Size  Location     Type
  5690 ;;  ptr             2   15[COMRAM] PTR void 
  5691 ;;		 -> I2C_ReadDataBlock@bufferBlock(4), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
  5692 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
  5693 ;; Auto vars:     Size  Location     Type
  5694 ;;		None
  5695 ;; Return value:  Size  Location     Type
  5696 ;;                  1    wreg      enum E360
  5697 ;; Registers used:
  5698 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5699 ;; Tracked objects:
  5700 ;;		On entry : 0/0
  5701 ;;		On exit  : 0/0
  5702 ;;		Unchanged: 0/0
  5703 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5704 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5705 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5706 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5707 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5708 ;;Total ram usage:        2 bytes
  5709 ;; Hardware stack levels used: 1
  5710 ;; Hardware stack levels required when called: 6
  5711 ;; This function calls:
  5712 ;;		_I2C_SetBuffer
  5713 ;;		_I2C_SetDataCompleteCallback
  5714 ;; This function is called by:
  5715 ;;		_I2C_ReadDataBlock
  5716 ;;		_I2C_DO_TX
  5717 ;;		_I2C_DO_RX
  5718 ;;		_I2C_DO_TX_EMPTY
  5719 ;;		_I2C_DO_ADDRESS_NACK
  5720 ;;		_I2C_DO_RX_EMPTY
  5721 ;; This function uses a non-reentrant model
  5722 ;;
  5723                           
  5724                           	psect	text63
  5725   001ACA                     __ptext63:
  5726                           	callstack 0
  5727   001ACA                     _rdBlkRegCompleteHandler:
  5728                           	callstack 18
  5729                           
  5730                           ;mcc_generated_files/examples/i2c_master_example.c: 170: static i2c_operations_t rdBlkRe
      +                          gCompleteHandler(void *ptr);mcc_generated_files/examples/i2c_master_example.c: 171: {;mc
      +                          c_generated_files/examples/i2c_master_example.c: 172:     I2C_SetBuffer(((i2c_buffer_t *
      +                          )ptr)->data,((i2c_buffer_t*)ptr)->len);
  5731                           
  5732                           ;incstack = 0
  5733   001ACA  EE20 F002          	lfsr	2,2
  5734   001ACE  5010               	movf	rdBlkRegCompleteHandler@ptr^0,w,c
  5735   001AD0  26D9               	addwf	fsr2l,f,c
  5736   001AD2  5011               	movf	(rdBlkRegCompleteHandler@ptr+1)^0,w,c
  5737   001AD4  22DA               	addwfc	fsr2h,f,c
  5738   001AD6  CFDE F007          	movff	postinc2,I2C_SetBuffer@buffer
  5739   001ADA  CFDD F008          	movff	postdec2,I2C_SetBuffer@buffer+1
  5740   001ADE  C010  FFD9         	movff	rdBlkRegCompleteHandler@ptr,fsr2l
  5741   001AE2  C011  FFDA         	movff	rdBlkRegCompleteHandler@ptr+1,fsr2h
  5742   001AE6  CFDE F009          	movff	postinc2,I2C_SetBuffer@bufferSize
  5743   001AEA  CFDD F00A          	movff	postdec2,I2C_SetBuffer@bufferSize+1
  5744   001AEE  ECC9  F00E         	call	_I2C_SetBuffer	;wreg free
  5745                           
  5746                           ;mcc_generated_files/examples/i2c_master_example.c: 173:     I2C_SetDataCompleteCallback
      +                          (((void*)0),((void*)0));
  5747   001AF2  0E00               	movlw	0
  5748   001AF4  6E0C               	movwf	I2C_SetDataCompleteCallback@cb^0,c
  5749   001AF6  0E00               	movlw	0
  5750   001AF8  6E0D               	movwf	(I2C_SetDataCompleteCallback@cb+1)^0,c
  5751   001AFA  0E00               	movlw	0
  5752   001AFC  6E0E               	movwf	I2C_SetDataCompleteCallback@ptr^0,c
  5753   001AFE  0E00               	movlw	0
  5754   001B00  6E0F               	movwf	(I2C_SetDataCompleteCallback@ptr+1)^0,c
  5755   001B02  ECEE  F00E         	call	_I2C_SetDataCompleteCallback	;wreg free
  5756                           
  5757                           ;mcc_generated_files/examples/i2c_master_example.c: 174:     return I2C_RESTART_READ;
  5758   001B06  0E02               	movlw	2
  5759   001B08  0012               	return		;funcret
  5760   001B0A                     __end_of_rdBlkRegCompleteHandler:
  5761                           	callstack 0
  5762                           
  5763 ;; *************** function _wr1RegCompleteHandler *****************
  5764 ;; Defined at:
  5765 ;;		line 156 in file "mcc_generated_files/examples/i2c_master_example.c"
  5766 ;; Parameters:    Size  Location     Type
  5767 ;;  ptr             2   15[COMRAM] PTR void 
  5768 ;;		 -> I2C_ReadDataBlock@bufferBlock(4), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
  5769 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
  5770 ;; Auto vars:     Size  Location     Type
  5771 ;;		None
  5772 ;; Return value:  Size  Location     Type
  5773 ;;                  1    wreg      enum E360
  5774 ;; Registers used:
  5775 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5776 ;; Tracked objects:
  5777 ;;		On entry : 0/0
  5778 ;;		On exit  : 0/0
  5779 ;;		Unchanged: 0/0
  5780 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5781 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5782 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5783 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5784 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5785 ;;Total ram usage:        2 bytes
  5786 ;; Hardware stack levels used: 1
  5787 ;; Hardware stack levels required when called: 6
  5788 ;; This function calls:
  5789 ;;		_I2C_SetBuffer
  5790 ;;		_I2C_SetDataCompleteCallback
  5791 ;; This function is called by:
  5792 ;;		_I2C_Write1ByteRegister
  5793 ;;		_I2C_DO_TX
  5794 ;;		_I2C_DO_RX
  5795 ;;		_I2C_DO_TX_EMPTY
  5796 ;;		_I2C_DO_ADDRESS_NACK
  5797 ;;		_I2C_DO_RX_EMPTY
  5798 ;; This function uses a non-reentrant model
  5799 ;;
  5800                           
  5801                           	psect	text64
  5802   001BA2                     __ptext64:
  5803                           	callstack 0
  5804   001BA2                     _wr1RegCompleteHandler:
  5805                           	callstack 18
  5806                           
  5807                           ;mcc_generated_files/examples/i2c_master_example.c: 156: static i2c_operations_t wr1RegC
      +                          ompleteHandler(void *ptr);mcc_generated_files/examples/i2c_master_example.c: 157: {;mcc_
      +                          generated_files/examples/i2c_master_example.c: 158:     I2C_SetBuffer(ptr,1);
  5808                           
  5809                           ;incstack = 0
  5810   001BA2  C010  F007         	movff	wr1RegCompleteHandler@ptr,I2C_SetBuffer@buffer
  5811   001BA6  C011  F008         	movff	wr1RegCompleteHandler@ptr+1,I2C_SetBuffer@buffer+1
  5812   001BAA  0E00               	movlw	0
  5813   001BAC  6E0A               	movwf	(I2C_SetBuffer@bufferSize+1)^0,c
  5814   001BAE  0E01               	movlw	1
  5815   001BB0  6E09               	movwf	I2C_SetBuffer@bufferSize^0,c
  5816   001BB2  ECC9  F00E         	call	_I2C_SetBuffer	;wreg free
  5817                           
  5818                           ;mcc_generated_files/examples/i2c_master_example.c: 159:     I2C_SetDataCompleteCallback
      +                          (((void*)0),((void*)0));
  5819   001BB6  0E00               	movlw	0
  5820   001BB8  6E0C               	movwf	I2C_SetDataCompleteCallback@cb^0,c
  5821   001BBA  0E00               	movlw	0
  5822   001BBC  6E0D               	movwf	(I2C_SetDataCompleteCallback@cb+1)^0,c
  5823   001BBE  0E00               	movlw	0
  5824   001BC0  6E0E               	movwf	I2C_SetDataCompleteCallback@ptr^0,c
  5825   001BC2  0E00               	movlw	0
  5826   001BC4  6E0F               	movwf	(I2C_SetDataCompleteCallback@ptr+1)^0,c
  5827   001BC6  ECEE  F00E         	call	_I2C_SetDataCompleteCallback	;wreg free
  5828                           
  5829                           ;mcc_generated_files/examples/i2c_master_example.c: 160:     return I2C_CONTINUE;
  5830   001BCA  0E04               	movlw	4
  5831   001BCC  0012               	return		;funcret
  5832   001BCE                     __end_of_wr1RegCompleteHandler:
  5833                           	callstack 0
  5834                           
  5835 ;; *************** function _rd2RegCompleteHandler *****************
  5836 ;; Defined at:
  5837 ;;		line 149 in file "mcc_generated_files/examples/i2c_master_example.c"
  5838 ;; Parameters:    Size  Location     Type
  5839 ;;  ptr             2   15[COMRAM] PTR void 
  5840 ;;		 -> I2C_ReadDataBlock@bufferBlock(4), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
  5841 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
  5842 ;; Auto vars:     Size  Location     Type
  5843 ;;		None
  5844 ;; Return value:  Size  Location     Type
  5845 ;;                  1    wreg      enum E360
  5846 ;; Registers used:
  5847 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5848 ;; Tracked objects:
  5849 ;;		On entry : 0/0
  5850 ;;		On exit  : 0/0
  5851 ;;		Unchanged: 0/0
  5852 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5853 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5854 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5855 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5856 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5857 ;;Total ram usage:        2 bytes
  5858 ;; Hardware stack levels used: 1
  5859 ;; Hardware stack levels required when called: 6
  5860 ;; This function calls:
  5861 ;;		_I2C_SetBuffer
  5862 ;;		_I2C_SetDataCompleteCallback
  5863 ;; This function is called by:
  5864 ;;		_I2C_Read2ByteRegister
  5865 ;;		_I2C_DO_TX
  5866 ;;		_I2C_DO_RX
  5867 ;;		_I2C_DO_TX_EMPTY
  5868 ;;		_I2C_DO_ADDRESS_NACK
  5869 ;;		_I2C_DO_RX_EMPTY
  5870 ;; This function uses a non-reentrant model
  5871 ;;
  5872                           
  5873                           	psect	text65
  5874   001BCE                     __ptext65:
  5875                           	callstack 0
  5876   001BCE                     _rd2RegCompleteHandler:
  5877                           	callstack 18
  5878                           
  5879                           ;mcc_generated_files/examples/i2c_master_example.c: 149: static i2c_operations_t rd2RegC
      +                          ompleteHandler(void *ptr);mcc_generated_files/examples/i2c_master_example.c: 150: {;mcc_
      +                          generated_files/examples/i2c_master_example.c: 151:     I2C_SetBuffer(ptr,2);
  5880                           
  5881                           ;incstack = 0
  5882   001BCE  C010  F007         	movff	rd2RegCompleteHandler@ptr,I2C_SetBuffer@buffer
  5883   001BD2  C011  F008         	movff	rd2RegCompleteHandler@ptr+1,I2C_SetBuffer@buffer+1
  5884   001BD6  0E00               	movlw	0
  5885   001BD8  6E0A               	movwf	(I2C_SetBuffer@bufferSize+1)^0,c
  5886   001BDA  0E02               	movlw	2
  5887   001BDC  6E09               	movwf	I2C_SetBuffer@bufferSize^0,c
  5888   001BDE  ECC9  F00E         	call	_I2C_SetBuffer	;wreg free
  5889                           
  5890                           ;mcc_generated_files/examples/i2c_master_example.c: 152:     I2C_SetDataCompleteCallback
      +                          (((void*)0),((void*)0));
  5891   001BE2  0E00               	movlw	0
  5892   001BE4  6E0C               	movwf	I2C_SetDataCompleteCallback@cb^0,c
  5893   001BE6  0E00               	movlw	0
  5894   001BE8  6E0D               	movwf	(I2C_SetDataCompleteCallback@cb+1)^0,c
  5895   001BEA  0E00               	movlw	0
  5896   001BEC  6E0E               	movwf	I2C_SetDataCompleteCallback@ptr^0,c
  5897   001BEE  0E00               	movlw	0
  5898   001BF0  6E0F               	movwf	(I2C_SetDataCompleteCallback@ptr+1)^0,c
  5899   001BF2  ECEE  F00E         	call	_I2C_SetDataCompleteCallback	;wreg free
  5900                           
  5901                           ;mcc_generated_files/examples/i2c_master_example.c: 153:     return I2C_RESTART_READ;
  5902   001BF6  0E02               	movlw	2
  5903   001BF8  0012               	return		;funcret
  5904   001BFA                     __end_of_rd2RegCompleteHandler:
  5905                           	callstack 0
  5906                           
  5907 ;; *************** function _rd1RegCompleteHandler *****************
  5908 ;; Defined at:
  5909 ;;		line 142 in file "mcc_generated_files/examples/i2c_master_example.c"
  5910 ;; Parameters:    Size  Location     Type
  5911 ;;  ptr             2   15[COMRAM] PTR void 
  5912 ;;		 -> I2C_ReadDataBlock@bufferBlock(4), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
  5913 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
  5914 ;; Auto vars:     Size  Location     Type
  5915 ;;		None
  5916 ;; Return value:  Size  Location     Type
  5917 ;;                  1    wreg      enum E360
  5918 ;; Registers used:
  5919 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5920 ;; Tracked objects:
  5921 ;;		On entry : 0/0
  5922 ;;		On exit  : 0/0
  5923 ;;		Unchanged: 0/0
  5924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5925 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5926 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5927 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5928 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5929 ;;Total ram usage:        2 bytes
  5930 ;; Hardware stack levels used: 1
  5931 ;; Hardware stack levels required when called: 6
  5932 ;; This function calls:
  5933 ;;		_I2C_SetBuffer
  5934 ;;		_I2C_SetDataCompleteCallback
  5935 ;; This function is called by:
  5936 ;;		_I2C_Read1ByteRegister
  5937 ;;		_I2C_DO_TX
  5938 ;;		_I2C_DO_RX
  5939 ;;		_I2C_DO_TX_EMPTY
  5940 ;;		_I2C_DO_ADDRESS_NACK
  5941 ;;		_I2C_DO_RX_EMPTY
  5942 ;; This function uses a non-reentrant model
  5943 ;;
  5944                           
  5945                           	psect	text66
  5946   001BFA                     __ptext66:
  5947                           	callstack 0
  5948   001BFA                     _rd1RegCompleteHandler:
  5949                           	callstack 18
  5950                           
  5951                           ;mcc_generated_files/examples/i2c_master_example.c: 142: static i2c_operations_t rd1RegC
      +                          ompleteHandler(void *ptr);mcc_generated_files/examples/i2c_master_example.c: 143: {;mcc_
      +                          generated_files/examples/i2c_master_example.c: 144:     I2C_SetBuffer(ptr,1);
  5952                           
  5953                           ;incstack = 0
  5954   001BFA  C010  F007         	movff	rd1RegCompleteHandler@ptr,I2C_SetBuffer@buffer
  5955   001BFE  C011  F008         	movff	rd1RegCompleteHandler@ptr+1,I2C_SetBuffer@buffer+1
  5956   001C02  0E00               	movlw	0
  5957   001C04  6E0A               	movwf	(I2C_SetBuffer@bufferSize+1)^0,c
  5958   001C06  0E01               	movlw	1
  5959   001C08  6E09               	movwf	I2C_SetBuffer@bufferSize^0,c
  5960   001C0A  ECC9  F00E         	call	_I2C_SetBuffer	;wreg free
  5961                           
  5962                           ;mcc_generated_files/examples/i2c_master_example.c: 145:     I2C_SetDataCompleteCallback
      +                          (((void*)0),((void*)0));
  5963   001C0E  0E00               	movlw	0
  5964   001C10  6E0C               	movwf	I2C_SetDataCompleteCallback@cb^0,c
  5965   001C12  0E00               	movlw	0
  5966   001C14  6E0D               	movwf	(I2C_SetDataCompleteCallback@cb+1)^0,c
  5967   001C16  0E00               	movlw	0
  5968   001C18  6E0E               	movwf	I2C_SetDataCompleteCallback@ptr^0,c
  5969   001C1A  0E00               	movlw	0
  5970   001C1C  6E0F               	movwf	(I2C_SetDataCompleteCallback@ptr+1)^0,c
  5971   001C1E  ECEE  F00E         	call	_I2C_SetDataCompleteCallback	;wreg free
  5972                           
  5973                           ;mcc_generated_files/examples/i2c_master_example.c: 146:     return I2C_RESTART_READ;
  5974   001C22  0E02               	movlw	2
  5975   001C24  0012               	return		;funcret
  5976   001C26                     __end_of_rd1RegCompleteHandler:
  5977                           	callstack 0
  5978                           
  5979 ;; *************** function _wr2RegCompleteHandler *****************
  5980 ;; Defined at:
  5981 ;;		line 163 in file "mcc_generated_files/examples/i2c_master_example.c"
  5982 ;; Parameters:    Size  Location     Type
  5983 ;;  ptr             2   15[COMRAM] PTR void 
  5984 ;;		 -> I2C_ReadDataBlock@bufferBlock(4), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
  5985 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
  5986 ;; Auto vars:     Size  Location     Type
  5987 ;;		None
  5988 ;; Return value:  Size  Location     Type
  5989 ;;                  1    wreg      enum E360
  5990 ;; Registers used:
  5991 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5992 ;; Tracked objects:
  5993 ;;		On entry : 0/0
  5994 ;;		On exit  : 0/0
  5995 ;;		Unchanged: 0/0
  5996 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5997 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5998 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5999 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6000 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6001 ;;Total ram usage:        2 bytes
  6002 ;; Hardware stack levels used: 1
  6003 ;; Hardware stack levels required when called: 6
  6004 ;; This function calls:
  6005 ;;		_I2C_SetBuffer
  6006 ;;		_I2C_SetDataCompleteCallback
  6007 ;; This function is called by:
  6008 ;;		_I2C_Write2ByteRegister
  6009 ;;		_I2C_DO_TX
  6010 ;;		_I2C_DO_RX
  6011 ;;		_I2C_DO_TX_EMPTY
  6012 ;;		_I2C_DO_ADDRESS_NACK
  6013 ;;		_I2C_DO_RX_EMPTY
  6014 ;; This function uses a non-reentrant model
  6015 ;;
  6016                           
  6017                           	psect	text67
  6018   001C26                     __ptext67:
  6019                           	callstack 0
  6020   001C26                     _wr2RegCompleteHandler:
  6021                           	callstack 18
  6022                           
  6023                           ;mcc_generated_files/examples/i2c_master_example.c: 163: static i2c_operations_t wr2RegC
      +                          ompleteHandler(void *ptr);mcc_generated_files/examples/i2c_master_example.c: 164: {;mcc_
      +                          generated_files/examples/i2c_master_example.c: 165:     I2C_SetBuffer(ptr,2);
  6024                           
  6025                           ;incstack = 0
  6026   001C26  C010  F007         	movff	wr2RegCompleteHandler@ptr,I2C_SetBuffer@buffer
  6027   001C2A  C011  F008         	movff	wr2RegCompleteHandler@ptr+1,I2C_SetBuffer@buffer+1
  6028   001C2E  0E00               	movlw	0
  6029   001C30  6E0A               	movwf	(I2C_SetBuffer@bufferSize+1)^0,c
  6030   001C32  0E02               	movlw	2
  6031   001C34  6E09               	movwf	I2C_SetBuffer@bufferSize^0,c
  6032   001C36  ECC9  F00E         	call	_I2C_SetBuffer	;wreg free
  6033                           
  6034                           ;mcc_generated_files/examples/i2c_master_example.c: 166:     I2C_SetDataCompleteCallback
      +                          (((void*)0),((void*)0));
  6035   001C3A  0E00               	movlw	0
  6036   001C3C  6E0C               	movwf	I2C_SetDataCompleteCallback@cb^0,c
  6037   001C3E  0E00               	movlw	0
  6038   001C40  6E0D               	movwf	(I2C_SetDataCompleteCallback@cb+1)^0,c
  6039   001C42  0E00               	movlw	0
  6040   001C44  6E0E               	movwf	I2C_SetDataCompleteCallback@ptr^0,c
  6041   001C46  0E00               	movlw	0
  6042   001C48  6E0F               	movwf	(I2C_SetDataCompleteCallback@ptr+1)^0,c
  6043   001C4A  ECEE  F00E         	call	_I2C_SetDataCompleteCallback	;wreg free
  6044                           
  6045                           ;mcc_generated_files/examples/i2c_master_example.c: 167:     return I2C_CONTINUE;
  6046   001C4E  0E04               	movlw	4
  6047   001C50  0012               	return		;funcret
  6048   001C52                     __end_of_wr2RegCompleteHandler:
  6049                           	callstack 0
  6050                           
  6051 ;; *************** function _I2C_SetDataCompleteCallback *****************
  6052 ;; Defined at:
  6053 ;;		line 273 in file "mcc_generated_files/i2c_master.c"
  6054 ;; Parameters:    Size  Location     Type
  6055 ;;  cb              2   11[COMRAM] PTR FTN(PTR void ,)enum 
  6056 ;;		 -> Absolute function(1), rdBlkRegCompleteHandler(1), wr2RegCompleteHandler(1), wr1RegCompleteHandler(1), 
  6057 ;;		 -> rd2RegCompleteHandler(1), rd1RegCompleteHandler(1), 
  6058 ;;  ptr             2   13[COMRAM] PTR void 
  6059 ;;		 -> I2C_ReadDataBlock@bufferBlock(4), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
  6060 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
  6061 ;; Auto vars:     Size  Location     Type
  6062 ;;		None
  6063 ;; Return value:  Size  Location     Type
  6064 ;;                  1    wreg      void 
  6065 ;; Registers used:
  6066 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6067 ;; Tracked objects:
  6068 ;;		On entry : 0/0
  6069 ;;		On exit  : 0/0
  6070 ;;		Unchanged: 0/0
  6071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6072 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6073 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6074 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6075 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6076 ;;Total ram usage:        4 bytes
  6077 ;; Hardware stack levels used: 1
  6078 ;; Hardware stack levels required when called: 5
  6079 ;; This function calls:
  6080 ;;		_I2C_SetCallback
  6081 ;; This function is called by:
  6082 ;;		_rd1RegCompleteHandler
  6083 ;;		_rd2RegCompleteHandler
  6084 ;;		_wr1RegCompleteHandler
  6085 ;;		_wr2RegCompleteHandler
  6086 ;;		_rdBlkRegCompleteHandler
  6087 ;;		_I2C_Read1ByteRegister
  6088 ;;		_I2C_Read2ByteRegister
  6089 ;;		_I2C_Write1ByteRegister
  6090 ;;		_I2C_Write2ByteRegister
  6091 ;;		_I2C_ReadDataBlock
  6092 ;; This function uses a non-reentrant model
  6093 ;;
  6094                           
  6095                           	psect	text68
  6096   001DDC                     __ptext68:
  6097                           	callstack 0
  6098   001DDC                     _I2C_SetDataCompleteCallback:
  6099                           	callstack 18
  6100                           
  6101                           ;mcc_generated_files/i2c_master.c: 273: void I2C_SetDataCompleteCallback(i2c_callback_t 
      +                          cb, void *ptr);mcc_generated_files/i2c_master.c: 274: {;mcc_generated_files/i2c_master.c
      +                          : 275:     I2C_SetCallback(I2C_DATA_COMPLETE, cb, ptr);
  6102                           
  6103                           ;incstack = 0
  6104   001DDC  C00C  F007         	movff	I2C_SetDataCompleteCallback@cb,I2C_SetCallback@cb
  6105   001DE0  C00D  F008         	movff	I2C_SetDataCompleteCallback@cb+1,I2C_SetCallback@cb+1
  6106   001DE4  C00E  F009         	movff	I2C_SetDataCompleteCallback@ptr,I2C_SetCallback@ptr
  6107   001DE8  C00F  F00A         	movff	I2C_SetDataCompleteCallback@ptr+1,I2C_SetCallback@ptr+1
  6108   001DEC  0E00               	movlw	0
  6109   001DEE  EC9C  F00B         	call	_I2C_SetCallback
  6110   001DF2  0012               	return		;funcret
  6111   001DF4                     __end_of_I2C_SetDataCompleteCallback:
  6112                           	callstack 0
  6113                           
  6114 ;; *************** function _I2C_SetCallback *****************
  6115 ;; Defined at:
  6116 ;;		line 298 in file "mcc_generated_files/i2c_master.c"
  6117 ;; Parameters:    Size  Location     Type
  6118 ;;  idx             1    wreg     enum E2864
  6119 ;;  cb              2    6[COMRAM] PTR FTN(PTR void ,)enum 
  6120 ;;		 -> Absolute function(1), rdBlkRegCompleteHandler(1), wr2RegCompleteHandler(1), wr1RegCompleteHandler(1), 
  6121 ;;		 -> rd2RegCompleteHandler(1), rd1RegCompleteHandler(1), 
  6122 ;;  ptr             2    8[COMRAM] PTR void 
  6123 ;;		 -> I2C_ReadDataBlock@bufferBlock(4), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
  6124 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
  6125 ;; Auto vars:     Size  Location     Type
  6126 ;;  idx             1   10[COMRAM] enum E2864
  6127 ;; Return value:  Size  Location     Type
  6128 ;;                  1    wreg      void 
  6129 ;; Registers used:
  6130 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6131 ;; Tracked objects:
  6132 ;;		On entry : 0/0
  6133 ;;		On exit  : 0/0
  6134 ;;		Unchanged: 0/0
  6135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6136 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6137 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6138 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6139 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6140 ;;Total ram usage:        5 bytes
  6141 ;; Hardware stack levels used: 1
  6142 ;; Hardware stack levels required when called: 4
  6143 ;; This function calls:
  6144 ;;		Nothing
  6145 ;; This function is called by:
  6146 ;;		_I2C_SetDataCompleteCallback
  6147 ;;		_I2C_SetAddressNackCallback
  6148 ;;		_I2C_SetWriteCollisionCallback
  6149 ;;		_I2C_SetDataNackCallback
  6150 ;;		_I2C_SetTimeoutCallback
  6151 ;; This function uses a non-reentrant model
  6152 ;;
  6153                           
  6154                           	psect	text69
  6155   001738                     __ptext69:
  6156                           	callstack 0
  6157   001738                     _I2C_SetCallback:
  6158                           	callstack 24
  6159                           
  6160                           ;incstack = 0
  6161                           ;I2C_SetCallback@idx stored from wreg
  6162   001738  6E0B               	movwf	I2C_SetCallback@idx^0,c
  6163                           
  6164                           ;mcc_generated_files/i2c_master.c: 298: static void I2C_SetCallback(i2c_callbackIndex_t 
      +                          idx, i2c_callback_t cb, void *ptr);mcc_generated_files/i2c_master.c: 299: {;mcc_generate
      +                          d_files/i2c_master.c: 300:     if(cb)
  6165   00173A  5007               	movf	I2C_SetCallback@cb^0,w,c
  6166   00173C  1008               	iorwf	(I2C_SetCallback@cb+1)^0,w,c
  6167   00173E  B4D8               	btfsc	status,2,c
  6168   001740  D019               	goto	l3891
  6169                           
  6170                           ;mcc_generated_files/i2c_master.c: 301:     {;mcc_generated_files/i2c_master.c: 302:    
      +                               I2C_Status.callbackTable[idx] = cb;
  6171   001742  500B               	movf	I2C_SetCallback@idx^0,w,c
  6172   001744  0D02               	mullw	2
  6173   001746  0E60               	movlw	low _I2C_Status
  6174   001748  24F3               	addwf	243,w,c
  6175   00174A  6ED9               	movwf	fsr2l,c
  6176   00174C  0E00               	movlw	high _I2C_Status
  6177   00174E  20F4               	addwfc	prodh,w,c
  6178   001750  6EDA               	movwf	fsr2h,c
  6179   001752  C007  FFDE         	movff	I2C_SetCallback@cb,postinc2
  6180   001756  C008  FFDD         	movff	I2C_SetCallback@cb+1,postdec2
  6181                           
  6182                           ;mcc_generated_files/i2c_master.c: 303:         I2C_Status.callbackPayload[idx] = ptr;
  6183   00175A  500B               	movf	I2C_SetCallback@idx^0,w,c
  6184   00175C  0D02               	mullw	2
  6185   00175E  0E6C               	movlw	low (_I2C_Status+12)
  6186   001760  24F3               	addwf	243,w,c
  6187   001762  6ED9               	movwf	fsr2l,c
  6188   001764  0E00               	movlw	high (_I2C_Status+12)
  6189   001766  20F4               	addwfc	prodh,w,c
  6190   001768  6EDA               	movwf	fsr2h,c
  6191   00176A  C009  FFDE         	movff	I2C_SetCallback@ptr,postinc2
  6192   00176E  C00A  FFDD         	movff	I2C_SetCallback@ptr+1,postdec2
  6193                           
  6194                           ;mcc_generated_files/i2c_master.c: 304:     }
  6195   001772  0012               	return	
  6196   001774                     l3891:
  6197                           
  6198                           ;mcc_generated_files/i2c_master.c: 306:     {;mcc_generated_files/i2c_master.c: 307:    
      +                               I2C_Status.callbackTable[idx] = I2C_CallbackReturnStop;
  6199   001774  500B               	movf	I2C_SetCallback@idx^0,w,c
  6200   001776  0D02               	mullw	2
  6201   001778  0E60               	movlw	low _I2C_Status
  6202   00177A  24F3               	addwf	243,w,c
  6203   00177C  6ED9               	movwf	fsr2l,c
  6204   00177E  0E00               	movlw	high _I2C_Status
  6205   001780  20F4               	addwfc	prodh,w,c
  6206   001782  6EDA               	movwf	fsr2h,c
  6207   001784  0E60               	movlw	low _I2C_CallbackReturnStop
  6208   001786  6EDE               	movwf	postinc2,c
  6209   001788  0E1F               	movlw	high _I2C_CallbackReturnStop
  6210   00178A  6EDD               	movwf	postdec2,c
  6211                           
  6212                           ;mcc_generated_files/i2c_master.c: 308:         I2C_Status.callbackPayload[idx] = ((void
      +                          *)0);
  6213   00178C  500B               	movf	I2C_SetCallback@idx^0,w,c
  6214   00178E  0D02               	mullw	2
  6215   001790  0E6C               	movlw	low (_I2C_Status+12)
  6216   001792  24F3               	addwf	243,w,c
  6217   001794  6ED9               	movwf	fsr2l,c
  6218   001796  0E00               	movlw	high (_I2C_Status+12)
  6219   001798  20F4               	addwfc	prodh,w,c
  6220   00179A  6EDA               	movwf	fsr2h,c
  6221   00179C  0E00               	movlw	0
  6222   00179E  6EDE               	movwf	postinc2,c
  6223   0017A0  0E00               	movlw	0
  6224   0017A2  6EDD               	movwf	postdec2,c
  6225   0017A4  0012               	return		;funcret
  6226   0017A6                     __end_of_I2C_SetCallback:
  6227                           	callstack 0
  6228                           
  6229 ;; *************** function _I2C_SetBuffer *****************
  6230 ;; Defined at:
  6231 ;;		line 263 in file "mcc_generated_files/i2c_master.c"
  6232 ;; Parameters:    Size  Location     Type
  6233 ;;  buffer          2    6[COMRAM] PTR void 
  6234 ;;		 -> I2C_Read1ByteRegister@returnValue.data(3), I2C_Read2ByteRegister@returnValue.data(3), I2C_Write1ByteRegister@dat
      +a.data(3), I2C_Write2ByteRegister@data.data(3), 
  6235 ;;		 -> main@red2(3), main@red(3), main@dat(3), I2C_ReadDataBlock@reg(1), 
  6236 ;;		 -> I2C_ReadDataBlock@bufferBlock(4), bufferBlock.data(3), I2C_Write2ByteRegister@reg(1), I2C_Write2ByteRegister@dat
      +a(2), 
  6237 ;;		 -> I2C_Write1ByteRegister@reg(1), I2C_Write1ByteRegister@data(1), I2C_Read2ByteRegister@reg(1), I2C_Read2ByteRegist
      +er@returnValue(2), 
  6238 ;;		 -> NULL(0), I2C_Read1ByteRegister@reg(1), I2C_Read1ByteRegister@returnValue(1), 
  6239 ;;  bufferSize      2    8[COMRAM] unsigned int 
  6240 ;; Auto vars:     Size  Location     Type
  6241 ;;		None
  6242 ;; Return value:  Size  Location     Type
  6243 ;;                  1    wreg      void 
  6244 ;; Registers used:
  6245 ;;		wreg, status,2, status,0
  6246 ;; Tracked objects:
  6247 ;;		On entry : 0/0
  6248 ;;		On exit  : 0/0
  6249 ;;		Unchanged: 0/0
  6250 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6251 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6252 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6253 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6254 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6255 ;;Total ram usage:        4 bytes
  6256 ;; Hardware stack levels used: 1
  6257 ;; Hardware stack levels required when called: 4
  6258 ;; This function calls:
  6259 ;;		Nothing
  6260 ;; This function is called by:
  6261 ;;		_I2C_WriteNBytes
  6262 ;;		_I2C_ReadNBytes
  6263 ;;		_rd1RegCompleteHandler
  6264 ;;		_rd2RegCompleteHandler
  6265 ;;		_wr1RegCompleteHandler
  6266 ;;		_wr2RegCompleteHandler
  6267 ;;		_rdBlkRegCompleteHandler
  6268 ;;		_I2C_Read1ByteRegister
  6269 ;;		_I2C_Read2ByteRegister
  6270 ;;		_I2C_Write1ByteRegister
  6271 ;;		_I2C_Write2ByteRegister
  6272 ;;		_I2C_ReadDataBlock
  6273 ;; This function uses a non-reentrant model
  6274 ;;
  6275                           
  6276                           	psect	text70
  6277   001D92                     __ptext70:
  6278                           	callstack 0
  6279   001D92                     _I2C_SetBuffer:
  6280                           	callstack 25
  6281                           
  6282                           ;mcc_generated_files/i2c_master.c: 263: void I2C_SetBuffer(void *buffer, size_t bufferSi
      +                          ze);mcc_generated_files/i2c_master.c: 264: {;mcc_generated_files/i2c_master.c: 265:     
      +                          if(I2C_Status.bufferFree)
  6283                           
  6284                           ;incstack = 0
  6285   001D92  0100               	movlb	0	; () banked
  6286   001D94  A783               	btfss	(_I2C_Status+35)& (0+255),3,b
  6287   001D96  0012               	return	
  6288                           
  6289                           ; BSR set to: 0
  6290                           ;mcc_generated_files/i2c_master.c: 266:     {;mcc_generated_files/i2c_master.c: 267:    
      +                               I2C_Status.data_ptr = buffer;
  6291   001D98  C007  F07D         	movff	I2C_SetBuffer@buffer,_I2C_Status+29
  6292   001D9C  C008  F07E         	movff	I2C_SetBuffer@buffer+1,_I2C_Status+30
  6293                           
  6294                           ; BSR set to: 0
  6295                           ;mcc_generated_files/i2c_master.c: 268:         I2C_Status.data_length = bufferSize;
  6296   001DA0  C009  F07F         	movff	I2C_SetBuffer@bufferSize,_I2C_Status+31
  6297   001DA4  C00A  F080         	movff	I2C_SetBuffer@bufferSize+1,_I2C_Status+32
  6298                           
  6299                           ; BSR set to: 0
  6300                           ;mcc_generated_files/i2c_master.c: 269:         I2C_Status.bufferFree = 0;
  6301   001DA8  9783               	bcf	(_I2C_Status+35)& (0+255),3,b
  6302                           
  6303                           ; BSR set to: 0
  6304   001DAA  0012               	return		;funcret
  6305   001DAC                     __end_of_I2C_SetBuffer:
  6306                           	callstack 0
  6307                           
  6308 ;; *************** function _I2C_MasterStop *****************
  6309 ;; Defined at:
  6310 ;;		line 593 in file "mcc_generated_files/i2c_master.c"
  6311 ;; Parameters:    Size  Location     Type
  6312 ;;		None
  6313 ;; Auto vars:     Size  Location     Type
  6314 ;;		None
  6315 ;; Return value:  Size  Location     Type
  6316 ;;                  1    wreg      void 
  6317 ;; Registers used:
  6318 ;;		None
  6319 ;; Tracked objects:
  6320 ;;		On entry : 0/0
  6321 ;;		On exit  : 0/0
  6322 ;;		Unchanged: 0/0
  6323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6324 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6325 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6326 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6327 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6328 ;;Total ram usage:        0 bytes
  6329 ;; Hardware stack levels used: 1
  6330 ;; Hardware stack levels required when called: 4
  6331 ;; This function calls:
  6332 ;;		Nothing
  6333 ;; This function is called by:
  6334 ;;		_I2C_DO_SEND_STOP
  6335 ;; This function uses a non-reentrant model
  6336 ;;
  6337                           
  6338                           	psect	text71
  6339   001F64                     __ptext71:
  6340                           	callstack 0
  6341   001F64                     _I2C_MasterStop:
  6342                           	callstack 19
  6343                           
  6344                           ;mcc_generated_files/i2c_master.c: 595:     SSPCON2bits.PEN = 1;
  6345                           
  6346                           ; BSR set to: 0
  6347                           ;incstack = 0
  6348   001F64  84C5               	bsf	197,2,c	;volatile
  6349   001F66  0012               	return		;funcret
  6350   001F68                     __end_of_I2C_MasterStop:
  6351                           	callstack 0
  6352                           
  6353 ;; *************** function _I2C_MasterEnableRestart *****************
  6354 ;; Defined at:
  6355 ;;		line 573 in file "mcc_generated_files/i2c_master.c"
  6356 ;; Parameters:    Size  Location     Type
  6357 ;;		None
  6358 ;; Auto vars:     Size  Location     Type
  6359 ;;		None
  6360 ;; Return value:  Size  Location     Type
  6361 ;;                  1    wreg      void 
  6362 ;; Registers used:
  6363 ;;		None
  6364 ;; Tracked objects:
  6365 ;;		On entry : 0/0
  6366 ;;		On exit  : 0/0
  6367 ;;		Unchanged: 0/0
  6368 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6369 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6370 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6371 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6372 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6373 ;;Total ram usage:        0 bytes
  6374 ;; Hardware stack levels used: 1
  6375 ;; Hardware stack levels required when called: 4
  6376 ;; This function calls:
  6377 ;;		Nothing
  6378 ;; This function is called by:
  6379 ;;		_I2C_DO_SEND_RESTART_READ
  6380 ;;		_I2C_DO_SEND_RESTART_WRITE
  6381 ;;		_I2C_DO_SEND_RESTART
  6382 ;;		_I2C_DO_RX_EMPTY
  6383 ;; This function uses a non-reentrant model
  6384 ;;
  6385                           
  6386                           	psect	text72
  6387   001F68                     __ptext72:
  6388                           	callstack 0
  6389   001F68                     _I2C_MasterEnableRestart:
  6390                           	callstack 19
  6391                           
  6392                           ;mcc_generated_files/i2c_master.c: 575:     SSPCON2bits.RSEN = 1;
  6393                           
  6394                           ;incstack = 0
  6395   001F68  82C5               	bsf	197,1,c	;volatile
  6396   001F6A  0012               	return		;funcret
  6397   001F6C                     __end_of_I2C_MasterEnableRestart:
  6398                           	callstack 0
  6399                           
  6400 ;; *************** function _I2C_MasterStart *****************
  6401 ;; Defined at:
  6402 ;;		line 588 in file "mcc_generated_files/i2c_master.c"
  6403 ;; Parameters:    Size  Location     Type
  6404 ;;		None
  6405 ;; Auto vars:     Size  Location     Type
  6406 ;;		None
  6407 ;; Return value:  Size  Location     Type
  6408 ;;                  1    wreg      void 
  6409 ;; Registers used:
  6410 ;;		None
  6411 ;; Tracked objects:
  6412 ;;		On entry : 0/0
  6413 ;;		On exit  : 0/0
  6414 ;;		Unchanged: 0/0
  6415 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6416 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6417 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6418 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6419 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6420 ;;Total ram usage:        0 bytes
  6421 ;; Hardware stack levels used: 1
  6422 ;; Hardware stack levels required when called: 4
  6423 ;; This function calls:
  6424 ;;		Nothing
  6425 ;; This function is called by:
  6426 ;;		_I2C_MasterOperation
  6427 ;; This function uses a non-reentrant model
  6428 ;;
  6429                           
  6430                           	psect	text73
  6431   001F6C                     __ptext73:
  6432                           	callstack 0
  6433   001F6C                     _I2C_MasterStart:
  6434                           	callstack 23
  6435                           
  6436                           ;mcc_generated_files/i2c_master.c: 590:     SSPCON2bits.SEN = 1;
  6437                           
  6438                           ;incstack = 0
  6439   001F6C  80C5               	bsf	197,0,c	;volatile
  6440   001F6E  0012               	return		;funcret
  6441   001F70                     __end_of_I2C_MasterStart:
  6442                           	callstack 0
  6443                           
  6444 ;; *************** function _I2C_Close *****************
  6445 ;; Defined at:
  6446 ;;		line 209 in file "mcc_generated_files/i2c_master.c"
  6447 ;; Parameters:    Size  Location     Type
  6448 ;;		None
  6449 ;; Auto vars:     Size  Location     Type
  6450 ;;  returnValue     1    6[COMRAM] enum E355
  6451 ;; Return value:  Size  Location     Type
  6452 ;;                  1    wreg      enum E355
  6453 ;; Registers used:
  6454 ;;		wreg, status,2, cstack
  6455 ;; Tracked objects:
  6456 ;;		On entry : 0/0
  6457 ;;		On exit  : 0/0
  6458 ;;		Unchanged: 0/0
  6459 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6460 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6461 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6462 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6463 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6464 ;;Total ram usage:        1 bytes
  6465 ;; Hardware stack levels used: 1
  6466 ;; Hardware stack levels required when called: 5
  6467 ;; This function calls:
  6468 ;;		_I2C_MasterClearIrq
  6469 ;;		_I2C_MasterClose
  6470 ;;		_I2C_MasterDisableIrq
  6471 ;; This function is called by:
  6472 ;;		_I2C_WriteNBytes
  6473 ;;		_I2C_ReadNBytes
  6474 ;;		_I2C_Read1ByteRegister
  6475 ;;		_I2C_Read2ByteRegister
  6476 ;;		_I2C_Write1ByteRegister
  6477 ;;		_I2C_Write2ByteRegister
  6478 ;;		_I2C_ReadDataBlock
  6479 ;; This function uses a non-reentrant model
  6480 ;;
  6481                           
  6482                           	psect	text74
  6483   001D36                     __ptext74:
  6484                           	callstack 0
  6485   001D36                     _I2C_Close:
  6486                           	callstack 24
  6487                           
  6488                           ;mcc_generated_files/i2c_master.c: 211:     i2c_error_t returnValue = I2C_BUSY;
  6489                           
  6490                           ;incstack = 0
  6491   001D36  0E01               	movlw	1
  6492   001D38  6E07               	movwf	I2C_Close@returnValue^0,c
  6493                           
  6494                           ;mcc_generated_files/i2c_master.c: 212:     if(!I2C_Status.busy)
  6495   001D3A  0100               	movlb	0	; () banked
  6496   001D3C  B383               	btfsc	(_I2C_Status+35)& (0+255),1,b
  6497   001D3E  D00A               	goto	l4485
  6498                           
  6499                           ; BSR set to: 0
  6500                           ;mcc_generated_files/i2c_master.c: 213:     {;mcc_generated_files/i2c_master.c: 214:    
      +                               I2C_Status.inUse = 0;
  6501   001D40  9583               	bcf	(_I2C_Status+35)& (0+255),2,b
  6502                           
  6503                           ;mcc_generated_files/i2c_master.c: 215:         I2C_Status.address = 0xff;
  6504   001D42  697C               	setf	(_I2C_Status+28)& (0+255),b
  6505                           
  6506                           ; BSR set to: 0
  6507                           ;mcc_generated_files/i2c_master.c: 216:         I2C_MasterClearIrq();
  6508   001D44  ECBC  F00F         	call	_I2C_MasterClearIrq	;wreg free
  6509                           
  6510                           ;mcc_generated_files/i2c_master.c: 217:         I2C_MasterDisableIrq();
  6511   001D48  ECB8  F00F         	call	_I2C_MasterDisableIrq	;wreg free
  6512                           
  6513                           ;mcc_generated_files/i2c_master.c: 218:         I2C_MasterClose();
  6514   001D4C  ECBA  F00F         	call	_I2C_MasterClose	;wreg free
  6515                           
  6516                           ;mcc_generated_files/i2c_master.c: 219:         returnValue = I2C_Status.error;
  6517   001D50  C082  F007         	movff	_I2C_Status+34,I2C_Close@returnValue
  6518   001D54                     l4485:
  6519                           
  6520                           ;mcc_generated_files/i2c_master.c: 221:     return returnValue;
  6521   001D54  5007               	movf	I2C_Close@returnValue^0,w,c
  6522   001D56  0012               	return		;funcret
  6523   001D58                     __end_of_I2C_Close:
  6524                           	callstack 0
  6525                           
  6526 ;; *************** function _I2C_MasterDisableIrq *****************
  6527 ;; Defined at:
  6528 ;;		line 635 in file "mcc_generated_files/i2c_master.c"
  6529 ;; Parameters:    Size  Location     Type
  6530 ;;		None
  6531 ;; Auto vars:     Size  Location     Type
  6532 ;;		None
  6533 ;; Return value:  Size  Location     Type
  6534 ;;                  1    wreg      void 
  6535 ;; Registers used:
  6536 ;;		None
  6537 ;; Tracked objects:
  6538 ;;		On entry : 0/0
  6539 ;;		On exit  : 0/0
  6540 ;;		Unchanged: 0/0
  6541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6542 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6543 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6544 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6545 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6546 ;;Total ram usage:        0 bytes
  6547 ;; Hardware stack levels used: 1
  6548 ;; Hardware stack levels required when called: 4
  6549 ;; This function calls:
  6550 ;;		Nothing
  6551 ;; This function is called by:
  6552 ;;		_I2C_Close
  6553 ;;		_I2C_SetTimeOut
  6554 ;; This function uses a non-reentrant model
  6555 ;;
  6556                           
  6557                           	psect	text75
  6558   001F70                     __ptext75:
  6559                           	callstack 0
  6560   001F70                     _I2C_MasterDisableIrq:
  6561                           	callstack 24
  6562                           
  6563                           ;mcc_generated_files/i2c_master.c: 637:     PIE1bits.SSPIE = 0;
  6564                           
  6565                           ;incstack = 0
  6566   001F70  969D               	bcf	157,3,c	;volatile
  6567   001F72  0012               	return		;funcret
  6568   001F74                     __end_of_I2C_MasterDisableIrq:
  6569                           	callstack 0
  6570                           
  6571 ;; *************** function _I2C_MasterClose *****************
  6572 ;; Defined at:
  6573 ;;		line 557 in file "mcc_generated_files/i2c_master.c"
  6574 ;; Parameters:    Size  Location     Type
  6575 ;;		None
  6576 ;; Auto vars:     Size  Location     Type
  6577 ;;		None
  6578 ;; Return value:  Size  Location     Type
  6579 ;;                  1    wreg      void 
  6580 ;; Registers used:
  6581 ;;		None
  6582 ;; Tracked objects:
  6583 ;;		On entry : 0/0
  6584 ;;		On exit  : 0/0
  6585 ;;		Unchanged: 0/0
  6586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6587 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6588 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6589 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6590 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6591 ;;Total ram usage:        0 bytes
  6592 ;; Hardware stack levels used: 1
  6593 ;; Hardware stack levels required when called: 4
  6594 ;; This function calls:
  6595 ;;		Nothing
  6596 ;; This function is called by:
  6597 ;;		_I2C_Close
  6598 ;; This function uses a non-reentrant model
  6599 ;;
  6600                           
  6601                           	psect	text76
  6602   001F74                     __ptext76:
  6603                           	callstack 0
  6604   001F74                     _I2C_MasterClose:
  6605                           	callstack 24
  6606                           
  6607                           ;mcc_generated_files/i2c_master.c: 560:     SSPCON1bits.SSPEN = 0;
  6608                           
  6609                           ;incstack = 0
  6610   001F74  9AC6               	bcf	198,5,c	;volatile
  6611   001F76  0012               	return		;funcret
  6612   001F78                     __end_of_I2C_MasterClose:
  6613                           	callstack 0
  6614                           
  6615 ;; *************** function _I2C_MasterClearIrq *****************
  6616 ;; Defined at:
  6617 ;;		line 640 in file "mcc_generated_files/i2c_master.c"
  6618 ;; Parameters:    Size  Location     Type
  6619 ;;		None
  6620 ;; Auto vars:     Size  Location     Type
  6621 ;;		None
  6622 ;; Return value:  Size  Location     Type
  6623 ;;                  1    wreg      void 
  6624 ;; Registers used:
  6625 ;;		None
  6626 ;; Tracked objects:
  6627 ;;		On entry : 0/0
  6628 ;;		On exit  : 0/0
  6629 ;;		Unchanged: 0/0
  6630 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6631 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6632 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6633 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6634 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6635 ;;Total ram usage:        0 bytes
  6636 ;; Hardware stack levels used: 1
  6637 ;; Hardware stack levels required when called: 4
  6638 ;; This function calls:
  6639 ;;		Nothing
  6640 ;; This function is called by:
  6641 ;;		_I2C_Open
  6642 ;;		_I2C_Close
  6643 ;;		_I2C_MasterFsm
  6644 ;; This function uses a non-reentrant model
  6645 ;;
  6646                           
  6647                           	psect	text77
  6648   001F78                     __ptext77:
  6649                           	callstack 0
  6650   001F78                     _I2C_MasterClearIrq:
  6651                           	callstack 24
  6652                           
  6653                           ;mcc_generated_files/i2c_master.c: 642:     PIR1bits.SSPIF = 0;
  6654                           
  6655                           ;incstack = 0
  6656   001F78  969E               	bcf	158,3,c	;volatile
  6657   001F7A  0012               	return		;funcret
  6658   001F7C                     __end_of_I2C_MasterClearIrq:
  6659                           	callstack 0
  6660                           
  6661 ;; *************** function _INTERRUPT_InterruptManager *****************
  6662 ;; Defined at:
  6663 ;;		line 58 in file "mcc_generated_files/interrupt_manager.c"
  6664 ;; Parameters:    Size  Location     Type
  6665 ;;		None
  6666 ;; Auto vars:     Size  Location     Type
  6667 ;;		None
  6668 ;; Return value:  Size  Location     Type
  6669 ;;                  1    wreg      void 
  6670 ;; Registers used:
  6671 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pcl, pclath, pclatu, tosl, cstack
  6672 ;; Tracked objects:
  6673 ;;		On entry : 0/0
  6674 ;;		On exit  : 0/0
  6675 ;;		Unchanged: 0/0
  6676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6677 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6678 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6679 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6680 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6681 ;;Total ram usage:        4 bytes
  6682 ;; Hardware stack levels used: 1
  6683 ;; Hardware stack levels required when called: 3
  6684 ;; This function calls:
  6685 ;;		Absolute function
  6686 ;;		_EUSART_Receive_ISR
  6687 ;;		_EUSART_Transmit_ISR
  6688 ;;		_TMR0_ISR
  6689 ;;		_USART_RXC_vect
  6690 ;;		_USART_TXC_vect
  6691 ;; This function is called by:
  6692 ;;		Interrupt level 2
  6693 ;; This function uses a non-reentrant model
  6694 ;;
  6695                           
  6696                           	psect	intcode
  6697   000008                     __pintcode:
  6698                           	callstack 0
  6699   000008                     _INTERRUPT_InterruptManager:
  6700                           	callstack 18
  6701                           
  6702                           ;incstack = 0
  6703   000008  8253               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  6704   00000A  CFFA F003          	movff	pclath,??_INTERRUPT_InterruptManager
  6705   00000E  CFFB F004          	movff	pclatu,??_INTERRUPT_InterruptManager+1
  6706   000012  CFD9 F005          	movff	fsr2l,??_INTERRUPT_InterruptManager+2
  6707   000016  CFDA F006          	movff	fsr2h,??_INTERRUPT_InterruptManager+3
  6708                           
  6709                           ;mcc_generated_files/interrupt_manager.c: 61:     if(INTCONbits.TMR0IE == 1 && INTCONbit
      +                          s.TMR0IF == 1)
  6710   00001A  BAF2               	btfsc	242,5,c	;volatile
  6711   00001C  A4F2               	btfss	242,2,c	;volatile
  6712   00001E  D003               	goto	i2l723
  6713                           
  6714                           ;mcc_generated_files/interrupt_manager.c: 62:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 63:         TMR0_ISR();
  6715   000020  EC3E  F00E         	call	_TMR0_ISR	;wreg free
  6716                           
  6717                           ;mcc_generated_files/interrupt_manager.c: 64:     }
  6718   000024  D01B               	goto	i2u192_49
  6719   000026                     i2l723:
  6720   000026  ACF2               	btfss	242,6,c	;volatile
  6721   000028  D019               	goto	i2u192_49
  6722                           
  6723                           ;mcc_generated_files/interrupt_manager.c: 66:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 67:         if(PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1)
  6724   00002A  B89D               	btfsc	157,4,c	;volatile
  6725   00002C  A89E               	btfss	158,4,c	;volatile
  6726   00002E  D008               	goto	i2l726
  6727                           
  6728                           ;mcc_generated_files/interrupt_manager.c: 68:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 69:             EUSART_TxDefaultInterruptHandler();
  6729   000030  D801               	call	i2u189_48
  6730   000032  D014               	goto	i2u192_49
  6731   000034                     i2u189_48:
  6732   000034  0005               	push	
  6733   000036  6EFA               	movwf	pclath,c
  6734   000038  5047               	movf	_EUSART_TxDefaultInterruptHandler^0,w,c
  6735   00003A  6EFD               	movwf	tosl,c
  6736   00003C  5048               	movf	(_EUSART_TxDefaultInterruptHandler+1)^0,w,c
  6737   00003E  D00A               	goto	L4
  6738   000040                     i2l726:
  6739   000040  BA9D               	btfsc	157,5,c	;volatile
  6740   000042  AA9E               	btfss	158,5,c	;volatile
  6741   000044  D00B               	goto	i2u192_49
  6742                           
  6743                           ;mcc_generated_files/interrupt_manager.c: 72:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 73:             EUSART_RxDefaultInterruptHandler();
  6744   000046  D801               	call	i2u192_48
  6745   000048  D009               	goto	i2u192_49
  6746   00004A                     i2u192_48:
  6747   00004A  0005               	push	
  6748   00004C  6EFA               	movwf	pclath,c
  6749   00004E  5045               	movf	_EUSART_RxDefaultInterruptHandler^0,w,c
  6750   000050  6EFD               	movwf	tosl,c
  6751   000052  5046               	movf	(_EUSART_RxDefaultInterruptHandler+1)^0,w,c
  6752   000054                     L4:
  6753   000054  6EFE               	movwf	tosh,c
  6754   000056  6AFF               	clrf	tosu,c
  6755   000058  50FA               	movf	pclath,w,c
  6756   00005A  0012               	return		;indir
  6757   00005C                     i2u192_49:
  6758                           
  6759                           ;mcc_generated_files/interrupt_manager.c: 81:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 83:     }
  6760                           
  6761                           ;mcc_generated_files/interrupt_manager.c: 74:         }
  6762   00005C  C006  FFDA         	movff	??_INTERRUPT_InterruptManager+3,fsr2h
  6763   000060  C005  FFD9         	movff	??_INTERRUPT_InterruptManager+2,fsr2l
  6764   000064  C004  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  6765   000068  C003  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  6766   00006C  9253               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  6767   00006E  0011               	retfie		f
  6768   000070                     __end_of_INTERRUPT_InterruptManager:
  6769                           	callstack 0
  6770                           
  6771 ;; *************** function _EUSART_Transmit_ISR *****************
  6772 ;; Defined at:
  6773 ;;		line 197 in file "mcc_generated_files/eusart.c"
  6774 ;; Parameters:    Size  Location     Type
  6775 ;;		None
  6776 ;; Auto vars:     Size  Location     Type
  6777 ;;		None
  6778 ;; Return value:  Size  Location     Type
  6779 ;;                  1    wreg      void 
  6780 ;; Registers used:
  6781 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6782 ;; Tracked objects:
  6783 ;;		On entry : 0/0
  6784 ;;		On exit  : 0/0
  6785 ;;		Unchanged: 0/0
  6786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6787 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6788 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6789 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6790 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6791 ;;Total ram usage:        0 bytes
  6792 ;; Hardware stack levels used: 1
  6793 ;; This function calls:
  6794 ;;		Nothing
  6795 ;; This function is called by:
  6796 ;;		_EUSART_Initialize
  6797 ;;		_INTERRUPT_InterruptManager
  6798 ;; This function uses a non-reentrant model
  6799 ;;
  6800                           
  6801                           	psect	text79
  6802   001C52                     __ptext79:
  6803                           	callstack 0
  6804   001C52                     _EUSART_Transmit_ISR:
  6805                           	callstack 20
  6806                           
  6807                           ;mcc_generated_files/eusart.c: 201:     if(sizeof(eusartTxBuffer) > eusartTxBufferRemain
      +                          ing)
  6808                           
  6809                           ;incstack = 0
  6810   001C52  0E08               	movlw	8
  6811   001C54  604B               	cpfslt	_eusartTxBufferRemaining^0,c	;volatile
  6812   001C56  D010               	goto	i2l663
  6813                           
  6814                           ;mcc_generated_files/eusart.c: 202:     {;mcc_generated_files/eusart.c: 203:         TXR
      +                          EG = eusartTxBuffer[eusartTxTail++];
  6815   001C58  0E2C               	movlw	low _eusartTxBuffer
  6816   001C5A  2438               	addwf	_eusartTxTail^0,w,c	;volatile
  6817   001C5C  6ED9               	movwf	fsr2l,c
  6818   001C5E  6ADA               	clrf	fsr2h,c
  6819   001C60  0E00               	movlw	high _eusartTxBuffer
  6820   001C62  22DA               	addwfc	fsr2h,f,c
  6821   001C64  50DF               	movf	indf2,w,c
  6822   001C66  6EAD               	movwf	173,c	;volatile
  6823   001C68  2A38               	incf	_eusartTxTail^0,f,c	;volatile
  6824                           
  6825                           ;mcc_generated_files/eusart.c: 204:         if(sizeof(eusartTxBuffer) <= eusartTxTail)
  6826   001C6A  0E07               	movlw	7
  6827   001C6C  6438               	cpfsgt	_eusartTxTail^0,c	;volatile
  6828   001C6E  D002               	goto	i2l2435
  6829                           
  6830                           ;mcc_generated_files/eusart.c: 205:         {;mcc_generated_files/eusart.c: 206:        
      +                               eusartTxTail = 0;
  6831   001C70  0E00               	movlw	0
  6832   001C72  6E38               	movwf	_eusartTxTail^0,c	;volatile
  6833   001C74                     i2l2435:
  6834                           
  6835                           ;mcc_generated_files/eusart.c: 208:         eusartTxBufferRemaining++;
  6836   001C74  2A4B               	incf	_eusartTxBufferRemaining^0,f,c	;volatile
  6837                           
  6838                           ;mcc_generated_files/eusart.c: 209:     }
  6839   001C76  0012               	return	
  6840   001C78                     i2l663:
  6841                           
  6842                           ;mcc_generated_files/eusart.c: 211:     {;mcc_generated_files/eusart.c: 212:         PIE
      +                          1bits.TX1IE = 0;
  6843   001C78  989D               	bcf	157,4,c	;volatile
  6844   001C7A  0012               	return		;funcret
  6845   001C7C                     __end_of_EUSART_Transmit_ISR:
  6846                           	callstack 0
  6847                           
  6848 ;; *************** function _USART_TXC_vect *****************
  6849 ;; Defined at:
  6850 ;;		line 71 in file "Modbas_RTU.c"
  6851 ;; Parameters:    Size  Location     Type
  6852 ;;		None
  6853 ;; Auto vars:     Size  Location     Type
  6854 ;;		None
  6855 ;; Return value:  Size  Location     Type
  6856 ;;                  1    wreg      void 
  6857 ;; Registers used:
  6858 ;;		None
  6859 ;; Tracked objects:
  6860 ;;		On entry : 0/0
  6861 ;;		On exit  : 0/0
  6862 ;;		Unchanged: 0/0
  6863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6864 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6865 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6866 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6867 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6868 ;;Total ram usage:        0 bytes
  6869 ;; Hardware stack levels used: 1
  6870 ;; This function calls:
  6871 ;;		Nothing
  6872 ;; This function is called by:
  6873 ;;		_main
  6874 ;;		_INTERRUPT_InterruptManager
  6875 ;; This function uses a non-reentrant model
  6876 ;;
  6877                           
  6878                           	psect	text80
  6879   001F7C                     __ptext80:
  6880                           	callstack 0
  6881   001F7C                     _USART_TXC_vect:
  6882                           	callstack 20
  6883                           
  6884                           ;Modbas_RTU.c: 75:    PIE1bits.TX1IE=0;
  6885                           
  6886                           ;incstack = 0
  6887   001F7C  989D               	bcf	157,4,c	;volatile
  6888   001F7E  0012               	return		;funcret
  6889   001F80                     __end_of_USART_TXC_vect:
  6890                           	callstack 0
  6891                           
  6892 ;; *************** function _EUSART_Receive_ISR *****************
  6893 ;; Defined at:
  6894 ;;		line 216 in file "mcc_generated_files/eusart.c"
  6895 ;; Parameters:    Size  Location     Type
  6896 ;;		None
  6897 ;; Auto vars:     Size  Location     Type
  6898 ;;		None
  6899 ;; Return value:  Size  Location     Type
  6900 ;;                  1    wreg      void 
  6901 ;; Registers used:
  6902 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pcl, pclath, pclatu, tosl, cstack
  6903 ;; Tracked objects:
  6904 ;;		On entry : 0/0
  6905 ;;		On exit  : 0/0
  6906 ;;		Unchanged: 0/0
  6907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6908 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6909 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6910 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6911 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6912 ;;Total ram usage:        0 bytes
  6913 ;; Hardware stack levels used: 1
  6914 ;; Hardware stack levels required when called: 2
  6915 ;; This function calls:
  6916 ;;		Absolute function
  6917 ;;		_EUSART_DefaultErrorHandler
  6918 ;;		_EUSART_DefaultFramingErrorHandler
  6919 ;;		_EUSART_DefaultOverrunErrorHandler
  6920 ;;		_EUSART_RxDataHandler
  6921 ;; This function is called by:
  6922 ;;		_EUSART_Initialize
  6923 ;;		_INTERRUPT_InterruptManager
  6924 ;; This function uses a non-reentrant model
  6925 ;;
  6926                           
  6927                           	psect	text81
  6928   001430                     __ptext81:
  6929                           	callstack 0
  6930   001430                     _EUSART_Receive_ISR:
  6931                           	callstack 18
  6932                           
  6933                           ;mcc_generated_files/eusart.c: 219:     eusartRxStatusBuffer[eusartRxHead].status = 0;
  6934                           
  6935                           ;incstack = 0
  6936   001430  0E24               	movlw	low _eusartRxStatusBuffer
  6937   001432  2437               	addwf	_eusartRxHead^0,w,c	;volatile
  6938   001434  6ED9               	movwf	fsr2l,c
  6939   001436  6ADA               	clrf	fsr2h,c
  6940   001438  0E00               	movlw	high _eusartRxStatusBuffer
  6941   00143A  22DA               	addwfc	fsr2h,f,c
  6942   00143C  0E00               	movlw	0
  6943   00143E  6EDF               	movwf	indf2,c
  6944                           
  6945                           ;mcc_generated_files/eusart.c: 221:     if(RCSTAbits.FERR){
  6946   001440  A4AB               	btfss	171,2,c	;volatile
  6947   001442  D012               	goto	i2u157_49
  6948                           
  6949                           ;mcc_generated_files/eusart.c: 222:         eusartRxStatusBuffer[eusartRxHead].ferr = 1;
  6950   001444  0E24               	movlw	low _eusartRxStatusBuffer
  6951   001446  2437               	addwf	_eusartRxHead^0,w,c	;volatile
  6952   001448  6ED9               	movwf	fsr2l,c
  6953   00144A  6ADA               	clrf	fsr2h,c
  6954   00144C  0E00               	movlw	high _eusartRxStatusBuffer
  6955   00144E  22DA               	addwfc	fsr2h,f,c
  6956   001450  82DF               	bsf	indf2,1,c
  6957                           
  6958                           ;mcc_generated_files/eusart.c: 223:         EUSART_FramingErrorHandler();
  6959   001452  D801               	call	i2u157_48
  6960   001454  D009               	goto	i2u157_49
  6961   001456                     i2u157_48:
  6962   001456  0005               	push	
  6963   001458  6EFA               	movwf	pclath,c
  6964   00145A  5043               	movf	_EUSART_FramingErrorHandler^0,w,c
  6965   00145C  6EFD               	movwf	tosl,c
  6966   00145E  5044               	movf	(_EUSART_FramingErrorHandler+1)^0,w,c
  6967   001460  6EFE               	movwf	tosh,c
  6968   001462  6AFF               	clrf	tosu,c
  6969   001464  50FA               	movf	pclath,w,c
  6970   001466  0012               	return		;indir
  6971   001468                     i2u157_49:
  6972                           
  6973                           ;mcc_generated_files/eusart.c: 226:     if(RCSTAbits.OERR){
  6974   001468  A2AB               	btfss	171,1,c	;volatile
  6975   00146A  D013               	goto	i2u159_49
  6976                           
  6977                           ;mcc_generated_files/eusart.c: 227:         eusartRxStatusBuffer[eusartRxHead].oerr = 1;
  6978   00146C  0E24               	movlw	low _eusartRxStatusBuffer
  6979   00146E  2437               	addwf	_eusartRxHead^0,w,c	;volatile
  6980   001470  6ED9               	movwf	fsr2l,c
  6981   001472  6ADA               	clrf	fsr2h,c
  6982   001474  0E00               	movlw	high _eusartRxStatusBuffer
  6983   001476  22DA               	addwfc	fsr2h,f,c
  6984   001478  84DF               	bsf	indf2,2,c
  6985                           
  6986                           ;mcc_generated_files/eusart.c: 228:         EUSART_OverrunErrorHandler();
  6987   00147A  D801               	call	i2u159_48
  6988   00147C  D00A               	goto	i2u159_49
  6989   00147E                     i2u159_48:
  6990   00147E  0005               	push	
  6991   001480  6EFA               	movwf	pclath,c
  6992   001482  0100               	movlb	0	; () banked
  6993   001484  51DF               	movf	_EUSART_OverrunErrorHandler& (0+255),w,b
  6994   001486  6EFD               	movwf	tosl,c
  6995   001488  51E0               	movf	(_EUSART_OverrunErrorHandler+1)& (0+255),w,b
  6996   00148A  6EFE               	movwf	tosh,c
  6997   00148C  6AFF               	clrf	tosu,c
  6998   00148E  50FA               	movf	pclath,w,c
  6999   001490  0012               	return		;indir
  7000   001492                     i2u159_49:
  7001                           
  7002                           ;mcc_generated_files/eusart.c: 231:     if(eusartRxStatusBuffer[eusartRxHead].status){
  7003   001492  0E24               	movlw	low _eusartRxStatusBuffer
  7004   001494  2437               	addwf	_eusartRxHead^0,w,c	;volatile
  7005   001496  6ED9               	movwf	fsr2l,c
  7006   001498  6ADA               	clrf	fsr2h,c
  7007   00149A  0E00               	movlw	high _eusartRxStatusBuffer
  7008   00149C  22DA               	addwfc	fsr2h,f,c
  7009   00149E  50DF               	movf	indf2,w,c
  7010   0014A0  B4D8               	btfsc	status,2,c
  7011   0014A2  D00C               	goto	i2l3537
  7012                           
  7013                           ;mcc_generated_files/eusart.c: 232:         EUSART_ErrorHandler();
  7014   0014A4  D801               	call	i2u161_48
  7015   0014A6  0012               	return	
  7016   0014A8                     i2u161_48:
  7017   0014A8  0005               	push	
  7018   0014AA  6EFA               	movwf	pclath,c
  7019   0014AC  0100               	movlb	0	; () banked
  7020   0014AE  51DD               	movf	_EUSART_ErrorHandler& (0+255),w,b
  7021   0014B0  6EFD               	movwf	tosl,c
  7022   0014B2  51DE               	movf	(_EUSART_ErrorHandler+1)& (0+255),w,b
  7023   0014B4  6EFE               	movwf	tosh,c
  7024   0014B6  6AFF               	clrf	tosu,c
  7025   0014B8  50FA               	movf	pclath,w,c
  7026   0014BA  0012               	return		;indir
  7027   0014BC                     i2l3537:
  7028                           
  7029                           ;mcc_generated_files/eusart.c: 234:         EUSART_RxDataHandler();
  7030   0014BC  ECAC  F00E         	call	_EUSART_RxDataHandler	;wreg free
  7031   0014C0  0012               	return		;funcret
  7032   0014C2                     __end_of_EUSART_Receive_ISR:
  7033                           	callstack 0
  7034                           
  7035 ;; *************** function _USART_RXC_vect *****************
  7036 ;; Defined at:
  7037 ;;		line 41 in file "Modbas_RTU.c"
  7038 ;; Parameters:    Size  Location     Type
  7039 ;;		None
  7040 ;; Auto vars:     Size  Location     Type
  7041 ;;  TempModbas      1    1[COMRAM] unsigned char 
  7042 ;; Return value:  Size  Location     Type
  7043 ;;                  1    wreg      void 
  7044 ;; Registers used:
  7045 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7046 ;; Tracked objects:
  7047 ;;		On entry : 0/0
  7048 ;;		On exit  : 0/0
  7049 ;;		Unchanged: 0/0
  7050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7051 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7052 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7053 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7054 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7055 ;;Total ram usage:        2 bytes
  7056 ;; Hardware stack levels used: 1
  7057 ;; Hardware stack levels required when called: 1
  7058 ;; This function calls:
  7059 ;;		_TMR0_Reload
  7060 ;;		_TMR0_StartTimer
  7061 ;; This function is called by:
  7062 ;;		_main
  7063 ;;		_INTERRUPT_InterruptManager
  7064 ;; This function uses a non-reentrant model
  7065 ;;
  7066                           
  7067                           	psect	text82
  7068   001912                     __ptext82:
  7069                           	callstack 0
  7070   001912                     _USART_RXC_vect:
  7071                           	callstack 19
  7072                           
  7073                           ;Modbas_RTU.c: 43:      unsigned char TempModbas = RCREG;
  7074                           
  7075                           ;incstack = 0
  7076   001912  CFAE F002          	movff	4014,USART_RXC_vect@TempModbas	;volatile
  7077                           
  7078                           ;Modbas_RTU.c: 45:  TMR0_Reload();
  7079   001916  EC9D  F00F         	call	_TMR0_Reload	;wreg free
  7080                           
  7081                           ;Modbas_RTU.c: 46:  if (!Bit_action_ModbasRtu.b2)
  7082   00191A  B43C               	btfsc	_Bit_action_ModbasRtu^0,2,c
  7083   00191C  0012               	return	
  7084                           
  7085                           ;Modbas_RTU.c: 47:   {;Modbas_RTU.c: 48:   if (!Bit_action_ModbasRtu.b0)
  7086   00191E  B03C               	btfsc	_Bit_action_ModbasRtu^0,0,c
  7087   001920  D017               	goto	i2l3559
  7088                           
  7089                           ;Modbas_RTU.c: 49:    {;Modbas_RTU.c: 50:    Bit_action_ModbasRtu.b0 = 1;
  7090   001922  803C               	bsf	_Bit_action_ModbasRtu^0,0,c
  7091                           
  7092                           ;Modbas_RTU.c: 51:    if (TempModbas == 0x31 )
  7093   001924  0E31               	movlw	49
  7094   001926  1802               	xorwf	USART_RXC_vect@TempModbas^0,w,c
  7095   001928  A4D8               	btfss	status,2,c
  7096   00192A  D00E               	goto	i2l3555
  7097                           
  7098                           ;Modbas_RTU.c: 52:     {;Modbas_RTU.c: 53:     Bit_action_ModbasRtu.b1 = 1;
  7099   00192C  823C               	bsf	_Bit_action_ModbasRtu^0,1,c
  7100   00192E  A289               	btfss	137,1,c	;volatile
  7101   001930  D002               	goto	i2u165_40
  7102   001932  0E01               	movlw	1
  7103   001934  D001               	goto	i2u165_46
  7104   001936                     i2u165_40:
  7105   001936  0E00               	movlw	0
  7106   001938                     i2u165_46:
  7107   001938  0AFF               	xorlw	255
  7108   00193A  6E01               	movwf	??_USART_RXC_vect^0,c
  7109   00193C  4601               	rlncf	??_USART_RXC_vect^0,f,c
  7110   00193E  5089               	movf	137,w,c	;volatile
  7111   001940  1801               	xorwf	??_USART_RXC_vect^0,w,c
  7112   001942  0BFD               	andlw	-3
  7113   001944  1801               	xorwf	??_USART_RXC_vect^0,w,c
  7114   001946  6E89               	movwf	137,c	;volatile
  7115   001948                     i2l3555:
  7116                           
  7117                           ;Modbas_RTU.c: 57:    quantity_Data_ModbasRtu = 0;
  7118   001948  0E00               	movlw	0
  7119   00194A  6E3E               	movwf	_quantity_Data_ModbasRtu^0,c
  7120                           
  7121                           ;Modbas_RTU.c: 58:    TMR0_StartTimer();
  7122   00194C  ECC0  F00F         	call	_TMR0_StartTimer	;wreg free
  7123   001950                     i2l3559:
  7124                           
  7125                           ;Modbas_RTU.c: 60:   if (Bit_action_ModbasRtu.b1 == 1)
  7126   001950  A23C               	btfss	_Bit_action_ModbasRtu^0,1,c
  7127   001952  0012               	return	
  7128                           
  7129                           ;Modbas_RTU.c: 62:    {;Modbas_RTU.c: 63:      Danie_Rx_ModbasRtu[quantity_Data_ModbasRt
      +                          u] = TempModbas;
  7130   001954  0E8C               	movlw	low _Danie_Rx_ModbasRtu
  7131   001956  243E               	addwf	_quantity_Data_ModbasRtu^0,w,c
  7132   001958  6ED9               	movwf	fsr2l,c
  7133   00195A  6ADA               	clrf	fsr2h,c
  7134   00195C  0E00               	movlw	high _Danie_Rx_ModbasRtu
  7135   00195E  22DA               	addwfc	fsr2h,f,c
  7136   001960  C002  FFDF         	movff	USART_RXC_vect@TempModbas,indf2
  7137                           
  7138                           ;Modbas_RTU.c: 64:      quantity_Data_ModbasRtu ++;
  7139   001964  2A3E               	incf	_quantity_Data_ModbasRtu^0,f,c
  7140   001966  0012               	return		;funcret
  7141   001968                     __end_of_USART_RXC_vect:
  7142                           	callstack 0
  7143                           
  7144 ;; *************** function _TMR0_StartTimer *****************
  7145 ;; Defined at:
  7146 ;;		line 95 in file "mcc_generated_files/tmr0.c"
  7147 ;; Parameters:    Size  Location     Type
  7148 ;;		None
  7149 ;; Auto vars:     Size  Location     Type
  7150 ;;		None
  7151 ;; Return value:  Size  Location     Type
  7152 ;;                  1    wreg      void 
  7153 ;; Registers used:
  7154 ;;		None
  7155 ;; Tracked objects:
  7156 ;;		On entry : 0/0
  7157 ;;		On exit  : 0/0
  7158 ;;		Unchanged: 0/0
  7159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7160 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7161 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7162 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7163 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7164 ;;Total ram usage:        0 bytes
  7165 ;; Hardware stack levels used: 1
  7166 ;; This function calls:
  7167 ;;		Nothing
  7168 ;; This function is called by:
  7169 ;;		_USART_RXC_vect
  7170 ;; This function uses a non-reentrant model
  7171 ;;
  7172                           
  7173                           	psect	text83
  7174   001F80                     __ptext83:
  7175                           	callstack 0
  7176   001F80                     _TMR0_StartTimer:
  7177                           	callstack 19
  7178                           
  7179                           ;mcc_generated_files/tmr0.c: 98:     T0CONbits.TMR0ON = 1;
  7180                           
  7181                           ;incstack = 0
  7182   001F80  8ED5               	bsf	213,7,c	;volatile
  7183   001F82  0012               	return		;funcret
  7184   001F84                     __end_of_TMR0_StartTimer:
  7185                           	callstack 0
  7186                           
  7187 ;; *************** function _TMR0_Reload *****************
  7188 ;; Defined at:
  7189 ;;		line 123 in file "mcc_generated_files/tmr0.c"
  7190 ;; Parameters:    Size  Location     Type
  7191 ;;		None
  7192 ;; Auto vars:     Size  Location     Type
  7193 ;;		None
  7194 ;; Return value:  Size  Location     Type
  7195 ;;                  1    wreg      void 
  7196 ;; Registers used:
  7197 ;;		None
  7198 ;; Tracked objects:
  7199 ;;		On entry : 0/0
  7200 ;;		On exit  : 0/0
  7201 ;;		Unchanged: 0/0
  7202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7203 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7204 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7205 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7206 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7207 ;;Total ram usage:        0 bytes
  7208 ;; Hardware stack levels used: 1
  7209 ;; This function calls:
  7210 ;;		Nothing
  7211 ;; This function is called by:
  7212 ;;		_USART_RXC_vect
  7213 ;; This function uses a non-reentrant model
  7214 ;;
  7215                           
  7216                           	psect	text84
  7217   001F3A                     __ptext84:
  7218                           	callstack 0
  7219   001F3A                     _TMR0_Reload:
  7220                           	callstack 19
  7221                           
  7222                           ;mcc_generated_files/tmr0.c: 126:     TMR0L = timer0ReloadVal;
  7223                           
  7224                           ;incstack = 0
  7225   001F3A  C04C  FFD6         	movff	_timer0ReloadVal,4054	;volatile
  7226   001F3E  0012               	return		;funcret
  7227   001F40                     __end_of_TMR0_Reload:
  7228                           	callstack 0
  7229                           
  7230 ;; *************** function _TMR0_ISR *****************
  7231 ;; Defined at:
  7232 ;;		line 130 in file "mcc_generated_files/tmr0.c"
  7233 ;; Parameters:    Size  Location     Type
  7234 ;;		None
  7235 ;; Auto vars:     Size  Location     Type
  7236 ;;		None
  7237 ;; Return value:  Size  Location     Type
  7238 ;;                  1    wreg      void 
  7239 ;; Registers used:
  7240 ;;		wreg, status,2, status,0, pcl, pclath, pclatu, tosl, cstack
  7241 ;; Tracked objects:
  7242 ;;		On entry : 0/0
  7243 ;;		On exit  : 0/0
  7244 ;;		Unchanged: 0/0
  7245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7246 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7247 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7248 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7249 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7250 ;;Total ram usage:        0 bytes
  7251 ;; Hardware stack levels used: 1
  7252 ;; Hardware stack levels required when called: 2
  7253 ;; This function calls:
  7254 ;;		Absolute function
  7255 ;;		_TIMER0_COMP_vect
  7256 ;;		_TMR0_DefaultInterruptHandler
  7257 ;; This function is called by:
  7258 ;;		_INTERRUPT_InterruptManager
  7259 ;; This function uses a non-reentrant model
  7260 ;;
  7261                           
  7262                           	psect	text85
  7263   001C7C                     __ptext85:
  7264                           	callstack 0
  7265   001C7C                     _TMR0_ISR:
  7266                           	callstack 18
  7267                           
  7268                           ;mcc_generated_files/tmr0.c: 132:  TIMER0_COMP_vect () ;
  7269                           
  7270                           ;incstack = 0
  7271   001C7C  EC26  F00F         	call	_TIMER0_COMP_vect	;wreg free
  7272                           
  7273                           ;mcc_generated_files/tmr0.c: 135:     INTCONbits.TMR0IF = 0;
  7274   001C80  94F2               	bcf	242,2,c	;volatile
  7275                           
  7276                           ;mcc_generated_files/tmr0.c: 138:     TMR0L = timer0ReloadVal;
  7277   001C82  C04C  FFD6         	movff	_timer0ReloadVal,4054	;volatile
  7278                           
  7279                           ;mcc_generated_files/tmr0.c: 140:     if(TMR0_InterruptHandler)
  7280   001C86  5049               	movf	_TMR0_InterruptHandler^0,w,c
  7281   001C88  104A               	iorwf	(_TMR0_InterruptHandler+1)^0,w,c
  7282   001C8A  B4D8               	btfsc	status,2,c
  7283   001C8C  0012               	return	
  7284                           
  7285                           ;mcc_generated_files/tmr0.c: 141:     {;mcc_generated_files/tmr0.c: 142:         TMR0_In
      +                          terruptHandler();
  7286   001C8E  D801               	call	i2u55_48
  7287   001C90  0012               	return	
  7288   001C92                     i2u55_48:
  7289   001C92  0005               	push	
  7290   001C94  6EFA               	movwf	pclath,c
  7291   001C96  5049               	movf	_TMR0_InterruptHandler^0,w,c
  7292   001C98  6EFD               	movwf	tosl,c
  7293   001C9A  504A               	movf	(_TMR0_InterruptHandler+1)^0,w,c
  7294   001C9C  6EFE               	movwf	tosh,c
  7295   001C9E  6AFF               	clrf	tosu,c
  7296   001CA0  50FA               	movf	pclath,w,c
  7297   001CA2  0012               	return		;indir
  7298   001CA4                     __end_of_TMR0_ISR:
  7299                           	callstack 0
  7300                           
  7301 ;; *************** function _TMR0_DefaultInterruptHandler *****************
  7302 ;; Defined at:
  7303 ;;		line 153 in file "mcc_generated_files/tmr0.c"
  7304 ;; Parameters:    Size  Location     Type
  7305 ;;		None
  7306 ;; Auto vars:     Size  Location     Type
  7307 ;;		None
  7308 ;; Return value:  Size  Location     Type
  7309 ;;                  1    wreg      void 
  7310 ;; Registers used:
  7311 ;;		None
  7312 ;; Tracked objects:
  7313 ;;		On entry : 0/0
  7314 ;;		On exit  : 0/0
  7315 ;;		Unchanged: 0/0
  7316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7317 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7318 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7319 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7320 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7321 ;;Total ram usage:        0 bytes
  7322 ;; Hardware stack levels used: 1
  7323 ;; This function calls:
  7324 ;;		Nothing
  7325 ;; This function is called by:
  7326 ;;		_TMR0_Initialize
  7327 ;;		_TMR0_ISR
  7328 ;; This function uses a non-reentrant model
  7329 ;;
  7330                           
  7331                           	psect	text86
  7332   001F88                     __ptext86:
  7333                           	callstack 0
  7334   001F88                     _TMR0_DefaultInterruptHandler:
  7335                           	callstack 19
  7336                           
  7337                           ;incstack = 0
  7338   001F88  0012               	return		;funcret
  7339   001F8A                     __end_of_TMR0_DefaultInterruptHandler:
  7340                           	callstack 0
  7341                           
  7342 ;; *************** function _TIMER0_COMP_vect *****************
  7343 ;; Defined at:
  7344 ;;		line 24 in file "Modbas_RTU.c"
  7345 ;; Parameters:    Size  Location     Type
  7346 ;;		None
  7347 ;; Auto vars:     Size  Location     Type
  7348 ;;		None
  7349 ;; Return value:  Size  Location     Type
  7350 ;;                  1    wreg      void 
  7351 ;; Registers used:
  7352 ;;		cstack
  7353 ;; Tracked objects:
  7354 ;;		On entry : 0/0
  7355 ;;		On exit  : 0/0
  7356 ;;		Unchanged: 0/0
  7357 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7358 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7359 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7360 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7361 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7362 ;;Total ram usage:        0 bytes
  7363 ;; Hardware stack levels used: 1
  7364 ;; Hardware stack levels required when called: 1
  7365 ;; This function calls:
  7366 ;;		_TMR0_StopTimer
  7367 ;; This function is called by:
  7368 ;;		_TMR0_ISR
  7369 ;; This function uses a non-reentrant model
  7370 ;;
  7371                           
  7372                           	psect	text87
  7373   001E4C                     __ptext87:
  7374                           	callstack 0
  7375   001E4C                     _TIMER0_COMP_vect:
  7376                           	callstack 18
  7377                           
  7378                           ;Modbas_RTU.c: 27:    Bit_action_ModbasRtu.b0 = 0;
  7379                           
  7380                           ;incstack = 0
  7381   001E4C  903C               	bcf	_Bit_action_ModbasRtu^0,0,c
  7382                           
  7383                           ;Modbas_RTU.c: 28:    TMR0_StopTimer();
  7384   001E4E  ECC2  F00F         	call	_TMR0_StopTimer	;wreg free
  7385                           
  7386                           ;Modbas_RTU.c: 29:       if ( Bit_action_ModbasRtu.b1)
  7387   001E52  A23C               	btfss	_Bit_action_ModbasRtu^0,1,c
  7388   001E54  0012               	return	
  7389                           
  7390                           ;Modbas_RTU.c: 30:        {;Modbas_RTU.c: 31:       Bit_action_ModbasRtu.b1 = 0;
  7391   001E56  923C               	bcf	_Bit_action_ModbasRtu^0,1,c
  7392                           
  7393                           ;Modbas_RTU.c: 34:    Bit_action_ModbasRtu.b2 = 1;
  7394   001E58  843C               	bsf	_Bit_action_ModbasRtu^0,2,c
  7395   001E5A  0012               	return		;funcret
  7396   001E5C                     __end_of_TIMER0_COMP_vect:
  7397                           	callstack 0
  7398                           
  7399 ;; *************** function _TMR0_StopTimer *****************
  7400 ;; Defined at:
  7401 ;;		line 101 in file "mcc_generated_files/tmr0.c"
  7402 ;; Parameters:    Size  Location     Type
  7403 ;;		None
  7404 ;; Auto vars:     Size  Location     Type
  7405 ;;		None
  7406 ;; Return value:  Size  Location     Type
  7407 ;;                  1    wreg      void 
  7408 ;; Registers used:
  7409 ;;		None
  7410 ;; Tracked objects:
  7411 ;;		On entry : 0/0
  7412 ;;		On exit  : 0/0
  7413 ;;		Unchanged: 0/0
  7414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7415 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7416 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7417 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7418 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7419 ;;Total ram usage:        0 bytes
  7420 ;; Hardware stack levels used: 1
  7421 ;; This function calls:
  7422 ;;		Nothing
  7423 ;; This function is called by:
  7424 ;;		_TIMER0_COMP_vect
  7425 ;; This function uses a non-reentrant model
  7426 ;;
  7427                           
  7428                           	psect	text88
  7429   001F84                     __ptext88:
  7430                           	callstack 0
  7431   001F84                     _TMR0_StopTimer:
  7432                           	callstack 18
  7433                           
  7434                           ;mcc_generated_files/tmr0.c: 104:     T0CONbits.TMR0ON = 0;
  7435                           
  7436                           ;incstack = 0
  7437   001F84  9ED5               	bcf	213,7,c	;volatile
  7438   001F86  0012               	return		;funcret
  7439   001F88                     __end_of_TMR0_StopTimer:
  7440                           	callstack 0
  7441                           
  7442 ;; *************** function _EUSART_DefaultOverrunErrorHandler *****************
  7443 ;; Defined at:
  7444 ;;		line 252 in file "mcc_generated_files/eusart.c"
  7445 ;; Parameters:    Size  Location     Type
  7446 ;;		None
  7447 ;; Auto vars:     Size  Location     Type
  7448 ;;		None
  7449 ;; Return value:  Size  Location     Type
  7450 ;;                  1    wreg      void 
  7451 ;; Registers used:
  7452 ;;		None
  7453 ;; Tracked objects:
  7454 ;;		On entry : 0/0
  7455 ;;		On exit  : 0/0
  7456 ;;		Unchanged: 0/0
  7457 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7458 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7459 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7460 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7461 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7462 ;;Total ram usage:        0 bytes
  7463 ;; Hardware stack levels used: 1
  7464 ;; This function calls:
  7465 ;;		Nothing
  7466 ;; This function is called by:
  7467 ;;		_EUSART_Initialize
  7468 ;;		_EUSART_Receive_ISR
  7469 ;; This function uses a non-reentrant model
  7470 ;;
  7471                           
  7472                           	psect	text89
  7473   001F40                     __ptext89:
  7474                           	callstack 0
  7475   001F40                     _EUSART_DefaultOverrunErrorHandler:
  7476                           	callstack 19
  7477                           
  7478                           ;mcc_generated_files/eusart.c: 255:     RCSTAbits.CREN = 0;
  7479                           
  7480                           ;incstack = 0
  7481   001F40  98AB               	bcf	171,4,c	;volatile
  7482                           
  7483                           ;mcc_generated_files/eusart.c: 256:     RCSTAbits.CREN = 1;
  7484   001F42  88AB               	bsf	171,4,c	;volatile
  7485   001F44  0012               	return		;funcret
  7486   001F46                     __end_of_EUSART_DefaultOverrunErrorHandler:
  7487                           	callstack 0
  7488                           
  7489 ;; *************** function _EUSART_DefaultFramingErrorHandler *****************
  7490 ;; Defined at:
  7491 ;;		line 250 in file "mcc_generated_files/eusart.c"
  7492 ;; Parameters:    Size  Location     Type
  7493 ;;		None
  7494 ;; Auto vars:     Size  Location     Type
  7495 ;;		None
  7496 ;; Return value:  Size  Location     Type
  7497 ;;                  1    wreg      void 
  7498 ;; Registers used:
  7499 ;;		None
  7500 ;; Tracked objects:
  7501 ;;		On entry : 0/0
  7502 ;;		On exit  : 0/0
  7503 ;;		Unchanged: 0/0
  7504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7505 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7506 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7507 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7508 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7509 ;;Total ram usage:        0 bytes
  7510 ;; Hardware stack levels used: 1
  7511 ;; This function calls:
  7512 ;;		Nothing
  7513 ;; This function is called by:
  7514 ;;		_EUSART_Initialize
  7515 ;;		_EUSART_Receive_ISR
  7516 ;; This function uses a non-reentrant model
  7517 ;;
  7518                           
  7519                           	psect	text90
  7520   001F8A                     __ptext90:
  7521                           	callstack 0
  7522   001F8A                     _EUSART_DefaultFramingErrorHandler:
  7523                           	callstack 19
  7524                           
  7525                           ;incstack = 0
  7526   001F8A  0012               	return		;funcret
  7527   001F8C                     __end_of_EUSART_DefaultFramingErrorHandler:
  7528                           	callstack 0
  7529                           
  7530 ;; *************** function _EUSART_DefaultErrorHandler *****************
  7531 ;; Defined at:
  7532 ;;		line 260 in file "mcc_generated_files/eusart.c"
  7533 ;; Parameters:    Size  Location     Type
  7534 ;;		None
  7535 ;; Auto vars:     Size  Location     Type
  7536 ;;		None
  7537 ;; Return value:  Size  Location     Type
  7538 ;;                  1    wreg      void 
  7539 ;; Registers used:
  7540 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7541 ;; Tracked objects:
  7542 ;;		On entry : 0/0
  7543 ;;		On exit  : 0/0
  7544 ;;		Unchanged: 0/0
  7545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7546 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7547 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7548 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7549 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7550 ;;Total ram usage:        0 bytes
  7551 ;; Hardware stack levels used: 1
  7552 ;; Hardware stack levels required when called: 1
  7553 ;; This function calls:
  7554 ;;		_EUSART_RxDataHandler
  7555 ;; This function is called by:
  7556 ;;		_EUSART_Initialize
  7557 ;;		_EUSART_Receive_ISR
  7558 ;; This function uses a non-reentrant model
  7559 ;;
  7560                           
  7561                           	psect	text91
  7562   001F46                     __ptext91:
  7563                           	callstack 0
  7564   001F46                     _EUSART_DefaultErrorHandler:
  7565                           	callstack 18
  7566                           
  7567                           ;mcc_generated_files/eusart.c: 261:     EUSART_RxDataHandler();
  7568                           
  7569                           ;incstack = 0
  7570   001F46  ECAC  F00E         	call	_EUSART_RxDataHandler	;wreg free
  7571   001F4A  0012               	return		;funcret
  7572   001F4C                     __end_of_EUSART_DefaultErrorHandler:
  7573                           	callstack 0
  7574                           
  7575 ;; *************** function _EUSART_RxDataHandler *****************
  7576 ;; Defined at:
  7577 ;;		line 240 in file "mcc_generated_files/eusart.c"
  7578 ;; Parameters:    Size  Location     Type
  7579 ;;		None
  7580 ;; Auto vars:     Size  Location     Type
  7581 ;;		None
  7582 ;; Return value:  Size  Location     Type
  7583 ;;                  1    wreg      void 
  7584 ;; Registers used:
  7585 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7586 ;; Tracked objects:
  7587 ;;		On entry : 0/0
  7588 ;;		On exit  : 0/0
  7589 ;;		Unchanged: 0/0
  7590 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7591 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7592 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7593 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7594 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7595 ;;Total ram usage:        0 bytes
  7596 ;; Hardware stack levels used: 1
  7597 ;; This function calls:
  7598 ;;		Nothing
  7599 ;; This function is called by:
  7600 ;;		_EUSART_Receive_ISR
  7601 ;;		_EUSART_DefaultErrorHandler
  7602 ;; This function uses a non-reentrant model
  7603 ;;
  7604                           
  7605                           	psect	text92
  7606   001D58                     __ptext92:
  7607                           	callstack 0
  7608   001D58                     _EUSART_RxDataHandler:
  7609                           	callstack 19
  7610                           
  7611                           ;mcc_generated_files/eusart.c: 242:     eusartRxBuffer[eusartRxHead++] = RCREG;
  7612                           
  7613                           ;incstack = 0
  7614   001D58  0E84               	movlw	low _eusartRxBuffer
  7615   001D5A  2437               	addwf	_eusartRxHead^0,w,c	;volatile
  7616   001D5C  6ED9               	movwf	fsr2l,c
  7617   001D5E  6ADA               	clrf	fsr2h,c
  7618   001D60  0E00               	movlw	high _eusartRxBuffer
  7619   001D62  22DA               	addwfc	fsr2h,f,c
  7620   001D64  CFAE FFDF          	movff	4014,indf2	;volatile
  7621   001D68  2A37               	incf	_eusartRxHead^0,f,c	;volatile
  7622                           
  7623                           ;mcc_generated_files/eusart.c: 243:     if(sizeof(eusartRxBuffer) <= eusartRxHead)
  7624   001D6A  0E07               	movlw	7
  7625   001D6C  6437               	cpfsgt	_eusartRxHead^0,c	;volatile
  7626   001D6E  D002               	goto	i2l3203
  7627                           
  7628                           ;mcc_generated_files/eusart.c: 244:     {;mcc_generated_files/eusart.c: 245:         eus
      +                          artRxHead = 0;
  7629   001D70  0E00               	movlw	0
  7630   001D72  6E37               	movwf	_eusartRxHead^0,c	;volatile
  7631   001D74                     i2l3203:
  7632                           
  7633                           ;mcc_generated_files/eusart.c: 247:     eusartRxCount++;
  7634   001D74  2A35               	incf	_eusartRxCount^0,f,c	;volatile
  7635   001D76  0012               	return		;funcret
  7636   001D78                     __end_of_EUSART_RxDataHandler:
  7637                           	callstack 0
  7638                           
  7639                           	psect	text93
  7640   000000                     __ptext93:
  7641                           	callstack 0
  7642                           
  7643                           	psect	rparam
  7644   000000                     
  7645                           	psect	temp
  7646   000053                     btemp:
  7647                           	callstack 0
  7648   000053                     	ds	1
  7649   000000                     int$flags	set	btemp
  7650   000000                     wtemp8	set	btemp+1
  7651   000000                     ttemp5	set	btemp+1
  7652   000000                     ttemp6	set	btemp+4
  7653   000000                     ttemp7	set	btemp+8
  7654                           
  7655                           	psect	idloc
  7656                           
  7657                           ;Config register IDLOC0 @ 0x200000
  7658                           ;	unspecified, using default values
  7659   200000                     	org	2097152
  7660   200000  FF                 	db	255
  7661                           
  7662                           ;Config register IDLOC1 @ 0x200001
  7663                           ;	unspecified, using default values
  7664   200001                     	org	2097153
  7665   200001  FF                 	db	255
  7666                           
  7667                           ;Config register IDLOC2 @ 0x200002
  7668                           ;	unspecified, using default values
  7669   200002                     	org	2097154
  7670   200002  FF                 	db	255
  7671                           
  7672                           ;Config register IDLOC3 @ 0x200003
  7673                           ;	unspecified, using default values
  7674   200003                     	org	2097155
  7675   200003  FF                 	db	255
  7676                           
  7677                           ;Config register IDLOC4 @ 0x200004
  7678                           ;	unspecified, using default values
  7679   200004                     	org	2097156
  7680   200004  FF                 	db	255
  7681                           
  7682                           ;Config register IDLOC5 @ 0x200005
  7683                           ;	unspecified, using default values
  7684   200005                     	org	2097157
  7685   200005  FF                 	db	255
  7686                           
  7687                           ;Config register IDLOC6 @ 0x200006
  7688                           ;	unspecified, using default values
  7689   200006                     	org	2097158
  7690   200006  FF                 	db	255
  7691                           
  7692                           ;Config register IDLOC7 @ 0x200007
  7693                           ;	unspecified, using default values
  7694   200007                     	org	2097159
  7695   200007  FF                 	db	255
  7696                           
  7697                           	psect	config
  7698                           
  7699                           ; Padding undefined space
  7700   300000                     	org	3145728
  7701   300000  FF                 	db	255
  7702                           
  7703                           ;Config register CONFIG1H @ 0x300001
  7704                           ;	Oscillator Selection bits
  7705                           ;	FOSC = INTIO67, Internal oscillator block, port function on RA6 and RA7
  7706                           ;	Fail-Safe Clock Monitor Enable bit
  7707                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  7708                           ;	Internal/External Oscillator Switchover bit
  7709                           ;	IESO = OFF, Oscillator Switchover mode disabled
  7710   300001                     	org	3145729
  7711   300001  08                 	db	8
  7712                           
  7713                           ;Config register CONFIG2L @ 0x300002
  7714                           ;	Power-up Timer Enable bit
  7715                           ;	PWRT = OFF, PWRT disabled
  7716                           ;	Brown-out Reset Enable bits
  7717                           ;	BOREN = SBORDIS, Brown-out Reset enabled in hardware only (SBOREN is disabled)
  7718                           ;	Brown Out Reset Voltage bits
  7719                           ;	BORV = 18, VBOR set to 1.8 V nominal
  7720   300002                     	org	3145730
  7721   300002  1F                 	db	31
  7722                           
  7723                           ;Config register CONFIG2H @ 0x300003
  7724                           ;	Watchdog Timer Enable bit
  7725                           ;	WDTEN = OFF, WDT is controlled by SWDTEN bit of the WDTCON register
  7726                           ;	Watchdog Timer Postscale Select bits
  7727                           ;	WDTPS = 32768, 1:32768
  7728   300003                     	org	3145731
  7729   300003  1E                 	db	30
  7730                           
  7731                           ; Padding undefined space
  7732   300004                     	org	3145732
  7733   300004  FF                 	db	255
  7734                           
  7735                           ;Config register CONFIG3H @ 0x300005
  7736                           ;	CCP2 MUX bit
  7737                           ;	CCP2MX = PORTC, CCP2 input/output is multiplexed with RC1
  7738                           ;	PORTB A/D Enable bit
  7739                           ;	PBADEN = ON, PORTB<4:0> pins are configured as analog input channels on Reset
  7740                           ;	Low-Power Timer1 Oscillator Enable bit
  7741                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  7742                           ;	HFINTOSC Fast Start-up
  7743                           ;	HFOFST = ON, HFINTOSC starts clocking the CPU without waiting for the oscillator to st
      +                          ablize.
  7744                           ;	MCLR Pin Enable bit
  7745                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  7746   300005                     	org	3145733
  7747   300005  8B                 	db	139
  7748                           
  7749                           ;Config register CONFIG4L @ 0x300006
  7750                           ;	Stack Full/Underflow Reset Enable bit
  7751                           ;	STVREN = ON, Stack full/underflow will cause Reset
  7752                           ;	Single-Supply ICSP Enable bit
  7753                           ;	LVP = OFF, Single-Supply ICSP disabled
  7754                           ;	Extended Instruction Set Enable bit
  7755                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  7756                           ;	Background Debugger Enable bit
  7757                           ;	DEBUG = OFF, Background debugger disabled, RB6 and RB7 configured as general purpose I
      +                          /O pins
  7758   300006                     	org	3145734
  7759   300006  81                 	db	129
  7760                           
  7761                           ; Padding undefined space
  7762   300007                     	org	3145735
  7763   300007  FF                 	db	255
  7764                           
  7765                           ;Config register CONFIG5L @ 0x300008
  7766                           ;	Code Protection Block 0
  7767                           ;	CP0 = OFF, Block 0 (000800-003FFFh) not code-protected
  7768                           ;	Code Protection Block 1
  7769                           ;	CP1 = OFF, Block 1 (004000-007FFFh) not code-protected
  7770                           ;	Code Protection Block 2
  7771                           ;	CP2 = OFF, Block 2 (008000-00BFFFh) not code-protected
  7772                           ;	Code Protection Block 3
  7773                           ;	CP3 = OFF, Block 3 (00C000-00FFFFh) not code-protected
  7774   300008                     	org	3145736
  7775   300008  0F                 	db	15
  7776                           
  7777                           ;Config register CONFIG5H @ 0x300009
  7778                           ;	Boot Block Code Protection bit
  7779                           ;	CPB = OFF, Boot block (000000-0007FFh) not code-protected
  7780                           ;	Data EEPROM Code Protection bit
  7781                           ;	CPD = OFF, Data EEPROM not code-protected
  7782   300009                     	org	3145737
  7783   300009  C0                 	db	192
  7784                           
  7785                           ;Config register CONFIG6L @ 0x30000A
  7786                           ;	Write Protection Block 0
  7787                           ;	WRT0 = OFF, Block 0 (000800-003FFFh) not write-protected
  7788                           ;	Write Protection Block 1
  7789                           ;	WRT1 = OFF, Block 1 (004000-007FFFh) not write-protected
  7790                           ;	Write Protection Block 2
  7791                           ;	WRT2 = OFF, Block 2 (008000-00BFFFh) not write-protected
  7792                           ;	Write Protection Block 3
  7793                           ;	WRT3 = OFF, Block 3 (00C000h-00FFFFh) not write-protected
  7794   30000A                     	org	3145738
  7795   30000A  0F                 	db	15
  7796                           
  7797                           ;Config register CONFIG6H @ 0x30000B
  7798                           ;	Configuration Register Write Protection bit
  7799                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
  7800                           ;	Boot Block Write Protection bit
  7801                           ;	WRTB = OFF, Boot Block (000000-0007FFh) not write-protected
  7802                           ;	Data EEPROM Write Protection bit
  7803                           ;	WRTD = OFF, Data EEPROM not write-protected
  7804   30000B                     	org	3145739
  7805   30000B  E0                 	db	224
  7806                           
  7807                           ;Config register CONFIG7L @ 0x30000C
  7808                           ;	Table Read Protection Block 0
  7809                           ;	EBTR0 = OFF, Block 0 (000800-003FFFh) not protected from table reads executed in other
      +                           blocks
  7810                           ;	Table Read Protection Block 1
  7811                           ;	EBTR1 = OFF, Block 1 (004000-007FFFh) not protected from table reads executed in other
      +                           blocks
  7812                           ;	Table Read Protection Block 2
  7813                           ;	EBTR2 = OFF, Block 2 (008000-00BFFFh) not protected from table reads executed in other
      +                           blocks
  7814                           ;	Table Read Protection Block 3
  7815                           ;	EBTR3 = OFF, Block 3 (00C000-00FFFFh) not protected from table reads executed in other
      +                           blocks
  7816   30000C                     	org	3145740
  7817   30000C  0F                 	db	15
  7818                           
  7819                           ;Config register CONFIG7H @ 0x30000D
  7820                           ;	Boot Block Table Read Protection bit
  7821                           ;	EBTRB = OFF, Boot Block (000000-0007FFh) not protected from table reads executed in ot
      +                          her blocks
  7822   30000D                     	org	3145741
  7823   30000D  40                 	db	64
  7824                           tosu	equ	0xFFF
  7825                           tosh	equ	0xFFE
  7826                           tosl	equ	0xFFD
  7827                           stkptr	equ	0xFFC
  7828                           pclatu	equ	0xFFB
  7829                           pclath	equ	0xFFA
  7830                           pcl	equ	0xFF9
  7831                           tblptru	equ	0xFF8
  7832                           tblptrh	equ	0xFF7
  7833                           tblptrl	equ	0xFF6
  7834                           tablat	equ	0xFF5
  7835                           prodh	equ	0xFF4
  7836                           prodl	equ	0xFF3
  7837                           indf0	equ	0xFEF
  7838                           postinc0	equ	0xFEE
  7839                           postdec0	equ	0xFED
  7840                           preinc0	equ	0xFEC
  7841                           plusw0	equ	0xFEB
  7842                           fsr0h	equ	0xFEA
  7843                           fsr0l	equ	0xFE9
  7844                           wreg	equ	0xFE8
  7845                           indf1	equ	0xFE7
  7846                           postinc1	equ	0xFE6
  7847                           postdec1	equ	0xFE5
  7848                           preinc1	equ	0xFE4
  7849                           plusw1	equ	0xFE3
  7850                           fsr1h	equ	0xFE2
  7851                           fsr1l	equ	0xFE1
  7852                           bsr	equ	0xFE0
  7853                           indf2	equ	0xFDF
  7854                           postinc2	equ	0xFDE
  7855                           postdec2	equ	0xFDD
  7856                           preinc2	equ	0xFDC
  7857                           plusw2	equ	0xFDB
  7858                           fsr2h	equ	0xFDA
  7859                           fsr2l	equ	0xFD9
  7860                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    32
    Data        6
    BSS         145
    Persistent  14
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     35      82
    BANK0           160     11     129
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           96      0       0

Pointer List with Targets:

    I2C_Read1ByteRegister@returnValue.data	PTR unsigned char  size(2) Largest target is 0

    I2C_Read2ByteRegister@returnValue.data	PTR unsigned char  size(2) Largest target is 0

    I2C_Write1ByteRegister@data.data	PTR unsigned char  size(2) Largest target is 0

    I2C_Write2ByteRegister@data.data	PTR unsigned char  size(2) Largest target is 0

    I2C_DO_TX$2756$0	PTR void  size(2) Largest target is 5
		 -> I2C_ReadDataBlock@bufferBlock(COMRAM[4]), I2C_Write2ByteRegister@data(COMRAM[2]), I2C_Write1ByteRegister@data(COMRAM[1]), I2C_Read2ByteRegister@returnValue(COMRAM[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMRAM[1]), 

    I2C_DO_RX$2762$0	PTR void  size(2) Largest target is 5
		 -> I2C_ReadDataBlock@bufferBlock(COMRAM[4]), I2C_Write2ByteRegister@data(COMRAM[2]), I2C_Write1ByteRegister@data(COMRAM[1]), I2C_Read2ByteRegister@returnValue(COMRAM[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMRAM[1]), 

    I2C_DO_TX_EMPTY$2768$0	PTR void  size(2) Largest target is 5
		 -> I2C_ReadDataBlock@bufferBlock(COMRAM[4]), I2C_Write2ByteRegister@data(COMRAM[2]), I2C_Write1ByteRegister@data(COMRAM[1]), I2C_Read2ByteRegister@returnValue(COMRAM[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMRAM[1]), 

    I2C_DO_RX_EMPTY$2774$0	PTR void  size(2) Largest target is 5
		 -> I2C_ReadDataBlock@bufferBlock(COMRAM[4]), I2C_Write2ByteRegister@data(COMRAM[2]), I2C_Write1ByteRegister@data(COMRAM[1]), I2C_Read2ByteRegister@returnValue(COMRAM[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMRAM[1]), 

    I2C_DO_TX_EMPTY$2773	PTR void  size(2) Largest target is 5
		 -> I2C_ReadDataBlock@bufferBlock(COMRAM[4]), I2C_Write2ByteRegister@data(COMRAM[2]), I2C_Write1ByteRegister@data(COMRAM[1]), I2C_Read2ByteRegister@returnValue(COMRAM[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMRAM[1]), 

    I2C_DO_TX_EMPTY$2768	PTR FTN(PTR void ,)enum E360 size(2) Largest target is 1
		 -> I2C_CallbackReturnReset(), I2C_CallbackReturnStop(), Absolute function(), rdBlkRegCompleteHandler(), 
		 -> wr2RegCompleteHandler(), wr1RegCompleteHandler(), rd2RegCompleteHandler(), rd1RegCompleteHandler(), 

    I2C_DO_RX$2767	PTR void  size(2) Largest target is 5
		 -> I2C_ReadDataBlock@bufferBlock(COMRAM[4]), I2C_Write2ByteRegister@data(COMRAM[2]), I2C_Write1ByteRegister@data(COMRAM[1]), I2C_Read2ByteRegister@returnValue(COMRAM[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMRAM[1]), 

    I2C_DO_RX$2762	PTR FTN(PTR void ,)enum E360 size(2) Largest target is 1
		 -> I2C_CallbackReturnReset(), I2C_CallbackReturnStop(), Absolute function(), rdBlkRegCompleteHandler(), 
		 -> wr2RegCompleteHandler(), wr1RegCompleteHandler(), rd2RegCompleteHandler(), rd1RegCompleteHandler(), 

    I2C_DO_TX$2761	PTR void  size(2) Largest target is 5
		 -> I2C_ReadDataBlock@bufferBlock(COMRAM[4]), I2C_Write2ByteRegister@data(COMRAM[2]), I2C_Write1ByteRegister@data(COMRAM[1]), I2C_Read2ByteRegister@returnValue(COMRAM[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMRAM[1]), 

    I2C_DO_TX$2756	PTR FTN(PTR void ,)enum E360 size(2) Largest target is 1
		 -> I2C_CallbackReturnReset(), I2C_CallbackReturnStop(), Absolute function(), rdBlkRegCompleteHandler(), 
		 -> wr2RegCompleteHandler(), wr1RegCompleteHandler(), rd2RegCompleteHandler(), rd1RegCompleteHandler(), 

    I2C_MasterFsm$2755	const PTR FTN()enum E2846 size(2) Largest target is 1
		 -> I2C_DO_ADDRESS_NACK(), I2C_DO_RESET(), I2C_DO_RX_NACK_RESTART(), I2C_DO_RX_NACK_STOP(), 
		 -> I2C_DO_RX_ACK(), I2C_DO_SEND_STOP(), I2C_DO_SEND_RESTART(), I2C_DO_SEND_RESTART_WRITE(), 
		 -> I2C_DO_SEND_RESTART_READ(), I2C_DO_TX_EMPTY(), I2C_DO_RCEN(), I2C_DO_RX(), 
		 -> I2C_DO_TX(), I2C_DO_SEND_ADR_WRITE(), I2C_DO_SEND_ADR_READ(), I2C_DO_IDLE(), 

    I2C_CallbackReturnStop@funPtr	PTR void  size(2) Largest target is 5
		 -> I2C_ReadDataBlock@bufferBlock(COMRAM[4]), I2C_Write2ByteRegister@data(COMRAM[2]), I2C_Write1ByteRegister@data(COMRAM[1]), I2C_Read2ByteRegister@returnValue(COMRAM[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMRAM[1]), 

    I2C_CallbackReturnReset@funPtr	PTR void  size(2) Largest target is 5
		 -> I2C_ReadDataBlock@bufferBlock(COMRAM[4]), I2C_Write2ByteRegister@data(COMRAM[2]), I2C_Write1ByteRegister@data(COMRAM[1]), I2C_Read2ByteRegister@returnValue(COMRAM[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMRAM[1]), 

    cb$0	PTR void  size(2) Largest target is 5
		 -> I2C_ReadDataBlock@bufferBlock(COMRAM[4]), I2C_Write2ByteRegister@data(COMRAM[2]), I2C_Write1ByteRegister@data(COMRAM[1]), I2C_Read2ByteRegister@returnValue(COMRAM[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMRAM[1]), 

    Absolute function$0	PTR void  size(2) Largest target is 5
		 -> I2C_ReadDataBlock@bufferBlock(COMRAM[4]), I2C_Write2ByteRegister@data(COMRAM[2]), I2C_Write1ByteRegister@data(COMRAM[1]), I2C_Read2ByteRegister@returnValue(COMRAM[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMRAM[1]), 

    cb$0	PTR void  size(2) Largest target is 5
		 -> I2C_ReadDataBlock@bufferBlock(COMRAM[4]), I2C_Write2ByteRegister@data(COMRAM[2]), I2C_Write1ByteRegister@data(COMRAM[1]), I2C_Read2ByteRegister@returnValue(COMRAM[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMRAM[1]), 

    S248$0$0	PTR void  size(2) Largest target is 5
		 -> I2C_ReadDataBlock@bufferBlock(COMRAM[4]), I2C_Write2ByteRegister@data(COMRAM[2]), I2C_Write1ByteRegister@data(COMRAM[1]), I2C_Read2ByteRegister@returnValue(COMRAM[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMRAM[1]), 

    Read_analog_input@Massiv	PTR unsigned char  size(2) Largest target is 20
		 -> Danie_ModbasRtu_analog_Output(BANK0[20]), Danie_ModbasRtu_analog_input(BANK0[20]), Read_analog_input@Danie(COMRAM[2]), 

    Reading_Discrete_Output@Massiv	PTR unsigned char  size(2) Largest target is 2
		 -> Danie_ModbasRtu_Binary_input(COMRAM[2]), Danie_ModbasRtu_Binary_Output(COMRAM[2]), 

    _Bin_input_Output@Masiv	PTR volatile unsigned char  size(2) Largest target is 2
		 -> Danie_ModbasRtu_Binary_input(COMRAM[2]), Danie_ModbasRtu_Binary_Output(COMRAM[2]), 

    crc_chk@data	PTR unsigned char  size(2) Largest target is 30
		 -> Danie_Rx_ModbasRtu(BANK0[30]), 

    EUSART_SetRxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> USART_RXC_vect(), EUSART_Receive_ISR(), 

    EUSART_RxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> USART_RXC_vect(), EUSART_Receive_ISR(), Absolute function(), 

    EUSART_SetTxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> USART_TXC_vect(), EUSART_Transmit_ISR(), 

    EUSART_TxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> USART_TXC_vect(), EUSART_Transmit_ISR(), Absolute function(), 

    EUSART_SetErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), 

    EUSART_SetOverrunErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), 

    EUSART_SetFramingErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), 

    EUSART_ErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), Absolute function(), 

    EUSART_OverrunErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), Absolute function(), 

    EUSART_FramingErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), Absolute function(), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), Absolute function(), 

    I2C_SetCallback@ptr	PTR void  size(2) Largest target is 5
		 -> I2C_ReadDataBlock@bufferBlock(COMRAM[4]), I2C_Write2ByteRegister@data(COMRAM[2]), I2C_Write1ByteRegister@data(COMRAM[1]), I2C_Read2ByteRegister@returnValue(COMRAM[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMRAM[1]), 

    I2C_SetCallback@cb	PTR FTN(PTR void ,)enum E360 size(2) Largest target is 1
		 -> Absolute function(), rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), wr1RegCompleteHandler(), 
		 -> rd2RegCompleteHandler(), rd1RegCompleteHandler(), 

    I2C_SetAddressNackCallback@ptr	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    I2C_SetAddressNackCallback@cb	PTR FTN(PTR void ,)enum E360 size(2) Largest target is 1
		 -> Absolute function(), 

    I2C_SetDataCompleteCallback@ptr	PTR void  size(2) Largest target is 5
		 -> I2C_ReadDataBlock@bufferBlock(COMRAM[4]), I2C_Write2ByteRegister@data(COMRAM[2]), I2C_Write1ByteRegister@data(COMRAM[1]), I2C_Read2ByteRegister@returnValue(COMRAM[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMRAM[1]), 

    I2C_SetDataCompleteCallback@cb	PTR FTN(PTR void ,)enum E360 size(2) Largest target is 1
		 -> Absolute function(), rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), wr1RegCompleteHandler(), 
		 -> rd2RegCompleteHandler(), rd1RegCompleteHandler(), 

    I2C_SetBuffer@buffer	PTR void  size(2) Largest target is 5
		 -> I2C_Read1ByteRegister@returnValue.data(COMRAM[3]), I2C_Read2ByteRegister@returnValue.data(COMRAM[3]), I2C_Write1ByteRegister@data.data(COMRAM[3]), I2C_Write2ByteRegister@data.data(COMRAM[3]), 
		 -> main@red2(BANK0[3]), main@red(BANK0[3]), main@dat(BANK0[3]), I2C_ReadDataBlock@reg(COMRAM[1]), 
		 -> I2C_ReadDataBlock@bufferBlock(COMRAM[4]), bufferBlock.data(COMRAM[3]), I2C_Write2ByteRegister@reg(COMRAM[1]), I2C_Write2ByteRegister@data(COMRAM[2]), 
		 -> I2C_Write1ByteRegister@reg(COMRAM[1]), I2C_Write1ByteRegister@data(COMRAM[1]), I2C_Read2ByteRegister@reg(COMRAM[1]), I2C_Read2ByteRegister@returnValue(COMRAM[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@reg(COMRAM[1]), I2C_Read1ByteRegister@returnValue(COMRAM[1]), 

    S248$data_ptr	PTR unsigned char  size(2) Largest target is 5
		 -> main@red2(BANK0[3]), main@red(BANK0[3]), main@dat(BANK0[3]), I2C_ReadDataBlock@reg(COMRAM[1]), 
		 -> I2C_ReadDataBlock@bufferBlock(COMRAM[4]), I2C_Write2ByteRegister@reg(COMRAM[1]), I2C_Write2ByteRegister@data(COMRAM[2]), I2C_Write1ByteRegister@reg(COMRAM[1]), 
		 -> I2C_Write1ByteRegister@data(COMRAM[1]), I2C_Read2ByteRegister@reg(COMRAM[1]), I2C_Read2ByteRegister@returnValue(COMRAM[2]), NULL(NULL[0]), 
		 -> I2C_Read1ByteRegister@reg(COMRAM[1]), I2C_Read1ByteRegister@returnValue(COMRAM[1]), 

    I2C_Status.data_ptr	PTR unsigned char  size(2) Largest target is 5
		 -> I2C_Read1ByteRegister@returnValue.data(COMRAM[3]), I2C_Read2ByteRegister@returnValue.data(COMRAM[3]), I2C_Write1ByteRegister@data.data(COMRAM[3]), I2C_Write2ByteRegister@data.data(COMRAM[3]), 
		 -> main@red2(BANK0[3]), main@red(BANK0[3]), main@dat(BANK0[3]), I2C_ReadDataBlock@reg(COMRAM[1]), 
		 -> I2C_ReadDataBlock@bufferBlock(COMRAM[4]), bufferBlock.data(COMRAM[3]), I2C_Write2ByteRegister@reg(COMRAM[1]), I2C_Write2ByteRegister@data(COMRAM[2]), 
		 -> I2C_Write1ByteRegister@reg(COMRAM[1]), I2C_Write1ByteRegister@data(COMRAM[1]), I2C_Read2ByteRegister@reg(COMRAM[1]), I2C_Read2ByteRegister@returnValue(COMRAM[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@reg(COMRAM[1]), I2C_Read1ByteRegister@returnValue(COMRAM[1]), 

    S248$callbackPayload	PTR void [6] size(2) Largest target is 5
		 -> I2C_ReadDataBlock@bufferBlock(COMRAM[4]), I2C_Write2ByteRegister@data(COMRAM[2]), I2C_Write1ByteRegister@data(COMRAM[1]), I2C_Read2ByteRegister@returnValue(COMRAM[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMRAM[1]), 

    I2C_Status.callbackPayload	PTR void [6] size(2) Largest target is 5
		 -> I2C_ReadDataBlock@bufferBlock(COMRAM[4]), I2C_Write2ByteRegister@data(COMRAM[2]), I2C_Write1ByteRegister@data(COMRAM[1]), I2C_Read2ByteRegister@returnValue(COMRAM[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMRAM[1]), 

    S248$callbackTable	PTR FTN(PTR void ,)enum E360[6] size(2) Largest target is 1
		 -> I2C_CallbackReturnReset(), I2C_CallbackReturnStop(), Absolute function(), rdBlkRegCompleteHandler(), 
		 -> wr2RegCompleteHandler(), wr1RegCompleteHandler(), rd2RegCompleteHandler(), rd1RegCompleteHandler(), 

    I2C_Status.callbackTable	PTR FTN(PTR void ,)enum E360[6] size(2) Largest target is 1
		 -> I2C_CallbackReturnReset(), I2C_CallbackReturnStop(), Absolute function(), rdBlkRegCompleteHandler(), 
		 -> wr2RegCompleteHandler(), wr1RegCompleteHandler(), rd2RegCompleteHandler(), rd1RegCompleteHandler(), 

    i2c_fsmStateTable	const PTR FTN()enum E2846[16] size(2) Largest target is 1
		 -> I2C_DO_ADDRESS_NACK(), I2C_DO_RESET(), I2C_DO_RX_NACK_RESTART(), I2C_DO_RX_NACK_STOP(), 
		 -> I2C_DO_RX_ACK(), I2C_DO_SEND_STOP(), I2C_DO_SEND_RESTART(), I2C_DO_SEND_RESTART_WRITE(), 
		 -> I2C_DO_SEND_RESTART_READ(), I2C_DO_TX_EMPTY(), I2C_DO_RCEN(), I2C_DO_RX(), 
		 -> I2C_DO_TX(), I2C_DO_SEND_ADR_WRITE(), I2C_DO_SEND_ADR_READ(), I2C_DO_IDLE(), 

    rdBlkRegCompleteHandler@ptr.data	PTR unsigned char  size(2) Largest target is 0

    rdBlkRegCompleteHandler@ptr	PTR void  size(2) Largest target is 5
		 -> I2C_ReadDataBlock@bufferBlock(COMRAM[4]), I2C_Write2ByteRegister@data(COMRAM[2]), I2C_Write1ByteRegister@data(COMRAM[1]), I2C_Read2ByteRegister@returnValue(COMRAM[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMRAM[1]), 

    wr2RegCompleteHandler@ptr	PTR void  size(2) Largest target is 5
		 -> I2C_ReadDataBlock@bufferBlock(COMRAM[4]), I2C_Write2ByteRegister@data(COMRAM[2]), I2C_Write1ByteRegister@data(COMRAM[1]), I2C_Read2ByteRegister@returnValue(COMRAM[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMRAM[1]), 

    wr1RegCompleteHandler@ptr	PTR void  size(2) Largest target is 5
		 -> I2C_ReadDataBlock@bufferBlock(COMRAM[4]), I2C_Write2ByteRegister@data(COMRAM[2]), I2C_Write1ByteRegister@data(COMRAM[1]), I2C_Read2ByteRegister@returnValue(COMRAM[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMRAM[1]), 

    rd2RegCompleteHandler@ptr	PTR void  size(2) Largest target is 5
		 -> I2C_ReadDataBlock@bufferBlock(COMRAM[4]), I2C_Write2ByteRegister@data(COMRAM[2]), I2C_Write1ByteRegister@data(COMRAM[1]), I2C_Read2ByteRegister@returnValue(COMRAM[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMRAM[1]), 

    rd1RegCompleteHandler@ptr	PTR void  size(2) Largest target is 5
		 -> I2C_ReadDataBlock@bufferBlock(COMRAM[4]), I2C_Write2ByteRegister@data(COMRAM[2]), I2C_Write1ByteRegister@data(COMRAM[1]), I2C_Read2ByteRegister@returnValue(COMRAM[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMRAM[1]), 

    S96$data	PTR unsigned char  size(2) Largest target is 0

    bufferBlock.data	PTR unsigned char  size(2) Largest target is 0

    I2C_ReadNBytes@data	PTR unsigned char  size(2) Largest target is 3
		 -> main@red2(BANK0[3]), 

    I2C_WriteNBytes@data	PTR unsigned char  size(2) Largest target is 3
		 -> main@red(BANK0[3]), main@dat(BANK0[3]), 


Critical Paths under _main in COMRAM

    _modbasRtu_Slave->_modbasRtu_Answer
    _modbasRtu_Answer->_Reading_Discrete_Output
    _analog_output_recording->_Error_modbasRtu
    _Reading_Discrete_Output->_Error_modbasRtu
    _Read_analog_input->_Error_modbasRtu
    _Changing_Discrete_Output->_Error_modbasRtu
    _Error_modbasRtu->_check_sum
    _check_sum->_crc_chk
    _Data_integrity->_crc_chk
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _EUSART_Initialize->_EUSART_SetErrorHandler
    _EUSART_Initialize->_EUSART_SetFramingErrorHandler
    _EUSART_Initialize->_EUSART_SetOverrunErrorHandler
    _EUSART_Initialize->_EUSART_SetRxInterruptHandler
    _EUSART_Initialize->_EUSART_SetTxInterruptHandler
    _I2C_SetAddressNackCallback->_I2C_SetCallback
    _I2C_MasterWrite->_I2C_MasterOperation
    _I2C_MasterRead->_I2C_MasterOperation
    _I2C_Poller->_I2C_MasterFsm
    _I2C_MasterFsm->_I2C_DO_ADDRESS_NACK
    _I2C_MasterFsm->_I2C_DO_RX
    _I2C_MasterFsm->_I2C_DO_TX
    _I2C_MasterFsm->_I2C_DO_TX_EMPTY
    _I2C_DO_TX_EMPTY->_I2C_CallbackReturnReset
    _I2C_DO_TX_EMPTY->_I2C_CallbackReturnStop
    _I2C_DO_TX_EMPTY->_rd1RegCompleteHandler
    _I2C_DO_TX_EMPTY->_rd2RegCompleteHandler
    _I2C_DO_TX_EMPTY->_rdBlkRegCompleteHandler
    _I2C_DO_TX_EMPTY->_wr1RegCompleteHandler
    _I2C_DO_TX_EMPTY->_wr2RegCompleteHandler
    _I2C_DO_TX->_I2C_CallbackReturnReset
    _I2C_DO_TX->_I2C_CallbackReturnStop
    _I2C_DO_TX->_rd1RegCompleteHandler
    _I2C_DO_TX->_rd2RegCompleteHandler
    _I2C_DO_TX->_rdBlkRegCompleteHandler
    _I2C_DO_TX->_wr1RegCompleteHandler
    _I2C_DO_TX->_wr2RegCompleteHandler
    _I2C_DO_SEND_ADR_WRITE->_I2C_MasterSendTxData
    _I2C_DO_RX->_I2C_CallbackReturnReset
    _I2C_DO_RX->_I2C_CallbackReturnStop
    _I2C_DO_RX->_rd1RegCompleteHandler
    _I2C_DO_RX->_rd2RegCompleteHandler
    _I2C_DO_RX->_rdBlkRegCompleteHandler
    _I2C_DO_RX->_wr1RegCompleteHandler
    _I2C_DO_RX->_wr2RegCompleteHandler
    _I2C_DO_ADDRESS_NACK->_I2C_CallbackReturnReset
    _I2C_DO_ADDRESS_NACK->_I2C_CallbackReturnStop
    _I2C_DO_ADDRESS_NACK->_rd1RegCompleteHandler
    _I2C_DO_ADDRESS_NACK->_rd2RegCompleteHandler
    _I2C_DO_ADDRESS_NACK->_rdBlkRegCompleteHandler
    _I2C_DO_ADDRESS_NACK->_wr1RegCompleteHandler
    _I2C_DO_ADDRESS_NACK->_wr2RegCompleteHandler
    _wr2RegCompleteHandler->_I2C_SetDataCompleteCallback
    _wr1RegCompleteHandler->_I2C_SetDataCompleteCallback
    _rdBlkRegCompleteHandler->_I2C_SetDataCompleteCallback
    _rd2RegCompleteHandler->_I2C_SetDataCompleteCallback
    _rd1RegCompleteHandler->_I2C_SetDataCompleteCallback
    _I2C_SetDataCompleteCallback->_I2C_SetCallback

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _INTERRUPT_InterruptManager->_USART_RXC_vect

Critical Paths under _main in BANK0

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                12    12      0  233877
                                              0 BANK0     11    11      0
       _EUSART_SetRxInterruptHandler
       _EUSART_SetTxInterruptHandler
                     _I2C_ReadNBytes
                    _I2C_WriteNBytes
                  _SYSTEM_Initialize
                    _USART_UDRE_vect
                    _modbasRtu_Slave
 ---------------------------------------------------------------------------------
 (1) _modbasRtu_Slave                                      0     0      0   12229
                     _Data_integrity
                    _Error_modbasRtu
                   _modbasRtu_Answer
 ---------------------------------------------------------------------------------
 (2) _modbasRtu_Answer                                     2     2      0   10615
                                             33 COMRAM     2     2      0
           _Changing_Discrete_Output
                    _Error_modbasRtu
                  _Read_analog_input
            _Reading_Discrete_Output
            _analog_output_recording
 ---------------------------------------------------------------------------------
 (3) _analog_output_recording                              2     2      0    1013
                                             19 COMRAM     2     2      0
                    _Error_modbasRtu
         _ModbasRtu_Register_address
 ---------------------------------------------------------------------------------
 (3) _Reading_Discrete_Output                             14    11      3    2843
                                             19 COMRAM    14    11      3
                    _Error_modbasRtu
         _ModbasRtu_Register_address
                          _check_sum
 ---------------------------------------------------------------------------------
 (3) _Read_analog_input                                   13     9      4    2782
                                             19 COMRAM    13     9      4
                    _Error_modbasRtu
         _ModbasRtu_Register_address
                          _check_sum
 ---------------------------------------------------------------------------------
 (3) _Changing_Discrete_Output                             2     2      0    3125
                                             19 COMRAM     2     2      0
                    _Error_modbasRtu
         _ModbasRtu_Register_address
                  __Bin_input_Output
 ---------------------------------------------------------------------------------
 (4) __Bin_input_Output                                    9     5      4    2081
                                              6 COMRAM     9     5      4
 ---------------------------------------------------------------------------------
 (4) _ModbasRtu_Register_address                           8     6      2      96
                                              6 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (4) _Error_modbasRtu                                      1     1      0     852
                                             18 COMRAM     1     1      0
                          _check_sum
 ---------------------------------------------------------------------------------
 (5) _check_sum                                            3     3      0     821
                                             15 COMRAM     3     3      0
                            _crc_chk
 ---------------------------------------------------------------------------------
 (2) _Data_integrity                                       4     4      0     762
                                             15 COMRAM     4     4      0
                            _crc_chk
 ---------------------------------------------------------------------------------
 (6) _crc_chk                                              9     6      3     629
                                              6 COMRAM     9     6      3
 ---------------------------------------------------------------------------------
 (1) _USART_UDRE_vect                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     906
                  _EUSART_Initialize
                     _I2C_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      0     0      0     121
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _TMR0_SetInterruptHandler                             2     0      2     121
                                              6 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0     785
             _EUSART_SetErrorHandler
      _EUSART_SetFramingErrorHandler
      _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
       _EUSART_SetTxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetTxInterruptHandler                         2     0      2     211
                                              6 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetRxInterruptHandler                         2     0      2     211
                                              6 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetOverrunErrorHandler                        2     0      2     121
                                              6 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetFramingErrorHandler                        2     0      2     121
                                              6 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetErrorHandler                               2     0      2     121
                                              6 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _I2C_WriteNBytes                                      5     1      4  111264
                                             23 COMRAM     5     1      4
                          _I2C_Close
                    _I2C_MasterWrite
                           _I2C_Open
         _I2C_SetAddressNackCallback
                      _I2C_SetBuffer
 ---------------------------------------------------------------------------------
 (2) _I2C_SetAddressNackCallback                           4     0      4    2259
                                             11 COMRAM     4     0      4
                    _I2C_SetCallback
 ---------------------------------------------------------------------------------
 (2) _I2C_MasterWrite                                      0     0      0  106225
                _I2C_MasterOperation
 ---------------------------------------------------------------------------------
 (1) _I2C_ReadNBytes                                       5     1      4  108825
                                             23 COMRAM     5     1      4
                          _I2C_Close
                     _I2C_MasterRead
                           _I2C_Open
                      _I2C_SetBuffer
 ---------------------------------------------------------------------------------
 (2) _I2C_Open                                             2     2      0      68
                                              6 COMRAM     2     2      0
                 _I2C_MasterClearIrq
                     _I2C_MasterOpen
 ---------------------------------------------------------------------------------
 (3) _I2C_MasterOpen                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_MasterRead                                       0     0      0  106225
                _I2C_MasterOperation
 ---------------------------------------------------------------------------------
 (3) _I2C_MasterOperation                                  2     2      0  106225
                                             21 COMRAM     2     2      0
                    _I2C_MasterStart
                         _I2C_Poller
 ---------------------------------------------------------------------------------
 (4) _I2C_Poller                                           0     0      0  106157
                      _I2C_MasterFsm
             _I2C_MasterWaitForEvent
 ---------------------------------------------------------------------------------
 (5) _I2C_MasterWaitForEvent                               0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _I2C_MasterFsm                                        2     2      0  106157
                                             19 COMRAM     2     2      0
                _I2C_DO_ADDRESS_NACK *
                        _I2C_DO_IDLE *
                        _I2C_DO_RCEN *
                       _I2C_DO_RESET *
                          _I2C_DO_RX *
                      _I2C_DO_RX_ACK *
             _I2C_DO_RX_NACK_RESTART *
                _I2C_DO_RX_NACK_STOP *
               _I2C_DO_SEND_ADR_READ *
              _I2C_DO_SEND_ADR_WRITE *
                _I2C_DO_SEND_RESTART *
           _I2C_DO_SEND_RESTART_READ *
          _I2C_DO_SEND_RESTART_WRITE *
                   _I2C_DO_SEND_STOP *
                          _I2C_DO_TX *
                    _I2C_DO_TX_EMPTY *
                 _I2C_MasterClearIrq
                   _I2C_MasterIsNack
 ---------------------------------------------------------------------------------
 (6) _I2C_DO_TX_EMPTY                                      2     2      0   26516
                                             17 COMRAM     2     2      0
                   Absolute function *
            _I2C_CallbackReturnReset *
             _I2C_CallbackReturnStop *
                _I2C_DO_SEND_RESTART
                   _I2C_DO_SEND_STOP
                   _I2C_MasterSetIrq
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (7) _I2C_MasterSetIrq                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _I2C_DO_TX                                            2     2      0   26547
                                             17 COMRAM     2     2      0
                   Absolute function *
            _I2C_CallbackReturnReset *
             _I2C_CallbackReturnStop *
           _I2C_DO_SEND_RESTART_READ
          _I2C_DO_SEND_RESTART_WRITE
                   _I2C_DO_SEND_STOP
                   _I2C_MasterIsNack
               _I2C_MasterSendTxData
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (6) _I2C_MasterIsNack                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _I2C_DO_SEND_RESTART_WRITE                            0     0      0       0
            _I2C_MasterEnableRestart
 ---------------------------------------------------------------------------------
 (7) _I2C_DO_SEND_RESTART_READ                             0     0      0       0
            _I2C_MasterEnableRestart
 ---------------------------------------------------------------------------------
 (6) _I2C_DO_SEND_ADR_WRITE                                0     0      0      31
               _I2C_MasterSendTxData
 ---------------------------------------------------------------------------------
 (6) _I2C_DO_SEND_ADR_READ                                 0     0      0      31
               _I2C_MasterSendTxData
 ---------------------------------------------------------------------------------
 (7) _I2C_MasterSendTxData                                 1     1      0      31
                                              6 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _I2C_DO_RX_ACK                                        0     0      0       0
                  _I2C_MasterSendAck
 ---------------------------------------------------------------------------------
 (6) _I2C_DO_RX                                            2     2      0   26516
                                             17 COMRAM     2     2      0
                   Absolute function *
            _I2C_CallbackReturnReset *
             _I2C_CallbackReturnStop *
             _I2C_DO_RX_NACK_RESTART
                _I2C_DO_RX_NACK_STOP
                _I2C_MasterGetRxData
                  _I2C_MasterSendAck
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (7) _I2C_MasterSendAck                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _I2C_MasterGetRxData                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _I2C_DO_RX_NACK_STOP                                  0     0      0       0
                 _I2C_MasterSendNack
 ---------------------------------------------------------------------------------
 (6) _I2C_DO_RX_NACK_RESTART                               0     0      0       0
                 _I2C_MasterSendNack
 ---------------------------------------------------------------------------------
 (7) _I2C_MasterSendNack                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _I2C_DO_RESET                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _I2C_DO_RCEN                                          0     0      0       0
                  _I2C_MasterStartRx
 ---------------------------------------------------------------------------------
 (7) _I2C_MasterStartRx                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _I2C_DO_IDLE                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _I2C_DO_ADDRESS_NACK                                  2     2      0   26516
                                             17 COMRAM     2     2      0
                   Absolute function *
            _I2C_CallbackReturnReset *
             _I2C_CallbackReturnStop *
                _I2C_DO_SEND_RESTART
                   _I2C_DO_SEND_STOP
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (7) _wr2RegCompleteHandler                                2     0      2    5232
                                             15 COMRAM     2     0      2
                      _I2C_SetBuffer
        _I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (7) _wr1RegCompleteHandler                                2     0      2    5232
                                             15 COMRAM     2     0      2
                      _I2C_SetBuffer
        _I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (7) _rdBlkRegCompleteHandler                              2     0      2    5263
                                             15 COMRAM     2     0      2
                      _I2C_SetBuffer
        _I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (7) _rd2RegCompleteHandler                                2     0      2    5232
                                             15 COMRAM     2     0      2
                      _I2C_SetBuffer
        _I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (7) _rd1RegCompleteHandler                                2     0      2    5232
                                             15 COMRAM     2     0      2
                      _I2C_SetBuffer
        _I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (8) _I2C_SetDataCompleteCallback                          4     0      4    2979
                                             11 COMRAM     4     0      4
                    _I2C_SetCallback
 ---------------------------------------------------------------------------------
 (3) _I2C_SetCallback                                      5     1      4    1117
                                              6 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (2) _I2C_SetBuffer                                        4     0      4    2222
                                              6 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (7) _I2C_DO_SEND_STOP                                     0     0      0       0
                     _I2C_MasterStop
 ---------------------------------------------------------------------------------
 (8) _I2C_MasterStop                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _I2C_DO_SEND_RESTART                                  0     0      0       0
            _I2C_MasterEnableRestart
 ---------------------------------------------------------------------------------
 (8) _I2C_MasterEnableRestart                              0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _I2C_CallbackReturnStop                               2     0      2       0
                                             15 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (7) _I2C_CallbackReturnReset                              2     0      2     325
                                             15 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (12) Absolute function(Fake)                              2     0      2       0
 ---------------------------------------------------------------------------------
 (4) _I2C_MasterStart                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Close                                            1     1      0      37
                                              6 COMRAM     1     1      0
                 _I2C_MasterClearIrq
                    _I2C_MasterClose
               _I2C_MasterDisableIrq
 ---------------------------------------------------------------------------------
 (3) _I2C_MasterDisableIrq                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_MasterClose                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_MasterClearIrq                                   0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _INTERRUPT_InterruptManager                          4     4      0      45
                                              2 COMRAM     4     4      0
                   Absolute function *
                 _EUSART_Receive_ISR *
                _EUSART_Transmit_ISR *
                           _TMR0_ISR
                     _USART_RXC_vect *
                     _USART_TXC_vect *
 ---------------------------------------------------------------------------------
 (11) _USART_TXC_vect                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _USART_RXC_vect                                      2     2      0      45
                                              0 COMRAM     2     2      0
                        _TMR0_Reload
                    _TMR0_StartTimer
 ---------------------------------------------------------------------------------
 (12) _TMR0_StartTimer                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _TMR0_Reload                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _TMR0_ISR                                            0     0      0       0
                   Absolute function *
                   _TIMER0_COMP_vect
       _TMR0_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (12) _TMR0_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _TIMER0_COMP_vect                                    0     0      0       0
                     _TMR0_StopTimer
 ---------------------------------------------------------------------------------
 (13) _TMR0_StopTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _EUSART_Transmit_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _EUSART_Receive_ISR                                  0     0      0       0
                   Absolute function *
         _EUSART_DefaultErrorHandler *
  _EUSART_DefaultFramingErrorHandler *
  _EUSART_DefaultOverrunErrorHandler *
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (12) _EUSART_DefaultOverrunErrorHandler                   0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _EUSART_DefaultFramingErrorHandler                   0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _EUSART_DefaultErrorHandler                          0     0      0       0
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (12) _EUSART_RxDataHandler                                0     0      0       0
 ---------------------------------------------------------------------------------
 (12) Absolute function(Fake)                              2     0      2       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EUSART_SetRxInterruptHandler
   _EUSART_SetTxInterruptHandler
   _I2C_ReadNBytes
     _I2C_Close
       _I2C_MasterClearIrq
       _I2C_MasterClose
       _I2C_MasterDisableIrq
     _I2C_MasterRead
       _I2C_MasterOperation
         _I2C_MasterStart
         _I2C_Poller
           _I2C_MasterFsm
             _I2C_DO_ADDRESS_NACK *
               Absolute function(Fake) *
               _I2C_CallbackReturnReset *
               _I2C_CallbackReturnStop *
               _I2C_DO_SEND_RESTART *
                 _I2C_MasterEnableRestart
               _I2C_DO_SEND_STOP *
                 _I2C_MasterStop
               _rd1RegCompleteHandler *
                 _I2C_SetBuffer
                 _I2C_SetDataCompleteCallback
                   _I2C_SetCallback
               _rd2RegCompleteHandler *
                 _I2C_SetBuffer
                 _I2C_SetDataCompleteCallback
               _rdBlkRegCompleteHandler *
                 _I2C_SetBuffer
                 _I2C_SetDataCompleteCallback
               _wr1RegCompleteHandler *
                 _I2C_SetBuffer
                 _I2C_SetDataCompleteCallback
               _wr2RegCompleteHandler *
                 _I2C_SetBuffer
                 _I2C_SetDataCompleteCallback
             _I2C_DO_IDLE *
             _I2C_DO_RCEN *
               _I2C_MasterStartRx
             _I2C_DO_RESET *
             _I2C_DO_RX *
               Absolute function(Fake) *
               _I2C_CallbackReturnReset *
               _I2C_CallbackReturnStop *
               _I2C_DO_RX_NACK_RESTART *
                 _I2C_MasterSendNack
               _I2C_DO_RX_NACK_STOP *
                 _I2C_MasterSendNack
               _I2C_MasterGetRxData *
               _I2C_MasterSendAck *
               _rd1RegCompleteHandler *
               _rd2RegCompleteHandler *
               _rdBlkRegCompleteHandler *
               _wr1RegCompleteHandler *
               _wr2RegCompleteHandler *
             _I2C_DO_RX_ACK *
               _I2C_MasterSendAck
             _I2C_DO_RX_NACK_RESTART *
             _I2C_DO_RX_NACK_STOP *
             _I2C_DO_SEND_ADR_READ *
               _I2C_MasterSendTxData
             _I2C_DO_SEND_ADR_WRITE *
               _I2C_MasterSendTxData
             _I2C_DO_SEND_RESTART *
             _I2C_DO_SEND_RESTART_READ *
               _I2C_MasterEnableRestart
             _I2C_DO_SEND_RESTART_WRITE *
               _I2C_MasterEnableRestart
             _I2C_DO_SEND_STOP *
             _I2C_DO_TX *
               Absolute function(Fake) *
               _I2C_CallbackReturnReset *
               _I2C_CallbackReturnStop *
               _I2C_DO_SEND_RESTART_READ *
               _I2C_DO_SEND_RESTART_WRITE *
               _I2C_DO_SEND_STOP *
               _I2C_MasterIsNack *
               _I2C_MasterSendTxData *
               _rd1RegCompleteHandler *
               _rd2RegCompleteHandler *
               _rdBlkRegCompleteHandler *
               _wr1RegCompleteHandler *
               _wr2RegCompleteHandler *
             _I2C_DO_TX_EMPTY *
               Absolute function(Fake) *
               _I2C_CallbackReturnReset *
               _I2C_CallbackReturnStop *
               _I2C_DO_SEND_RESTART *
               _I2C_DO_SEND_STOP *
               _I2C_MasterSetIrq *
               _rd1RegCompleteHandler *
               _rd2RegCompleteHandler *
               _rdBlkRegCompleteHandler *
               _wr1RegCompleteHandler *
               _wr2RegCompleteHandler *
             _I2C_MasterClearIrq *
             _I2C_MasterIsNack *
           _I2C_MasterWaitForEvent
     _I2C_Open
       _I2C_MasterClearIrq
       _I2C_MasterOpen
     _I2C_SetBuffer
   _I2C_WriteNBytes
     _I2C_Close
     _I2C_MasterWrite
       _I2C_MasterOperation
     _I2C_Open
     _I2C_SetAddressNackCallback
       _I2C_SetCallback
     _I2C_SetBuffer
   _SYSTEM_Initialize
     _EUSART_Initialize
       _EUSART_SetErrorHandler
       _EUSART_SetFramingErrorHandler
       _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
       _EUSART_SetTxInterruptHandler
     _I2C_Initialize
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR0_Initialize
       _TMR0_SetInterruptHandler
   _USART_UDRE_vect
   _modbasRtu_Slave
     _Data_integrity
       _crc_chk
     _Error_modbasRtu
       _check_sum
         _crc_chk
     _modbasRtu_Answer
       _Changing_Discrete_Output
         _Error_modbasRtu
         _ModbasRtu_Register_address
         __Bin_input_Output
       _Error_modbasRtu
       _Read_analog_input
         _Error_modbasRtu
         _ModbasRtu_Register_address
         _check_sum
       _Reading_Discrete_Output
         _Error_modbasRtu
         _ModbasRtu_Register_address
         _check_sum
       _analog_output_recording
         _Error_modbasRtu
         _ModbasRtu_Register_address

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _EUSART_Receive_ISR *
     Absolute function(Fake) *
     _EUSART_DefaultErrorHandler *
       _EUSART_RxDataHandler
     _EUSART_DefaultFramingErrorHandler *
     _EUSART_DefaultOverrunErrorHandler *
     _EUSART_RxDataHandler *
   _EUSART_Transmit_ISR *
   _TMR0_ISR *
     Absolute function(Fake) *
     _TIMER0_COMP_vect *
       _TMR0_StopTimer
     _TMR0_DefaultInterruptHandler *
   _USART_RXC_vect *
     _TMR0_Reload
     _TMR0_StartTimer
   _USART_TXC_vect *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F5F      0       0      52        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      B      81       5       80.6%
BITBANK15           60      0       0      35        0.0%
BANK15              60      0       0      36        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     23      52       1       87.2%
BITBIGSFRllllll     1C      0       0      51        0.0%
BITBIGSFRhlhh       19      0       0      38        0.0%
BITBIGSFRhh          D      0       0      37        0.0%
BITBIGSFRlhh         C      0       0      42        0.0%
BITBIGSFRlhll        9      0       0      44        0.0%
BITBIGSFRllllh       8      0       0      49        0.0%
BITBIGSFRlhlhh       7      0       0      43        0.0%
BITBIGSFRlllhhl      6      0       0      47        0.0%
BITBIGSFRlllhl       6      0       0      48        0.0%
BITBIGSFRhlll        6      0       0      41        0.0%
BITBIGSFRhllh        2      0       0      40        0.0%
BITBIGSFRllh         2      0       0      45        0.0%
BITBIGSFRlllhhh      1      0       0      46        0.0%
BITBIGSFRhlhl        1      0       0      39        0.0%
BITBIGSFRlllllh      1      0       0      50        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      D3      28        0.0%
DATA                 0      0      D3       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Thu Dec 22 08:14:31 2022

                ?_EUSART_SetRxInterruptHandler 0007                         ??_I2C_DO_SEND_ADR_READ 0007  
                                            _D 003B                    ?_ModbasRtu_Register_address 0007  
                      ??_I2C_DO_SEND_ADR_WRITE 0008                                    _SSPSTATbits 000FC7  
                  Reading_Discrete_Output@Temp 001A                                _timer0ReloadVal 004C  
                        ??_I2C_DO_SEND_RESTART 0007                                            l278 1524  
                                          l294 1600                                            l817 142C  
                                          l874 127E                                            l795 16E8  
                                          l875 1280                                            l963 1368  
                                          l966 1376                         ??_EUSART_RxDataHandler 0001  
                       _I2C_MasterWaitForEvent 1F28                 ?_EUSART_SetFramingErrorHandler 0007  
                                          prod 000FF3                                            tosl 000FFD  
                                          wreg 000FE8                                    main@address 00DB  
                 ??_I2C_SetAddressNackCallback 0010                       ??_I2C_CallbackReturnStop 0012  
                                 _I2C_DO_RESET 1E5C                        ??_rd2RegCompleteHandler 0012  
                                         l4113 17B2                                           l4043 14D4  
                                         l4109 17AC                                           l4125 17C0  
                                         l4061 154E                                           l4053 14E0  
                                         l4213 1E1C                                           l4119 17BA  
                                         l4047 14DA                                           l4039 14CE  
                                         l4231 139C                                           l4311 1828  
                                         l4153 1978                                           l4217 1E24  
                                         l4241 13DA                                           l4083 1604  
                                         l4243 13F4                                           l4227 1394  
                                         l4315 1848                                           l4331 1078  
                                         l4093 1610                                           l4149 1972  
                                         l4181 1712                                           l4245 1406  
                                         l4341 10D2                                           l4325 105A  
                                         l4087 160A                                           l4159 197E  
                                         l4167 16CC                                           l4335 1096  
                                         l4327 106A                                           l4601 1A3A  
                                         l4249 1428                                           l4409 120C  
                                         l4353 10FA                                           l4361 1110  
                                         l4283 1B92                                           l4611 1B6A  
                                         l4603 1B46                                           l4179 1704  
                                         l4419 19DE                                           l4197 187A  
                                         l4631 1D0C                                           l4383 116E  
                                         l4289 1B9E                                           l4465 15D2  
                                         l4393 11A2                                           l4369 1130  
                                         l4571 125C                                           l4485 1D54  
                                         l4389 118A                                           l4573 1272  
                                         l4565 1222                                           l4581 128A  
                                         l4591 1A02                                           l4559 190E  
                                         l4575 1278                                           l4567 1234  
                                         l4583 12CE                                           l4647 1CC4  
                                         l4577 1282                                           l4569 1246  
                                         l3891 1774                                           l4781 1314  
                                         l4795 1382                                ?_USART_RXC_vect 0001  
                                         u2010 1E88                                           u2100 1726  
                                         u2204 13D0                                           u2300 1084  
                                         u2205 13CC                                           _LATA 000F89  
                                         u2038 14EC                                           u2214 13EA  
                                         _LATB 000F8A                                           u2039 1500  
                                         u2215 13E6                                           _LATC 000F8B  
                                         u2224 1416                                           u2225 1412  
                                         u2314 10AC                                           u2410 19D6  
                                         u2315 10A8                                           u2068 161C  
                                         u2069 162E                                           u2078 17CC  
                                         u2158 18A2                                           u2270 1820  
                                         u2334 10CA                                           u2079 17DE  
                                         u2159 18B4                                           u2335 10C6  
                                         u2088 198A                                           u2089 199C  
                                         _WPUB 000F7C                        ??_wr2RegCompleteHandler 0012  
                              ?_USART_TXC_vect 0001                 Reading_Discrete_Output@Number_ 0016  
                                         _main 12D6                       ?_I2C_CallbackReturnReset 0010  
                              _TMR0_StartTimer 1F80                                           fsr2h 000FDA  
                                         indf1 000FE7                                           indf2 000FDF  
                                         fsr1l 000FE1                                           fsr2l 000FD9  
                             __end_of_I2C_Open 15D6                                           btemp 0053  
                             ?_USART_UDRE_vect 0001                                           prodh 000FF4  
                                         prodl 000FF3                                           start 0070  
                             _modbasRtu_Answer 121C                 Reading_Discrete_Output@address 0020  
                                 ___param_bank 000000                               ?_I2C_MasterClose 0001  
                      __end_of_TMR0_Initialize 1D36                                _I2C_WriteNBytes 1A00  
               ??_TMR0_DefaultInterruptHandler 0001                               ?_I2C_MasterStart 0001  
                                _I2C_DO_RX_ACK 1EF2                               ?_I2C_MasterWrite 0001  
                __end_of_OSCILLATOR_Initialize 1EA0                                          ?_main 0001  
                    ??_analog_output_recording 0014                                          _ANSEL 000F7E  
                                        _T0CON 000FD5                                          i2l723 0026  
                                        i2l726 0040                                          i2l663 1C78  
                                        _RCREG 000FAE                                          _RCSTA 000FAB  
                                        _TMR0H 000FD7                                          _TMR0L 000FD6  
                                        _SPBRG 000FAF                              ??_I2C_DO_TX_EMPTY 0012  
                                        _TRISA 000F92                                          _TRISB 000F93  
                                        _TRISC 000F94                                          _TXREG 000FAD  
                                        _TXSTA 000FAC                      ?_TMR0_SetInterruptHandler 0007  
                              __end_of_crc_chk 1738                               __end_of_TMR0_ISR 1CA4  
                            __end_of_I2C_DO_RX 1652                              __end_of_I2C_DO_TX 1552  
                               _Temp_ModbasRtu 003D                       ?_Reading_Discrete_Output 0014  
                            __end_of_I2C_Close 1D58                 I2C_MasterOperation@returnValue 0017  
                      _I2C_MasterEnableRestart 1F68                                          pclath 000FFA  
                                        pclatu 000FFB             Reading_Discrete_Output@Number_bits 001E  
                                        tablat 000FF5                               ?_I2C_SetCallback 0007  
                 I2C_SetAddressNackCallback@cb 000C                                          ttemp5 0054  
                                        ttemp6 0057                                          ttemp7 005B  
                                        status 000FD8                                          wtemp8 0054  
                            ?_I2C_DO_SEND_STOP 0001                 analog_output_recording@address 0014  
                           ??_I2C_DO_SEND_STOP 0007                                __initialization 1A46  
                                 __end_of_main 1388                      ?_I2C_DO_SEND_RESTART_READ 0001  
                               ?_I2C_DO_RX_ACK 0001                    ?_INTERRUPT_InterruptManager 0001  
               ??_EUSART_SetRxInterruptHandler 0009                                         ??_main 0024  
             __end_of_Changing_Discrete_Output 1860                              ?_I2C_MasterIsNack 0001  
                                __activetblptr 000003                              ?_I2C_MasterSetIrq 0001  
                           ??_I2C_MasterIsNack 0007                               ??_Data_integrity 0010  
                           ??_I2C_MasterSetIrq 0007      __end_of_EUSART_DefaultFramingErrorHandler 1F8C  
          ??_EUSART_DefaultFramingErrorHandler 0001             ?_EUSART_DefaultFramingErrorHandler 0001  
            _EUSART_DefaultFramingErrorHandler 1F8A                        __end_of_TMR0_StartTimer 1F84  
                   _EUSART_OverrunErrorHandler 00DF                __end_of_I2C_CallbackReturnReset 1F60  
                I2C_SetDataCompleteCallback@cb 000C                                         _ANSELH 000F7F  
                                 ??_I2C_Poller 0016                                         i2l3203 1D74  
                                       i2l2435 1C74                                         i2l3537 14BC  
                                       i2l3555 1948                                         i2l3559 1950  
                                       _OSCCON 000FD3                __end_of_analog_output_recording 1A00  
                                       _SPBRGH 000FB0                                         _SSPADD 000FC8  
                                       _SSPBUF 000FC9                            _I2C_MasterGetRxData 1F54  
                      __end_of_I2C_WriteNBytes 1A46                                   ?_TMR0_Reload 0001  
                                _I2C_MasterFsm 1860                            _EUSART_Transmit_ISR 1C52  
                             ?_TMR0_Initialize 0001                                         clear_0 1A6C  
                                       clear_1 1A78                              I2C_SetCallback@cb 0007  
                                       isa$std 000001                                      ??_crc_chk 000A  
                                _I2C_SetBuffer 1D92                             __end_of_I2C_Poller 1E2C  
                 __end_of_I2C_MasterDisableIrq 1F74                  Reading_Discrete_Output@Massiv 0014  
                          _I2C_DO_ADDRESS_NACK 1968                                   __pdataCOMRAM 004D  
              __end_of_Reading_Discrete_Output 1142                           ?_I2C_MasterGetRxData 0001  
                                    ?_I2C_Open 0001             __end_of_I2C_SetAddressNackCallback 1DC4  
                   _I2C_SetAddressNackCallback 1DAC                                   __mediumconst 0000  
                                       tblptrh 000FF7                                         tblptrl 000FF6  
                                       tblptru 000FF8                      ??_I2C_MasterEnableRestart 0007  
     TMR0_SetInterruptHandler@InterruptHandler 0007                           ?_EUSART_Transmit_ISR 0001  
                            _SYSTEM_Initialize 1D78                                     __accesstop 0060  
                      __end_of__initialization 1A7E                            _I2C_MasterOperation 1B76  
                           ?_SYSTEM_Initialize 0001                                  ___rparam_used 000001  
                         ?_I2C_DO_ADDRESS_NACK 0001                                check_sum@Adress 0012  
         __end_of_EUSART_SetTxInterruptHandler 1EAA                   _EUSART_SetTxInterruptHandler 1EA0  
                      _rdBlkRegCompleteHandler 1ACA                                 __pcstackCOMRAM 0001  
                               ?_I2C_MasterFsm 0001                                ??_I2C_DO_RX_ACK 0007  
                       _I2C_CallbackReturnStop 1F60                            ??_SYSTEM_Initialize 0009  
                                    ?_TMR0_ISR 0001                   Read_analog_input@Number_bits 001E  
                               ?_I2C_SetBuffer 0007                        ?_I2C_MasterWaitForEvent 0001  
                __end_of_I2C_DO_SEND_ADR_WRITE 1E3C                     ?_I2C_DO_SEND_RESTART_WRITE 0001  
                         ?_I2C_MasterOperation 0001                              ??_modbasRtu_Slave 0024  
                        ??_I2C_MasterGetRxData 0007                          I2C_ReadNBytes@address 001C  
                                   ??_I2C_Open 0007                       __end_of_modbasRtu_Answer 12D6  
                         _eusartRxStatusBuffer 0024                               ??_USART_RXC_vect 0001  
                   __end_of_I2C_MasterClearIrq 1F7C                       _Changing_Discrete_Output 1806  
                             ??_USART_TXC_vect 0001                ??_EUSART_SetOverrunErrorHandler 0009  
                             ?_TMR0_StartTimer 0001                      __end_of_SYSTEM_Initialize 1D92  
                        ??_EUSART_Transmit_ISR 0001                              _I2C_MasterSendAck 1F2E  
                                   __pbssBANK0 0060                               _TIMER0_COMP_vect 1E4C  
                                ??_I2C_DO_IDLE 0007                                  ??_I2C_DO_RCEN 0007  
                __end_of_rd2RegCompleteHandler 1BFA                   __end_of_I2C_MasterSendTxData 1F22  
                           ?_I2C_MasterSendAck 0001                              _I2C_MasterStartRx 1F58  
                                   __pnvCOMRAM 0043                          ??_I2C_DO_ADDRESS_NACK 0012  
                __end_of_wr2RegCompleteHandler 1C52                            _I2C_DO_RX_NACK_STOP 1EEA  
                        _rd1RegCompleteHandler 1BFA                             ?_I2C_MasterStartRx 0001  
                   __end_of_I2C_MasterSendNack 1F3A                               ?_I2C_WriteNBytes 0018  
                       I2C_WriteNBytes@address 001C                          _wr1RegCompleteHandler 1BA2  
                          ??_I2C_MasterSendAck 0007                       rd1RegCompleteHandler@ptr 0010  
                          Read_analog_input@Vt 0017                  ?_EUSART_SetTxInterruptHandler 0007  
             _EUSART_TxDefaultInterruptHandler 0047                    __end_of_I2C_DO_SEND_RESTART 1F0A  
                              _I2C_DO_TX_EMPTY 17A6               __end_of_TMR0_SetInterruptHandler 1E96  
                          I2C_SetBuffer@buffer 0007                                     ??_TMR0_ISR 0001  
               __end_of_I2C_MasterWaitForEvent 1F2E                            ??_I2C_MasterStartRx 0007  
                                      _BAUDCON 000FB8                   ??_EUSART_DefaultErrorHandler 0001  
                        ??_I2C_MasterOperation 0016                 I2C_SetDataCompleteCallback@ptr 000E  
                     ??_I2C_DO_RX_NACK_RESTART 0007              __end_of_I2C_DO_SEND_RESTART_WRITE 1F12  
                         ?_I2C_DO_RX_NACK_STOP 0001                                  _eusartRxCount 0035  
                      Read_analog_input@Adress 0020                        Read_analog_input@Massiv 0014  
                    __end_of_I2C_MasterSendAck 1F34                                        _OSCTUNE 000F9B  
                                      i2u55_48 1C92                       ??_EUSART_SetErrorHandler 0009  
                                      _SSPCON1 000FC6                                        _SSPCON2 000FC5  
                                      _SSPSTAT 000FC7                           _Bit_action_ModbasRtu 003C  
                    __end_of_I2C_MasterStartRx 1F5C                              __end_of_check_sum 1ACA  
                         I2C_Close@returnValue 0007                   ?_I2C_SetDataCompleteCallback 000C  
                                    _I2C_DO_RX 15D6                                      _I2C_DO_TX 14C2  
             __end_of_I2C_DO_SEND_RESTART_READ 1F1A                                      _I2C_Close 1D36  
                    ??_rdBlkRegCompleteHandler 0012                           _I2C_MasterDisableIrq 1F70  
                              ??_I2C_MasterFsm 0014                                        __Hparam 0000  
                                      __Lparam 0000                                 _I2C_ReadNBytes 1B44  
                          __end_of_I2C_DO_IDLE 1E80                            __end_of_I2C_DO_RCEN 1E74  
                              ??_I2C_SetBuffer 000B                        I2C_SetBuffer@bufferSize 0009  
                                 __psmallconst 1000                             I2C_ReadNBytes@data 0018  
                               _I2C_MasterRead 1EDA                                 _I2C_MasterOpen 1DC4  
                                      __pcinit 1A46                                 _I2C_MasterStop 1F64  
                               _I2C_Initialize 1DF4                                        __ramtop 1000  
                                      _crc_chk 16C6                                        __ptext0 12D6  
                                      __ptext1 1CA4                                        __ptext2 121C  
                                      __ptext3 19B8                                        __ptext4 1022  
                                      __ptext5 1142                                        __ptext6 1806  
                                      __ptext7 1388                                        __ptext8 1B0A  
                                      __ptext9 1E08                          ??_I2C_DO_RX_NACK_STOP 0007  
                                    _T0CONbits 000FD5                          _OSCILLATOR_Initialize 1E96  
                           I2C_SetCallback@idx 000B                       ??_PIN_MANAGER_Initialize 0007  
                I2C_CallbackReturnReset@funPtr 0010                             I2C_SetCallback@ptr 0009  
                     wr1RegCompleteHandler@ptr 0010                                        main@dat 00D5  
                                      main@red 00D8                           end_of_initialization 1A7E  
                                   ?_I2C_DO_RX 0001                                     ?_I2C_DO_TX 0001  
        __end_of_EUSART_SetOverrunErrorHandler 1EBE                  _EUSART_SetOverrunErrorHandler 1EB4  
                                   ?_I2C_Close 0001                         ?_rd1RegCompleteHandler 0010  
                      __end_of_I2C_DO_TX_EMPTY 1806                          ?_I2C_MasterDisableIrq 0001  
                       __end_of_I2C_ReadNBytes 1B76                              _EUSART_Initialize 1652  
                       ?_wr1RegCompleteHandler 0010                              ??_Error_modbasRtu 0013  
                           ?_EUSART_Initialize 0001                                      _RCSTAbits 000FAB  
                                      postdec1 000FE5                                        postdec2 000FDD  
                       __end_of_I2C_MasterRead 1EE2                         __end_of_I2C_MasterOpen 1DDC  
                                      postinc0 000FEE                                        postinc2 000FDE  
                       __end_of_I2C_MasterStop 1F68                         __end_of_I2C_Initialize 1E08  
                     ?_analog_output_recording 0001                        __Bin_input_Output@Masiv 0008  
                      __Bin_input_Output@Temp1 000F                            ??_EUSART_Initialize 0009  
               ??_EUSART_SetTxInterruptHandler 0009                       _TMR0_SetInterruptHandler 1E8C  
                                    _PORTAbits 000F80                __end_of_rdBlkRegCompleteHandler 1B0A  
                      __Bin_input_Output@state 0007                           _I2C_MasterSendTxData 1F1A  
                  ?_I2C_SetAddressNackCallback 000C                              _Read_analog_input 1142  
                           ?_Read_analog_input 0014                      __end_of_EUSART_Initialize 16C6  
                                  _I2C_DO_IDLE 1E74                                    _I2C_DO_RCEN 1E68  
                   rdBlkRegCompleteHandler@ptr 0010                                      _TXSTAbits 000FAC  
                              ?_I2C_ReadNBytes 0018                        ?_I2C_CallbackReturnStop 0010  
                     _I2C_DO_SEND_RESTART_READ 1F12                        _quantity_Data_ModbasRtu 003E  
                          ??_Read_analog_input 0018                                _modbasRtu_Slave 1CA4  
                               _TMR0_StopTimer 1F84                   I2C_CallbackReturnStop@funPtr 0010  
                              ?_I2C_MasterRead 0001                                ?_I2C_MasterOpen 0001  
                 __end_of_INTERRUPT_Initialize 1F50                                ?_I2C_MasterStop 0001  
                              ?_I2C_Initialize 0001                        _I2C_CallbackReturnReset 1F5C  
                               crc_chk@reg_crc 000E             __end_of_EUSART_DefaultErrorHandler 1F4C  
                 ??_ModbasRtu_Register_address 0009                     _EUSART_DefaultErrorHandler 1F46  
                   ??_Changing_Discrete_Output 0014                       __end_of_TIMER0_COMP_vect 1E5C  
                                __pidataCOMRAM 1F22                          ?_I2C_MasterSendTxData 0001  
                       ?_OSCILLATOR_Initialize 0001                    ??_I2C_DO_SEND_RESTART_WRITE 0007  
                            ??_USART_UDRE_vect 0007                            start_initialization 1A46  
                    __end_of_Read_analog_input 121C                              ?_modbasRtu_Answer 0001  
                                ?_I2C_DO_RESET 0001                Changing_Discrete_Output@address 0014  
                           ??_modbasRtu_Answer 0022   EUSART_SetRxInterruptHandler@interruptHandler 0007  
 EUSART_SetTxInterruptHandler@interruptHandler 0007                                    ??_I2C_DO_RX 0012  
                                  ??_I2C_DO_TX 0012                              ??_I2C_MasterClose 0007  
                       ??_I2C_MasterDisableIrq 0007                                    ??_I2C_Close 0007  
                            ??_I2C_MasterStart 0007                              __Bin_input_Output 1388  
                            ??_I2C_MasterWrite 0018                 __end_of_I2C_CallbackReturnStop 1F64  
                       _I2C_DO_RX_NACK_RESTART 1EE2                               ?_I2C_DO_TX_EMPTY 0001  
                           _I2C_MasterClearIrq 1F78                         __end_of_TMR0_StopTimer 1F88  
                           ?__Bin_input_Output 0007                        _Reading_Discrete_Output 1022  
               ?_EUSART_SetOverrunErrorHandler 0007                           Data_integrity@Temp22 0011  
                         Data_integrity@Temp33 0013                     _EUSART_FramingErrorHandler 0043  
                       _EUSART_SetErrorHandler 1EC8                            ?_I2C_MasterClearIrq 0001  
                  __end_of_I2C_MasterGetRxData 1F58                   Reading_Discrete_Output@Danie 0019  
                          ??__Bin_input_Output 000B                          __end_of_I2C_DO_RX_ACK 1EFA  
                 Reading_Discrete_Output@Temp2 001B                   Reading_Discrete_Output@Temp3 001D  
                             _I2C_DO_SEND_STOP 1EFA                              ??_I2C_SetCallback 000B  
                           _Danie_Rx_ModbasRtu 008C                            I2C_Open@returnValue 0008  
                           _I2C_MasterSendNack 1F34                       ?_I2C_MasterEnableRestart 0001  
                            _i2c_fsmStateTable 1001                    __end_of_EUSART_Transmit_ISR 1C7C  
                        _I2C_DO_SEND_ADR_WRITE 1E2C                                    __pbssCOMRAM 0024  
                                __pcstackBANK0 00D2                                 ??_I2C_DO_RESET 0007  
                          ?_I2C_MasterSendNack 0001                       USART_RXC_vect@TempModbas 0002  
                 __end_of_I2C_DO_SEND_ADR_READ 1E4C                           ??_I2C_MasterClearIrq 0007  
                  __end_of_I2C_DO_ADDRESS_NACK 19B8                  _Danie_ModbasRtu_Binary_Output 003F  
                    __end_of__Bin_input_Output 1430                     __end_of_EUSART_Receive_ISR 14C2  
                             _I2C_MasterIsNack 1E80                        __end_of_modbasRtu_Slave 1CCA  
                    _I2C_DO_SEND_RESTART_WRITE 1F0A               _EUSART_RxDefaultInterruptHandler 0045  
                             _I2C_MasterSetIrq 1F50                          _TMR0_InterruptHandler 0049  
                                    __pnvBANK0 00DD                                      _check_sum 1A88  
                        _rd2RegCompleteHandler 1BCE                                ?_TMR0_StopTimer 0001  
                 __end_of_EUSART_RxDataHandler 1D78                         _PIN_MANAGER_Initialize 1CCA  
                        _wr2RegCompleteHandler 1C26                      ??_I2C_CallbackReturnReset 0012  
                  __end_of_I2C_MasterOperation 1BA2                           ??_I2C_MasterSendNack 0007  
                     rd2RegCompleteHandler@ptr 0010                                      __pintcode 0008  
                                 _eusartRxHead 0037                                   _eusartTxHead 0039  
                       Read_analog_input@Danie 001A                                   _eusartRxTail 0036  
                       ??_I2C_MasterSendTxData 0007                                   _eusartTxTail 0038  
                    __end_of_i2c_fsmStateTable 1021                   ??_INTERRUPT_InterruptManager 0003  
                         __Bin_input_Output@Sd 000A                                       ?_crc_chk 0007  
                      _eusartTxBufferRemaining 004B                                    __smallconst 1000  
                      I2C_MasterOperation@read 0016                                       _I2C_Open 1552  
                              _Error_modbasRtu 1E08                              I2C_ReadNBytes@len 001A  
                      ??_rd1RegCompleteHandler 0012                Reading_Discrete_Output@address2 001C  
                         _INTERRUPT_Initialize 1F4C                                 _eusartRxBuffer 0084  
                      ??_wr1RegCompleteHandler 0012                              ??_TMR0_Initialize 0009  
                               _eusartTxBuffer 002C                      ??_Reading_Discrete_Output 0017  
                                     _LATAbits 000F89         EUSART_SetErrorHandler@interruptHandler 0007  
                                   ?_check_sum 0001                                       _PIE1bits 000F9D  
                            _eusartRxLastError 0034                                       i2u161_48 14A8  
                                     i2u165_40 1936                     ??_TMR0_SetInterruptHandler 0009  
                                     i2u165_46 1938                                       i2u157_48 1456  
                                     i2u157_49 1468                                       i2u159_48 147E  
                                     i2u159_49 1492                                       i2u192_48 004A  
                                     i2u192_49 005C                                       _PIR1bits 000F9E  
              ??_EUSART_SetFramingErrorHandler 0009                                       _PIR2bits 000FA1  
                _Danie_ModbasRtu_analog_Output 00AA                                       i2u189_48 0034  
                                ??_TMR0_Reload 0001                          __end_of_I2C_MasterFsm 18BA  
                                     _RCONbits 000FD0                       Read_analog_input@Number_ 0016  
                                    main@F3020 004D                                      main@F3018 0050  
                       __Bin_input_Output@Temp 000E                    __end_of_I2C_DO_RX_NACK_STOP 1EF2  
           __end_of_ModbasRtu_Register_address 1B44                     _ModbasRtu_Register_address 1B0A  
                                     _TMR0_ISR 1C7C      __end_of_EUSART_DefaultOverrunErrorHandler 1F46  
          ??_EUSART_DefaultOverrunErrorHandler 0001             ?_EUSART_DefaultOverrunErrorHandler 0001  
            _EUSART_DefaultOverrunErrorHandler 1F40                __end_of_I2C_MasterEnableRestart 1F6C  
                     Read_analog_input@address 001C                          __end_of_I2C_SetBuffer 1DAC  
                       ?_I2C_DO_SEND_ADR_WRITE 0001                       I2C_MasterSendTxData@data 0007  
                     wr2RegCompleteHandler@ptr 0010                                  crc_chk@length 0009  
                                  _INTCON2bits 000FF1                     ??_I2C_DO_SEND_RESTART_READ 0007  
                                    copy_data0 1A5A                          ?_INTERRUPT_Initialize 0001  
                     ?_rdBlkRegCompleteHandler 0010                               ??_I2C_ReadNBytes 001C  
                                   _I2C_Poller 1E1A                                     _I2C_Status 0060  
                                 ?_I2C_DO_IDLE 0001                                   ?_I2C_DO_RCEN 0001  
                             ?_modbasRtu_Slave 0001                         ?_rd2RegCompleteHandler 0010  
                               _Data_integrity 18BA                               ??_I2C_MasterRead 0018  
                          I2C_WriteNBytes@data 0018                               ??_I2C_MasterOpen 0007  
                       ?_wr2RegCompleteHandler 0010                               ??_I2C_MasterStop 0007  
                     ??_I2C_MasterWaitForEvent 0007                               ??_I2C_Initialize 0007  
                                     __Hrparam 0000                                       __Lrparam 0000  
                         __end_of_I2C_DO_RESET 1E68                                _USART_UDRE_vect 1CF0  
                      ??_OSCILLATOR_Initialize 0007                            _EUSART_ErrorHandler 00DD  
                            ??_TMR0_StartTimer 0001                           _I2C_DO_SEND_ADR_READ 1E3C  
                  ?_EUSART_DefaultErrorHandler 0001                              ?_TIMER0_COMP_vect 0001  
                          __end_of_TMR0_Reload 1F40                        __end_of_Error_modbasRtu 1E1A  
                           ??_TIMER0_COMP_vect 0001                                _I2C_MasterClose 1F74  
                I2C_SetAddressNackCallback@ptr 000E                   _Danie_ModbasRtu_Binary_input 0041  
                              I2C_Open@address 0007                                    check_sum@RC 0010  
                              _I2C_MasterStart 1F6C                                _I2C_MasterWrite 1ED2  
                         _EUSART_RxDataHandler 1D58                              ??_I2C_WriteNBytes 001C  
                                     __ptext10 1A88                                       __ptext11 18BA  
                                     __ptext20 1DF4                                       __ptext12 16C6  
                                     __ptext21 1652                                       __ptext13 1CF0  
                                     __ptext30 1B44                                       __ptext22 1EA0  
                                     __ptext14 1D78                                       __ptext31 1552  
                                     __ptext23 1EAA                                       __ptext15 1D14  
                                     __ptext40 1EE2                                       __ptext32 1DC4  
                                     __ptext24 1EB4                                       __ptext16 1E8C  
                                     __ptext41 1EEA                                       __ptext33 1EDA  
                                     __ptext25 1EBE                                       __ptext17 1CCA  
                                     __ptext50 1E2C                                       __ptext42 1EF2  
                                     __ptext34 1B76                                       __ptext26 1EC8  
                                     __ptext18 1E96                                       __ptext51 1E3C  
                                     __ptext43 1EFA                                       __ptext35 1E1A  
                                     __ptext27 1A00                                       __ptext19 1F4C  
                                     __ptext60 1F58                                       __ptext52 1E74  
                                     __ptext44 1F02                                       __ptext36 1F28  
                                     __ptext28 1DAC                                       __ptext61 1F5C  
                                     __ptext53 17A6                                       __ptext45 1F0A  
                                     __ptext37 1860                                       __ptext29 1ED2  
                                     __ptext70 1D92                                       __ptext62 1F60  
                                     __ptext54 1F50                                       __ptext46 1F12  
                                     __ptext38 1968                                       __ptext71 1F64  
                                     __ptext63 1ACA                                       __ptext55 1E80  
                                     __ptext47 1E68                                       __ptext39 1E5C  
                                     __ptext80 1F7C                                       __ptext72 1F68  
                                     __ptext64 1BA2                                       __ptext56 1F1A  
                                     __ptext48 15D6                                       __ptext81 1430  
                                     __ptext73 1F6C                                       __ptext65 1BCE  
                                     __ptext57 1F2E                                       __ptext49 14C2  
                                     __ptext90 1F8A                                       __ptext82 1912  
                                     __ptext74 1D36                                       __ptext66 1BFA  
                                     __ptext58 1F54                                       __ptext91 1F46  
                                     __ptext83 1F80                                       __ptext75 1F70  
                                     __ptext67 1C26                                       __ptext59 1F34  
                                     __ptext92 1D58                                       __ptext84 1F3A  
                                     __ptext76 1F74                                       __ptext68 1DDC  
                                     __ptext93 0000                                       __ptext85 1C7C  
                                     __ptext77 1F78                                       __ptext69 1738  
                                     __ptext86 1F88                                       __ptext87 1E4C  
                                     __ptext79 1C52                                       __ptext88 1F84  
                                     __ptext89 1F40            __end_of_I2C_SetDataCompleteCallback 1DF4  
                  _I2C_SetDataCompleteCallback 1DDC                        ?_I2C_DO_RX_NACK_RESTART 0001  
                       __end_of_Data_integrity 1912                       __end_of_I2C_DO_SEND_STOP 1F02  
                                  ??_check_sum 0010           __end_of_TMR0_DefaultInterruptHandler 1F8A  
                 _TMR0_DefaultInterruptHandler 1F88                        ?_EUSART_SetErrorHandler 0007  
                              _I2C_SetCallback 1738                  ??_I2C_SetDataCompleteCallback 0010  
                                     crc_chk@j 000C  EUSART_SetOverrunErrorHandler@interruptHandler 0007  
                                     isa$xinst 000000                   _Danie_ModbasRtu_analog_input 00BE  
                                     int$flags 0053                          ?_I2C_DO_SEND_ADR_READ 0001  
           __end_of_INTERRUPT_InterruptManager 0070                     _INTERRUPT_InterruptManager 0008  
        __end_of_EUSART_SetFramingErrorHandler 1EC8                  _EUSART_SetFramingErrorHandler 1EBE  
                                     main@bitt 00DC                                       main@red2 00D2  
                     __end_of_I2C_MasterIsNack 1E8C                       __end_of_I2C_MasterSetIrq 1F54  
                                   _INTCONbits 000FF2                             I2C_WriteNBytes@len 001A  
                        ?_EUSART_RxDataHandler 0001                         ??_INTERRUPT_Initialize 0007  
               __end_of_I2C_DO_RX_NACK_RESTART 1EEA                                 _USART_UDR_vect 003A  
                                     intlevel2 0000                                    ?_I2C_Poller 0001  
                    ?_Changing_Discrete_Output 0001                               ??_TMR0_StopTimer 0001  
                              ?_Data_integrity 0001                                 _USART_RXC_vect 1912  
                      ?_PIN_MANAGER_Initialize 0001                 __end_of_EUSART_SetErrorHandler 1ED2  
                      __end_of_USART_UDRE_vect 1D14                                 _USART_TXC_vect 1F7C  
                          _I2C_DO_SEND_RESTART 1F02           __end_of_EUSART_SetRxInterruptHandler 1EB4  
                 _EUSART_SetRxInterruptHandler 1EAA                  ?_TMR0_DefaultInterruptHandler 0001  
                                  _TMR0_Reload 1F3A                       __Bin_input_Output@NUMBER 000D  
                           _EUSART_Receive_ISR 1430                                    crc_chk@data 0007  
EUSART_SetFramingErrorHandler@interruptHandler 0007                        __end_of_I2C_MasterClose 1F78  
                      __end_of_I2C_MasterStart 1F70                        __end_of_I2C_MasterWrite 1EDA  
                         ?_I2C_DO_SEND_RESTART 0001                               ?_Error_modbasRtu 0001  
                          ?_EUSART_Receive_ISR 0001                                _TMR0_Initialize 1D14  
                      _analog_output_recording 19B8                                    _SSPCON1bits 000FC6  
                                  _SSPCON2bits 000FC5                   ModbasRtu_Register_address@Hi 000D  
                 ModbasRtu_Register_address@Li 000E                         __end_of_USART_RXC_vect 1968  
                      __end_of_I2C_SetCallback 17A6                 __end_of_PIN_MANAGER_Initialize 1CF0  
                       __end_of_USART_TXC_vect 1F80                      Error_modbasRtu@Temp_Error 0013  
                __end_of_rd1RegCompleteHandler 1C26                           ??_EUSART_Receive_ISR 0001  
                __end_of_wr1RegCompleteHandler 1BCE  
